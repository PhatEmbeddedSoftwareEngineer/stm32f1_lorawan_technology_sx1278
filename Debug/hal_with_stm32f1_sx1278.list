
hal_with_stm32f1_sx1278.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e1c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08008f30  08008f30  00018f30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009428  08009428  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08009428  08009428  00019428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009430  08009430  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009430  08009430  00019430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009434  08009434  00019434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08009438  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  200001f0  08009628  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  08009628  000207a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009fcc  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f7f  00000000  00000000  0002a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b28  00000000  00000000  0002c1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000871  00000000  00000000  0002ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d91  00000000  00000000  0002d541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f01b  00000000  00000000  000462d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000874ec  00000000  00000000  000552ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000413c  00000000  00000000  000dc7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000e0918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008f14 	.word	0x08008f14

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08008f14 	.word	0x08008f14

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_uldivmod>:
 800111c:	b953      	cbnz	r3, 8001134 <__aeabi_uldivmod+0x18>
 800111e:	b94a      	cbnz	r2, 8001134 <__aeabi_uldivmod+0x18>
 8001120:	2900      	cmp	r1, #0
 8001122:	bf08      	it	eq
 8001124:	2800      	cmpeq	r0, #0
 8001126:	bf1c      	itt	ne
 8001128:	f04f 31ff 	movne.w	r1, #4294967295
 800112c:	f04f 30ff 	movne.w	r0, #4294967295
 8001130:	f000 b972 	b.w	8001418 <__aeabi_idiv0>
 8001134:	f1ad 0c08 	sub.w	ip, sp, #8
 8001138:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800113c:	f000 f806 	bl	800114c <__udivmoddi4>
 8001140:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001144:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001148:	b004      	add	sp, #16
 800114a:	4770      	bx	lr

0800114c <__udivmoddi4>:
 800114c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001150:	9e08      	ldr	r6, [sp, #32]
 8001152:	460d      	mov	r5, r1
 8001154:	4604      	mov	r4, r0
 8001156:	468e      	mov	lr, r1
 8001158:	2b00      	cmp	r3, #0
 800115a:	d14c      	bne.n	80011f6 <__udivmoddi4+0xaa>
 800115c:	428a      	cmp	r2, r1
 800115e:	4694      	mov	ip, r2
 8001160:	d967      	bls.n	8001232 <__udivmoddi4+0xe6>
 8001162:	fab2 f382 	clz	r3, r2
 8001166:	b153      	cbz	r3, 800117e <__udivmoddi4+0x32>
 8001168:	fa02 fc03 	lsl.w	ip, r2, r3
 800116c:	f1c3 0220 	rsb	r2, r3, #32
 8001170:	fa01 fe03 	lsl.w	lr, r1, r3
 8001174:	fa20 f202 	lsr.w	r2, r0, r2
 8001178:	ea42 0e0e 	orr.w	lr, r2, lr
 800117c:	409c      	lsls	r4, r3
 800117e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001182:	fbbe f1f7 	udiv	r1, lr, r7
 8001186:	fa1f f58c 	uxth.w	r5, ip
 800118a:	fb07 ee11 	mls	lr, r7, r1, lr
 800118e:	fb01 f005 	mul.w	r0, r1, r5
 8001192:	0c22      	lsrs	r2, r4, #16
 8001194:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8001198:	4290      	cmp	r0, r2
 800119a:	d90a      	bls.n	80011b2 <__udivmoddi4+0x66>
 800119c:	eb1c 0202 	adds.w	r2, ip, r2
 80011a0:	f101 3eff 	add.w	lr, r1, #4294967295
 80011a4:	f080 8119 	bcs.w	80013da <__udivmoddi4+0x28e>
 80011a8:	4290      	cmp	r0, r2
 80011aa:	f240 8116 	bls.w	80013da <__udivmoddi4+0x28e>
 80011ae:	3902      	subs	r1, #2
 80011b0:	4462      	add	r2, ip
 80011b2:	1a12      	subs	r2, r2, r0
 80011b4:	fbb2 f0f7 	udiv	r0, r2, r7
 80011b8:	fb07 2210 	mls	r2, r7, r0, r2
 80011bc:	fb00 f505 	mul.w	r5, r0, r5
 80011c0:	b2a4      	uxth	r4, r4
 80011c2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011c6:	42a5      	cmp	r5, r4
 80011c8:	d90a      	bls.n	80011e0 <__udivmoddi4+0x94>
 80011ca:	eb1c 0404 	adds.w	r4, ip, r4
 80011ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80011d2:	f080 8104 	bcs.w	80013de <__udivmoddi4+0x292>
 80011d6:	42a5      	cmp	r5, r4
 80011d8:	f240 8101 	bls.w	80013de <__udivmoddi4+0x292>
 80011dc:	4464      	add	r4, ip
 80011de:	3802      	subs	r0, #2
 80011e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80011e4:	2100      	movs	r1, #0
 80011e6:	1b64      	subs	r4, r4, r5
 80011e8:	b11e      	cbz	r6, 80011f2 <__udivmoddi4+0xa6>
 80011ea:	40dc      	lsrs	r4, r3
 80011ec:	2300      	movs	r3, #0
 80011ee:	e9c6 4300 	strd	r4, r3, [r6]
 80011f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011f6:	428b      	cmp	r3, r1
 80011f8:	d908      	bls.n	800120c <__udivmoddi4+0xc0>
 80011fa:	2e00      	cmp	r6, #0
 80011fc:	f000 80ea 	beq.w	80013d4 <__udivmoddi4+0x288>
 8001200:	2100      	movs	r1, #0
 8001202:	e9c6 0500 	strd	r0, r5, [r6]
 8001206:	4608      	mov	r0, r1
 8001208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800120c:	fab3 f183 	clz	r1, r3
 8001210:	2900      	cmp	r1, #0
 8001212:	d148      	bne.n	80012a6 <__udivmoddi4+0x15a>
 8001214:	42ab      	cmp	r3, r5
 8001216:	d302      	bcc.n	800121e <__udivmoddi4+0xd2>
 8001218:	4282      	cmp	r2, r0
 800121a:	f200 80f8 	bhi.w	800140e <__udivmoddi4+0x2c2>
 800121e:	1a84      	subs	r4, r0, r2
 8001220:	eb65 0203 	sbc.w	r2, r5, r3
 8001224:	2001      	movs	r0, #1
 8001226:	4696      	mov	lr, r2
 8001228:	2e00      	cmp	r6, #0
 800122a:	d0e2      	beq.n	80011f2 <__udivmoddi4+0xa6>
 800122c:	e9c6 4e00 	strd	r4, lr, [r6]
 8001230:	e7df      	b.n	80011f2 <__udivmoddi4+0xa6>
 8001232:	b902      	cbnz	r2, 8001236 <__udivmoddi4+0xea>
 8001234:	deff      	udf	#255	; 0xff
 8001236:	fab2 f382 	clz	r3, r2
 800123a:	2b00      	cmp	r3, #0
 800123c:	f040 808e 	bne.w	800135c <__udivmoddi4+0x210>
 8001240:	1a88      	subs	r0, r1, r2
 8001242:	2101      	movs	r1, #1
 8001244:	0c17      	lsrs	r7, r2, #16
 8001246:	fa1f fe82 	uxth.w	lr, r2
 800124a:	fbb0 f5f7 	udiv	r5, r0, r7
 800124e:	fb07 0015 	mls	r0, r7, r5, r0
 8001252:	0c22      	lsrs	r2, r4, #16
 8001254:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001258:	fb0e f005 	mul.w	r0, lr, r5
 800125c:	4290      	cmp	r0, r2
 800125e:	d908      	bls.n	8001272 <__udivmoddi4+0x126>
 8001260:	eb1c 0202 	adds.w	r2, ip, r2
 8001264:	f105 38ff 	add.w	r8, r5, #4294967295
 8001268:	d202      	bcs.n	8001270 <__udivmoddi4+0x124>
 800126a:	4290      	cmp	r0, r2
 800126c:	f200 80cc 	bhi.w	8001408 <__udivmoddi4+0x2bc>
 8001270:	4645      	mov	r5, r8
 8001272:	1a12      	subs	r2, r2, r0
 8001274:	fbb2 f0f7 	udiv	r0, r2, r7
 8001278:	fb07 2210 	mls	r2, r7, r0, r2
 800127c:	fb0e fe00 	mul.w	lr, lr, r0
 8001280:	b2a4      	uxth	r4, r4
 8001282:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001286:	45a6      	cmp	lr, r4
 8001288:	d908      	bls.n	800129c <__udivmoddi4+0x150>
 800128a:	eb1c 0404 	adds.w	r4, ip, r4
 800128e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001292:	d202      	bcs.n	800129a <__udivmoddi4+0x14e>
 8001294:	45a6      	cmp	lr, r4
 8001296:	f200 80b4 	bhi.w	8001402 <__udivmoddi4+0x2b6>
 800129a:	4610      	mov	r0, r2
 800129c:	eba4 040e 	sub.w	r4, r4, lr
 80012a0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80012a4:	e7a0      	b.n	80011e8 <__udivmoddi4+0x9c>
 80012a6:	f1c1 0720 	rsb	r7, r1, #32
 80012aa:	408b      	lsls	r3, r1
 80012ac:	fa22 fc07 	lsr.w	ip, r2, r7
 80012b0:	ea4c 0c03 	orr.w	ip, ip, r3
 80012b4:	fa25 fa07 	lsr.w	sl, r5, r7
 80012b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012bc:	fbba f8f9 	udiv	r8, sl, r9
 80012c0:	408d      	lsls	r5, r1
 80012c2:	fa20 f307 	lsr.w	r3, r0, r7
 80012c6:	fb09 aa18 	mls	sl, r9, r8, sl
 80012ca:	fa1f fe8c 	uxth.w	lr, ip
 80012ce:	432b      	orrs	r3, r5
 80012d0:	fa00 f501 	lsl.w	r5, r0, r1
 80012d4:	fb08 f00e 	mul.w	r0, r8, lr
 80012d8:	0c1c      	lsrs	r4, r3, #16
 80012da:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80012de:	42a0      	cmp	r0, r4
 80012e0:	fa02 f201 	lsl.w	r2, r2, r1
 80012e4:	d90b      	bls.n	80012fe <__udivmoddi4+0x1b2>
 80012e6:	eb1c 0404 	adds.w	r4, ip, r4
 80012ea:	f108 3aff 	add.w	sl, r8, #4294967295
 80012ee:	f080 8086 	bcs.w	80013fe <__udivmoddi4+0x2b2>
 80012f2:	42a0      	cmp	r0, r4
 80012f4:	f240 8083 	bls.w	80013fe <__udivmoddi4+0x2b2>
 80012f8:	f1a8 0802 	sub.w	r8, r8, #2
 80012fc:	4464      	add	r4, ip
 80012fe:	1a24      	subs	r4, r4, r0
 8001300:	b298      	uxth	r0, r3
 8001302:	fbb4 f3f9 	udiv	r3, r4, r9
 8001306:	fb09 4413 	mls	r4, r9, r3, r4
 800130a:	fb03 fe0e 	mul.w	lr, r3, lr
 800130e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001312:	45a6      	cmp	lr, r4
 8001314:	d908      	bls.n	8001328 <__udivmoddi4+0x1dc>
 8001316:	eb1c 0404 	adds.w	r4, ip, r4
 800131a:	f103 30ff 	add.w	r0, r3, #4294967295
 800131e:	d26a      	bcs.n	80013f6 <__udivmoddi4+0x2aa>
 8001320:	45a6      	cmp	lr, r4
 8001322:	d968      	bls.n	80013f6 <__udivmoddi4+0x2aa>
 8001324:	3b02      	subs	r3, #2
 8001326:	4464      	add	r4, ip
 8001328:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800132c:	fba0 9302 	umull	r9, r3, r0, r2
 8001330:	eba4 040e 	sub.w	r4, r4, lr
 8001334:	429c      	cmp	r4, r3
 8001336:	46c8      	mov	r8, r9
 8001338:	469e      	mov	lr, r3
 800133a:	d354      	bcc.n	80013e6 <__udivmoddi4+0x29a>
 800133c:	d051      	beq.n	80013e2 <__udivmoddi4+0x296>
 800133e:	2e00      	cmp	r6, #0
 8001340:	d067      	beq.n	8001412 <__udivmoddi4+0x2c6>
 8001342:	ebb5 0308 	subs.w	r3, r5, r8
 8001346:	eb64 040e 	sbc.w	r4, r4, lr
 800134a:	40cb      	lsrs	r3, r1
 800134c:	fa04 f707 	lsl.w	r7, r4, r7
 8001350:	431f      	orrs	r7, r3
 8001352:	40cc      	lsrs	r4, r1
 8001354:	e9c6 7400 	strd	r7, r4, [r6]
 8001358:	2100      	movs	r1, #0
 800135a:	e74a      	b.n	80011f2 <__udivmoddi4+0xa6>
 800135c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001360:	f1c3 0020 	rsb	r0, r3, #32
 8001364:	40c1      	lsrs	r1, r0
 8001366:	409d      	lsls	r5, r3
 8001368:	fa24 f000 	lsr.w	r0, r4, r0
 800136c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001370:	4328      	orrs	r0, r5
 8001372:	fbb1 f5f7 	udiv	r5, r1, r7
 8001376:	fb07 1115 	mls	r1, r7, r5, r1
 800137a:	fa1f fe8c 	uxth.w	lr, ip
 800137e:	0c02      	lsrs	r2, r0, #16
 8001380:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001384:	fb05 f10e 	mul.w	r1, r5, lr
 8001388:	4291      	cmp	r1, r2
 800138a:	fa04 f403 	lsl.w	r4, r4, r3
 800138e:	d908      	bls.n	80013a2 <__udivmoddi4+0x256>
 8001390:	eb1c 0202 	adds.w	r2, ip, r2
 8001394:	f105 38ff 	add.w	r8, r5, #4294967295
 8001398:	d22f      	bcs.n	80013fa <__udivmoddi4+0x2ae>
 800139a:	4291      	cmp	r1, r2
 800139c:	d92d      	bls.n	80013fa <__udivmoddi4+0x2ae>
 800139e:	3d02      	subs	r5, #2
 80013a0:	4462      	add	r2, ip
 80013a2:	1a52      	subs	r2, r2, r1
 80013a4:	fbb2 f1f7 	udiv	r1, r2, r7
 80013a8:	fb07 2211 	mls	r2, r7, r1, r2
 80013ac:	b280      	uxth	r0, r0
 80013ae:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80013b2:	fb01 f20e 	mul.w	r2, r1, lr
 80013b6:	4282      	cmp	r2, r0
 80013b8:	d908      	bls.n	80013cc <__udivmoddi4+0x280>
 80013ba:	eb1c 0000 	adds.w	r0, ip, r0
 80013be:	f101 38ff 	add.w	r8, r1, #4294967295
 80013c2:	d216      	bcs.n	80013f2 <__udivmoddi4+0x2a6>
 80013c4:	4282      	cmp	r2, r0
 80013c6:	d914      	bls.n	80013f2 <__udivmoddi4+0x2a6>
 80013c8:	3902      	subs	r1, #2
 80013ca:	4460      	add	r0, ip
 80013cc:	1a80      	subs	r0, r0, r2
 80013ce:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80013d2:	e73a      	b.n	800124a <__udivmoddi4+0xfe>
 80013d4:	4631      	mov	r1, r6
 80013d6:	4630      	mov	r0, r6
 80013d8:	e70b      	b.n	80011f2 <__udivmoddi4+0xa6>
 80013da:	4671      	mov	r1, lr
 80013dc:	e6e9      	b.n	80011b2 <__udivmoddi4+0x66>
 80013de:	4610      	mov	r0, r2
 80013e0:	e6fe      	b.n	80011e0 <__udivmoddi4+0x94>
 80013e2:	454d      	cmp	r5, r9
 80013e4:	d2ab      	bcs.n	800133e <__udivmoddi4+0x1f2>
 80013e6:	ebb9 0802 	subs.w	r8, r9, r2
 80013ea:	eb63 0e0c 	sbc.w	lr, r3, ip
 80013ee:	3801      	subs	r0, #1
 80013f0:	e7a5      	b.n	800133e <__udivmoddi4+0x1f2>
 80013f2:	4641      	mov	r1, r8
 80013f4:	e7ea      	b.n	80013cc <__udivmoddi4+0x280>
 80013f6:	4603      	mov	r3, r0
 80013f8:	e796      	b.n	8001328 <__udivmoddi4+0x1dc>
 80013fa:	4645      	mov	r5, r8
 80013fc:	e7d1      	b.n	80013a2 <__udivmoddi4+0x256>
 80013fe:	46d0      	mov	r8, sl
 8001400:	e77d      	b.n	80012fe <__udivmoddi4+0x1b2>
 8001402:	4464      	add	r4, ip
 8001404:	3802      	subs	r0, #2
 8001406:	e749      	b.n	800129c <__udivmoddi4+0x150>
 8001408:	3d02      	subs	r5, #2
 800140a:	4462      	add	r2, ip
 800140c:	e731      	b.n	8001272 <__udivmoddi4+0x126>
 800140e:	4608      	mov	r0, r1
 8001410:	e70a      	b.n	8001228 <__udivmoddi4+0xdc>
 8001412:	4631      	mov	r1, r6
 8001414:	e6ed      	b.n	80011f2 <__udivmoddi4+0xa6>
 8001416:	bf00      	nop

08001418 <__aeabi_idiv0>:
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop

0800141c <MadgwickAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b09b      	sub	sp, #108	; 0x6c
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	603b      	str	r3, [r7, #0]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800142a:	4b9d      	ldr	r3, [pc, #628]	; (80016a0 <MadgwickAHRSupdateIMU+0x284>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001432:	68f9      	ldr	r1, [r7, #12]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fc85 	bl	8000d44 <__aeabi_fmul>
 800143a:	4603      	mov	r3, r0
 800143c:	461c      	mov	r4, r3
 800143e:	4b99      	ldr	r3, [pc, #612]	; (80016a4 <MadgwickAHRSupdateIMU+0x288>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68b9      	ldr	r1, [r7, #8]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fc7d 	bl	8000d44 <__aeabi_fmul>
 800144a:	4603      	mov	r3, r0
 800144c:	4619      	mov	r1, r3
 800144e:	4620      	mov	r0, r4
 8001450:	f7ff fb6e 	bl	8000b30 <__aeabi_fsub>
 8001454:	4603      	mov	r3, r0
 8001456:	461c      	mov	r4, r3
 8001458:	4b93      	ldr	r3, [pc, #588]	; (80016a8 <MadgwickAHRSupdateIMU+0x28c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fc70 	bl	8000d44 <__aeabi_fmul>
 8001464:	4603      	mov	r3, r0
 8001466:	4619      	mov	r1, r3
 8001468:	4620      	mov	r0, r4
 800146a:	f7ff fb61 	bl	8000b30 <__aeabi_fsub>
 800146e:	4603      	mov	r3, r0
 8001470:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fc65 	bl	8000d44 <__aeabi_fmul>
 800147a:	4603      	mov	r3, r0
 800147c:	667b      	str	r3, [r7, #100]	; 0x64
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800147e:	4b8b      	ldr	r3, [pc, #556]	; (80016ac <MadgwickAHRSupdateIMU+0x290>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68f9      	ldr	r1, [r7, #12]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fc5d 	bl	8000d44 <__aeabi_fmul>
 800148a:	4603      	mov	r3, r0
 800148c:	461c      	mov	r4, r3
 800148e:	4b85      	ldr	r3, [pc, #532]	; (80016a4 <MadgwickAHRSupdateIMU+0x288>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fc55 	bl	8000d44 <__aeabi_fmul>
 800149a:	4603      	mov	r3, r0
 800149c:	4619      	mov	r1, r3
 800149e:	4620      	mov	r0, r4
 80014a0:	f7ff fb48 	bl	8000b34 <__addsf3>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461c      	mov	r4, r3
 80014a8:	4b7f      	ldr	r3, [pc, #508]	; (80016a8 <MadgwickAHRSupdateIMU+0x28c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fc48 	bl	8000d44 <__aeabi_fmul>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4619      	mov	r1, r3
 80014b8:	4620      	mov	r0, r4
 80014ba:	f7ff fb39 	bl	8000b30 <__aeabi_fsub>
 80014be:	4603      	mov	r3, r0
 80014c0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fc3d 	bl	8000d44 <__aeabi_fmul>
 80014ca:	4603      	mov	r3, r0
 80014cc:	663b      	str	r3, [r7, #96]	; 0x60
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80014ce:	4b77      	ldr	r3, [pc, #476]	; (80016ac <MadgwickAHRSupdateIMU+0x290>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68b9      	ldr	r1, [r7, #8]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fc35 	bl	8000d44 <__aeabi_fmul>
 80014da:	4603      	mov	r3, r0
 80014dc:	461c      	mov	r4, r3
 80014de:	4b70      	ldr	r3, [pc, #448]	; (80016a0 <MadgwickAHRSupdateIMU+0x284>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fc2d 	bl	8000d44 <__aeabi_fmul>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4619      	mov	r1, r3
 80014ee:	4620      	mov	r0, r4
 80014f0:	f7ff fb1e 	bl	8000b30 <__aeabi_fsub>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461c      	mov	r4, r3
 80014f8:	4b6b      	ldr	r3, [pc, #428]	; (80016a8 <MadgwickAHRSupdateIMU+0x28c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68f9      	ldr	r1, [r7, #12]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fc20 	bl	8000d44 <__aeabi_fmul>
 8001504:	4603      	mov	r3, r0
 8001506:	4619      	mov	r1, r3
 8001508:	4620      	mov	r0, r4
 800150a:	f7ff fb13 	bl	8000b34 <__addsf3>
 800150e:	4603      	mov	r3, r0
 8001510:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fc15 	bl	8000d44 <__aeabi_fmul>
 800151a:	4603      	mov	r3, r0
 800151c:	65fb      	str	r3, [r7, #92]	; 0x5c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800151e:	4b63      	ldr	r3, [pc, #396]	; (80016ac <MadgwickAHRSupdateIMU+0x290>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fc0d 	bl	8000d44 <__aeabi_fmul>
 800152a:	4603      	mov	r3, r0
 800152c:	461c      	mov	r4, r3
 800152e:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <MadgwickAHRSupdateIMU+0x284>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fc05 	bl	8000d44 <__aeabi_fmul>
 800153a:	4603      	mov	r3, r0
 800153c:	4619      	mov	r1, r3
 800153e:	4620      	mov	r0, r4
 8001540:	f7ff faf8 	bl	8000b34 <__addsf3>
 8001544:	4603      	mov	r3, r0
 8001546:	461c      	mov	r4, r3
 8001548:	4b56      	ldr	r3, [pc, #344]	; (80016a4 <MadgwickAHRSupdateIMU+0x288>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68f9      	ldr	r1, [r7, #12]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fbf8 	bl	8000d44 <__aeabi_fmul>
 8001554:	4603      	mov	r3, r0
 8001556:	4619      	mov	r1, r3
 8001558:	4620      	mov	r0, r4
 800155a:	f7ff fae9 	bl	8000b30 <__aeabi_fsub>
 800155e:	4603      	mov	r3, r0
 8001560:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fbed 	bl	8000d44 <__aeabi_fmul>
 800156a:	4603      	mov	r3, r0
 800156c:	65bb      	str	r3, [r7, #88]	; 0x58

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800156e:	f04f 0100 	mov.w	r1, #0
 8001572:	6838      	ldr	r0, [r7, #0]
 8001574:	f7ff fd7a 	bl	800106c <__aeabi_fcmpeq>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d010      	beq.n	80015a0 <MadgwickAHRSupdateIMU+0x184>
 800157e:	f04f 0100 	mov.w	r1, #0
 8001582:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001584:	f7ff fd72 	bl	800106c <__aeabi_fcmpeq>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d008      	beq.n	80015a0 <MadgwickAHRSupdateIMU+0x184>
 800158e:	f04f 0100 	mov.w	r1, #0
 8001592:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001594:	f7ff fd6a 	bl	800106c <__aeabi_fcmpeq>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 823c 	bne.w	8001a18 <MadgwickAHRSupdateIMU+0x5fc>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80015a0:	6839      	ldr	r1, [r7, #0]
 80015a2:	6838      	ldr	r0, [r7, #0]
 80015a4:	f7ff fbce 	bl	8000d44 <__aeabi_fmul>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461c      	mov	r4, r3
 80015ac:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80015ae:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80015b0:	f7ff fbc8 	bl	8000d44 <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4619      	mov	r1, r3
 80015b8:	4620      	mov	r0, r4
 80015ba:	f7ff fabb 	bl	8000b34 <__addsf3>
 80015be:	4603      	mov	r3, r0
 80015c0:	461c      	mov	r4, r3
 80015c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80015c4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80015c6:	f7ff fbbd 	bl	8000d44 <__aeabi_fmul>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4619      	mov	r1, r3
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7ff fab0 	bl	8000b34 <__addsf3>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 fad0 	bl	8001b7c <invSqrt>
 80015dc:	6578      	str	r0, [r7, #84]	; 0x54
		ax *= recipNorm;
 80015de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80015e0:	6838      	ldr	r0, [r7, #0]
 80015e2:	f7ff fbaf 	bl	8000d44 <__aeabi_fmul>
 80015e6:	4603      	mov	r3, r0
 80015e8:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 80015ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80015ec:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80015ee:	f7ff fba9 	bl	8000d44 <__aeabi_fmul>
 80015f2:	4603      	mov	r3, r0
 80015f4:	67bb      	str	r3, [r7, #120]	; 0x78
		az *= recipNorm;   
 80015f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80015f8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80015fa:	f7ff fba3 	bl	8000d44 <__aeabi_fmul>
 80015fe:	4603      	mov	r3, r0
 8001600:	67fb      	str	r3, [r7, #124]	; 0x7c

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8001602:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <MadgwickAHRSupdateIMU+0x290>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4619      	mov	r1, r3
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fa93 	bl	8000b34 <__addsf3>
 800160e:	4603      	mov	r3, r0
 8001610:	653b      	str	r3, [r7, #80]	; 0x50
		_2q1 = 2.0f * q1;
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <MadgwickAHRSupdateIMU+0x284>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4619      	mov	r1, r3
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fa8b 	bl	8000b34 <__addsf3>
 800161e:	4603      	mov	r3, r0
 8001620:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q2 = 2.0f * q2;
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <MadgwickAHRSupdateIMU+0x288>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4619      	mov	r1, r3
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fa83 	bl	8000b34 <__addsf3>
 800162e:	4603      	mov	r3, r0
 8001630:	64bb      	str	r3, [r7, #72]	; 0x48
		_2q3 = 2.0f * q3;
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <MadgwickAHRSupdateIMU+0x28c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4619      	mov	r1, r3
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fa7b 	bl	8000b34 <__addsf3>
 800163e:	4603      	mov	r3, r0
 8001640:	647b      	str	r3, [r7, #68]	; 0x44
		_4q0 = 4.0f * q0;
 8001642:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <MadgwickAHRSupdateIMU+0x290>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fb7a 	bl	8000d44 <__aeabi_fmul>
 8001650:	4603      	mov	r3, r0
 8001652:	643b      	str	r3, [r7, #64]	; 0x40
		_4q1 = 4.0f * q1;
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MadgwickAHRSupdateIMU+0x284>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fb71 	bl	8000d44 <__aeabi_fmul>
 8001662:	4603      	mov	r3, r0
 8001664:	63fb      	str	r3, [r7, #60]	; 0x3c
		_4q2 = 4.0f * q2;
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MadgwickAHRSupdateIMU+0x288>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fb68 	bl	8000d44 <__aeabi_fmul>
 8001674:	4603      	mov	r3, r0
 8001676:	63bb      	str	r3, [r7, #56]	; 0x38
		_8q1 = 8.0f * q1;
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <MadgwickAHRSupdateIMU+0x284>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fb5f 	bl	8000d44 <__aeabi_fmul>
 8001686:	4603      	mov	r3, r0
 8001688:	637b      	str	r3, [r7, #52]	; 0x34
		_8q2 = 8.0f * q2;
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MadgwickAHRSupdateIMU+0x288>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fb56 	bl	8000d44 <__aeabi_fmul>
 8001698:	4603      	mov	r3, r0
 800169a:	633b      	str	r3, [r7, #48]	; 0x30
 800169c:	e008      	b.n	80016b0 <MadgwickAHRSupdateIMU+0x294>
 800169e:	bf00      	nop
 80016a0:	2000020c 	.word	0x2000020c
 80016a4:	20000210 	.word	0x20000210
 80016a8:	20000214 	.word	0x20000214
 80016ac:	20000004 	.word	0x20000004
		q0q0 = q0 * q0;
 80016b0:	4b9a      	ldr	r3, [pc, #616]	; (800191c <MadgwickAHRSupdateIMU+0x500>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a99      	ldr	r2, [pc, #612]	; (800191c <MadgwickAHRSupdateIMU+0x500>)
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fb42 	bl	8000d44 <__aeabi_fmul>
 80016c0:	4603      	mov	r3, r0
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		q1q1 = q1 * q1;
 80016c4:	4b96      	ldr	r3, [pc, #600]	; (8001920 <MadgwickAHRSupdateIMU+0x504>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a95      	ldr	r2, [pc, #596]	; (8001920 <MadgwickAHRSupdateIMU+0x504>)
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fb38 	bl	8000d44 <__aeabi_fmul>
 80016d4:	4603      	mov	r3, r0
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
		q2q2 = q2 * q2;
 80016d8:	4b92      	ldr	r3, [pc, #584]	; (8001924 <MadgwickAHRSupdateIMU+0x508>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a91      	ldr	r2, [pc, #580]	; (8001924 <MadgwickAHRSupdateIMU+0x508>)
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fb2e 	bl	8000d44 <__aeabi_fmul>
 80016e8:	4603      	mov	r3, r0
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
		q3q3 = q3 * q3;
 80016ec:	4b8e      	ldr	r3, [pc, #568]	; (8001928 <MadgwickAHRSupdateIMU+0x50c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a8d      	ldr	r2, [pc, #564]	; (8001928 <MadgwickAHRSupdateIMU+0x50c>)
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fb24 	bl	8000d44 <__aeabi_fmul>
 80016fc:	4603      	mov	r3, r0
 80016fe:	623b      	str	r3, [r7, #32]

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8001700:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001702:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001704:	f7ff fb1e 	bl	8000d44 <__aeabi_fmul>
 8001708:	4603      	mov	r3, r0
 800170a:	461c      	mov	r4, r3
 800170c:	6839      	ldr	r1, [r7, #0]
 800170e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001710:	f7ff fb18 	bl	8000d44 <__aeabi_fmul>
 8001714:	4603      	mov	r3, r0
 8001716:	4619      	mov	r1, r3
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff fa0b 	bl	8000b34 <__addsf3>
 800171e:	4603      	mov	r3, r0
 8001720:	461c      	mov	r4, r3
 8001722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001724:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001726:	f7ff fb0d 	bl	8000d44 <__aeabi_fmul>
 800172a:	4603      	mov	r3, r0
 800172c:	4619      	mov	r1, r3
 800172e:	4620      	mov	r0, r4
 8001730:	f7ff fa00 	bl	8000b34 <__addsf3>
 8001734:	4603      	mov	r3, r0
 8001736:	461c      	mov	r4, r3
 8001738:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800173a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800173c:	f7ff fb02 	bl	8000d44 <__aeabi_fmul>
 8001740:	4603      	mov	r3, r0
 8001742:	4619      	mov	r1, r3
 8001744:	4620      	mov	r0, r4
 8001746:	f7ff f9f3 	bl	8000b30 <__aeabi_fsub>
 800174a:	4603      	mov	r3, r0
 800174c:	61fb      	str	r3, [r7, #28]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800174e:	6a39      	ldr	r1, [r7, #32]
 8001750:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001752:	f7ff faf7 	bl	8000d44 <__aeabi_fmul>
 8001756:	4603      	mov	r3, r0
 8001758:	461c      	mov	r4, r3
 800175a:	6839      	ldr	r1, [r7, #0]
 800175c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800175e:	f7ff faf1 	bl	8000d44 <__aeabi_fmul>
 8001762:	4603      	mov	r3, r0
 8001764:	4619      	mov	r1, r3
 8001766:	4620      	mov	r0, r4
 8001768:	f7ff f9e2 	bl	8000b30 <__aeabi_fsub>
 800176c:	4603      	mov	r3, r0
 800176e:	461c      	mov	r4, r3
 8001770:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001774:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001776:	f7ff fae5 	bl	8000d44 <__aeabi_fmul>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	4b68      	ldr	r3, [pc, #416]	; (8001920 <MadgwickAHRSupdateIMU+0x504>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4619      	mov	r1, r3
 8001784:	4610      	mov	r0, r2
 8001786:	f7ff fadd 	bl	8000d44 <__aeabi_fmul>
 800178a:	4603      	mov	r3, r0
 800178c:	4619      	mov	r1, r3
 800178e:	4620      	mov	r0, r4
 8001790:	f7ff f9d0 	bl	8000b34 <__addsf3>
 8001794:	4603      	mov	r3, r0
 8001796:	461c      	mov	r4, r3
 8001798:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800179a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800179c:	f7ff fad2 	bl	8000d44 <__aeabi_fmul>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4619      	mov	r1, r3
 80017a4:	4620      	mov	r0, r4
 80017a6:	f7ff f9c3 	bl	8000b30 <__aeabi_fsub>
 80017aa:	4603      	mov	r3, r0
 80017ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff f9be 	bl	8000b30 <__aeabi_fsub>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461c      	mov	r4, r3
 80017b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017bc:	f7ff fac2 	bl	8000d44 <__aeabi_fmul>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4619      	mov	r1, r3
 80017c4:	4620      	mov	r0, r4
 80017c6:	f7ff f9b5 	bl	8000b34 <__addsf3>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461c      	mov	r4, r3
 80017ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017d2:	f7ff fab7 	bl	8000d44 <__aeabi_fmul>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4619      	mov	r1, r3
 80017da:	4620      	mov	r0, r4
 80017dc:	f7ff f9aa 	bl	8000b34 <__addsf3>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461c      	mov	r4, r3
 80017e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80017e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80017e8:	f7ff faac 	bl	8000d44 <__aeabi_fmul>
 80017ec:	4603      	mov	r3, r0
 80017ee:	4619      	mov	r1, r3
 80017f0:	4620      	mov	r0, r4
 80017f2:	f7ff f99f 	bl	8000b34 <__addsf3>
 80017f6:	4603      	mov	r3, r0
 80017f8:	61bb      	str	r3, [r7, #24]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80017fa:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80017fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001800:	f7ff faa0 	bl	8000d44 <__aeabi_fmul>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	4b46      	ldr	r3, [pc, #280]	; (8001924 <MadgwickAHRSupdateIMU+0x508>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	4610      	mov	r0, r2
 8001810:	f7ff fa98 	bl	8000d44 <__aeabi_fmul>
 8001814:	4603      	mov	r3, r0
 8001816:	461c      	mov	r4, r3
 8001818:	6839      	ldr	r1, [r7, #0]
 800181a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800181c:	f7ff fa92 	bl	8000d44 <__aeabi_fmul>
 8001820:	4603      	mov	r3, r0
 8001822:	4619      	mov	r1, r3
 8001824:	4620      	mov	r0, r4
 8001826:	f7ff f985 	bl	8000b34 <__addsf3>
 800182a:	4603      	mov	r3, r0
 800182c:	461c      	mov	r4, r3
 800182e:	6a39      	ldr	r1, [r7, #32]
 8001830:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001832:	f7ff fa87 	bl	8000d44 <__aeabi_fmul>
 8001836:	4603      	mov	r3, r0
 8001838:	4619      	mov	r1, r3
 800183a:	4620      	mov	r0, r4
 800183c:	f7ff f97a 	bl	8000b34 <__addsf3>
 8001840:	4603      	mov	r3, r0
 8001842:	461c      	mov	r4, r3
 8001844:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001846:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001848:	f7ff fa7c 	bl	8000d44 <__aeabi_fmul>
 800184c:	4603      	mov	r3, r0
 800184e:	4619      	mov	r1, r3
 8001850:	4620      	mov	r0, r4
 8001852:	f7ff f96d 	bl	8000b30 <__aeabi_fsub>
 8001856:	4603      	mov	r3, r0
 8001858:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff f968 	bl	8000b30 <__aeabi_fsub>
 8001860:	4603      	mov	r3, r0
 8001862:	461c      	mov	r4, r3
 8001864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001866:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001868:	f7ff fa6c 	bl	8000d44 <__aeabi_fmul>
 800186c:	4603      	mov	r3, r0
 800186e:	4619      	mov	r1, r3
 8001870:	4620      	mov	r0, r4
 8001872:	f7ff f95f 	bl	8000b34 <__addsf3>
 8001876:	4603      	mov	r3, r0
 8001878:	461c      	mov	r4, r3
 800187a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800187c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800187e:	f7ff fa61 	bl	8000d44 <__aeabi_fmul>
 8001882:	4603      	mov	r3, r0
 8001884:	4619      	mov	r1, r3
 8001886:	4620      	mov	r0, r4
 8001888:	f7ff f954 	bl	8000b34 <__addsf3>
 800188c:	4603      	mov	r3, r0
 800188e:	461c      	mov	r4, r3
 8001890:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001892:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001894:	f7ff fa56 	bl	8000d44 <__aeabi_fmul>
 8001898:	4603      	mov	r3, r0
 800189a:	4619      	mov	r1, r3
 800189c:	4620      	mov	r0, r4
 800189e:	f7ff f949 	bl	8000b34 <__addsf3>
 80018a2:	4603      	mov	r3, r0
 80018a4:	617b      	str	r3, [r7, #20]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80018a6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80018aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018ac:	f7ff fa4a 	bl	8000d44 <__aeabi_fmul>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <MadgwickAHRSupdateIMU+0x50c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	4610      	mov	r0, r2
 80018bc:	f7ff fa42 	bl	8000d44 <__aeabi_fmul>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461c      	mov	r4, r3
 80018c4:	6839      	ldr	r1, [r7, #0]
 80018c6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80018c8:	f7ff fa3c 	bl	8000d44 <__aeabi_fmul>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4619      	mov	r1, r3
 80018d0:	4620      	mov	r0, r4
 80018d2:	f7ff f92d 	bl	8000b30 <__aeabi_fsub>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461c      	mov	r4, r3
 80018da:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80018de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018e0:	f7ff fa30 	bl	8000d44 <__aeabi_fmul>
 80018e4:	4603      	mov	r3, r0
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <MadgwickAHRSupdateIMU+0x50c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	4610      	mov	r0, r2
 80018f0:	f7ff fa28 	bl	8000d44 <__aeabi_fmul>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4619      	mov	r1, r3
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff f91b 	bl	8000b34 <__addsf3>
 80018fe:	4603      	mov	r3, r0
 8001900:	461c      	mov	r4, r3
 8001902:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001904:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001906:	f7ff fa1d 	bl	8000d44 <__aeabi_fmul>
 800190a:	4603      	mov	r3, r0
 800190c:	4619      	mov	r1, r3
 800190e:	4620      	mov	r0, r4
 8001910:	f7ff f90e 	bl	8000b30 <__aeabi_fsub>
 8001914:	4603      	mov	r3, r0
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	e008      	b.n	800192c <MadgwickAHRSupdateIMU+0x510>
 800191a:	bf00      	nop
 800191c:	20000004 	.word	0x20000004
 8001920:	2000020c 	.word	0x2000020c
 8001924:	20000210 	.word	0x20000210
 8001928:	20000214 	.word	0x20000214
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800192c:	69f9      	ldr	r1, [r7, #28]
 800192e:	69f8      	ldr	r0, [r7, #28]
 8001930:	f7ff fa08 	bl	8000d44 <__aeabi_fmul>
 8001934:	4603      	mov	r3, r0
 8001936:	461c      	mov	r4, r3
 8001938:	69b9      	ldr	r1, [r7, #24]
 800193a:	69b8      	ldr	r0, [r7, #24]
 800193c:	f7ff fa02 	bl	8000d44 <__aeabi_fmul>
 8001940:	4603      	mov	r3, r0
 8001942:	4619      	mov	r1, r3
 8001944:	4620      	mov	r0, r4
 8001946:	f7ff f8f5 	bl	8000b34 <__addsf3>
 800194a:	4603      	mov	r3, r0
 800194c:	461c      	mov	r4, r3
 800194e:	6979      	ldr	r1, [r7, #20]
 8001950:	6978      	ldr	r0, [r7, #20]
 8001952:	f7ff f9f7 	bl	8000d44 <__aeabi_fmul>
 8001956:	4603      	mov	r3, r0
 8001958:	4619      	mov	r1, r3
 800195a:	4620      	mov	r0, r4
 800195c:	f7ff f8ea 	bl	8000b34 <__addsf3>
 8001960:	4603      	mov	r3, r0
 8001962:	461c      	mov	r4, r3
 8001964:	6939      	ldr	r1, [r7, #16]
 8001966:	6938      	ldr	r0, [r7, #16]
 8001968:	f7ff f9ec 	bl	8000d44 <__aeabi_fmul>
 800196c:	4603      	mov	r3, r0
 800196e:	4619      	mov	r1, r3
 8001970:	4620      	mov	r0, r4
 8001972:	f7ff f8df 	bl	8000b34 <__addsf3>
 8001976:	4603      	mov	r3, r0
 8001978:	4618      	mov	r0, r3
 800197a:	f000 f8ff 	bl	8001b7c <invSqrt>
 800197e:	6578      	str	r0, [r7, #84]	; 0x54
		s0 *= recipNorm;
 8001980:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001982:	69f8      	ldr	r0, [r7, #28]
 8001984:	f7ff f9de 	bl	8000d44 <__aeabi_fmul>
 8001988:	4603      	mov	r3, r0
 800198a:	61fb      	str	r3, [r7, #28]
		s1 *= recipNorm;
 800198c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800198e:	69b8      	ldr	r0, [r7, #24]
 8001990:	f7ff f9d8 	bl	8000d44 <__aeabi_fmul>
 8001994:	4603      	mov	r3, r0
 8001996:	61bb      	str	r3, [r7, #24]
		s2 *= recipNorm;
 8001998:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800199a:	6978      	ldr	r0, [r7, #20]
 800199c:	f7ff f9d2 	bl	8000d44 <__aeabi_fmul>
 80019a0:	4603      	mov	r3, r0
 80019a2:	617b      	str	r3, [r7, #20]
		s3 *= recipNorm;
 80019a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80019a6:	6938      	ldr	r0, [r7, #16]
 80019a8:	f7ff f9cc 	bl	8000d44 <__aeabi_fmul>
 80019ac:	4603      	mov	r3, r0
 80019ae:	613b      	str	r3, [r7, #16]

		// Apply feedback step
		qDot1 -= beta * s0;
 80019b0:	4b6c      	ldr	r3, [pc, #432]	; (8001b64 <MadgwickAHRSupdateIMU+0x748>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	69f9      	ldr	r1, [r7, #28]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff f9c4 	bl	8000d44 <__aeabi_fmul>
 80019bc:	4603      	mov	r3, r0
 80019be:	4619      	mov	r1, r3
 80019c0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80019c2:	f7ff f8b5 	bl	8000b30 <__aeabi_fsub>
 80019c6:	4603      	mov	r3, r0
 80019c8:	667b      	str	r3, [r7, #100]	; 0x64
		qDot2 -= beta * s1;
 80019ca:	4b66      	ldr	r3, [pc, #408]	; (8001b64 <MadgwickAHRSupdateIMU+0x748>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	69b9      	ldr	r1, [r7, #24]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff f9b7 	bl	8000d44 <__aeabi_fmul>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4619      	mov	r1, r3
 80019da:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80019dc:	f7ff f8a8 	bl	8000b30 <__aeabi_fsub>
 80019e0:	4603      	mov	r3, r0
 80019e2:	663b      	str	r3, [r7, #96]	; 0x60
		qDot3 -= beta * s2;
 80019e4:	4b5f      	ldr	r3, [pc, #380]	; (8001b64 <MadgwickAHRSupdateIMU+0x748>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6979      	ldr	r1, [r7, #20]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f9aa 	bl	8000d44 <__aeabi_fmul>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4619      	mov	r1, r3
 80019f4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80019f6:	f7ff f89b 	bl	8000b30 <__aeabi_fsub>
 80019fa:	4603      	mov	r3, r0
 80019fc:	65fb      	str	r3, [r7, #92]	; 0x5c
		qDot4 -= beta * s3;
 80019fe:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <MadgwickAHRSupdateIMU+0x748>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6939      	ldr	r1, [r7, #16]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff f99d 	bl	8000d44 <__aeabi_fmul>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001a10:	f7ff f88e 	bl	8000b30 <__aeabi_fsub>
 8001a14:	4603      	mov	r3, r0
 8001a16:	65bb      	str	r3, [r7, #88]	; 0x58
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001a18:	4953      	ldr	r1, [pc, #332]	; (8001b68 <MadgwickAHRSupdateIMU+0x74c>)
 8001a1a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001a1c:	f7ff f992 	bl	8000d44 <__aeabi_fmul>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b51      	ldr	r3, [pc, #324]	; (8001b6c <MadgwickAHRSupdateIMU+0x750>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	f7ff f882 	bl	8000b34 <__addsf3>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b4d      	ldr	r3, [pc, #308]	; (8001b6c <MadgwickAHRSupdateIMU+0x750>)
 8001a36:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001a38:	494b      	ldr	r1, [pc, #300]	; (8001b68 <MadgwickAHRSupdateIMU+0x74c>)
 8001a3a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001a3c:	f7ff f982 	bl	8000d44 <__aeabi_fmul>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b4a      	ldr	r3, [pc, #296]	; (8001b70 <MadgwickAHRSupdateIMU+0x754>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	f7ff f872 	bl	8000b34 <__addsf3>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b46      	ldr	r3, [pc, #280]	; (8001b70 <MadgwickAHRSupdateIMU+0x754>)
 8001a56:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001a58:	4943      	ldr	r1, [pc, #268]	; (8001b68 <MadgwickAHRSupdateIMU+0x74c>)
 8001a5a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001a5c:	f7ff f972 	bl	8000d44 <__aeabi_fmul>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <MadgwickAHRSupdateIMU+0x758>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	f7ff f862 	bl	8000b34 <__addsf3>
 8001a70:	4603      	mov	r3, r0
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b3f      	ldr	r3, [pc, #252]	; (8001b74 <MadgwickAHRSupdateIMU+0x758>)
 8001a76:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001a78:	493b      	ldr	r1, [pc, #236]	; (8001b68 <MadgwickAHRSupdateIMU+0x74c>)
 8001a7a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001a7c:	f7ff f962 	bl	8000d44 <__aeabi_fmul>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b3c      	ldr	r3, [pc, #240]	; (8001b78 <MadgwickAHRSupdateIMU+0x75c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	f7ff f852 	bl	8000b34 <__addsf3>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <MadgwickAHRSupdateIMU+0x75c>)
 8001a96:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001a98:	4b34      	ldr	r3, [pc, #208]	; (8001b6c <MadgwickAHRSupdateIMU+0x750>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a33      	ldr	r2, [pc, #204]	; (8001b6c <MadgwickAHRSupdateIMU+0x750>)
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f94e 	bl	8000d44 <__aeabi_fmul>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461c      	mov	r4, r3
 8001aac:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <MadgwickAHRSupdateIMU+0x754>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a2f      	ldr	r2, [pc, #188]	; (8001b70 <MadgwickAHRSupdateIMU+0x754>)
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f944 	bl	8000d44 <__aeabi_fmul>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f7ff f837 	bl	8000b34 <__addsf3>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	461c      	mov	r4, r3
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <MadgwickAHRSupdateIMU+0x758>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a29      	ldr	r2, [pc, #164]	; (8001b74 <MadgwickAHRSupdateIMU+0x758>)
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff f935 	bl	8000d44 <__aeabi_fmul>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4619      	mov	r1, r3
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f7ff f828 	bl	8000b34 <__addsf3>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461c      	mov	r4, r3
 8001ae8:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <MadgwickAHRSupdateIMU+0x75c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <MadgwickAHRSupdateIMU+0x75c>)
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f926 	bl	8000d44 <__aeabi_fmul>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4619      	mov	r1, r3
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff f819 	bl	8000b34 <__addsf3>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 f839 	bl	8001b7c <invSqrt>
 8001b0a:	6578      	str	r0, [r7, #84]	; 0x54
	q0 *= recipNorm;
 8001b0c:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <MadgwickAHRSupdateIMU+0x750>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f916 	bl	8000d44 <__aeabi_fmul>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <MadgwickAHRSupdateIMU+0x750>)
 8001b1e:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <MadgwickAHRSupdateIMU+0x754>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f90c 	bl	8000d44 <__aeabi_fmul>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <MadgwickAHRSupdateIMU+0x754>)
 8001b32:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <MadgwickAHRSupdateIMU+0x758>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f902 	bl	8000d44 <__aeabi_fmul>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <MadgwickAHRSupdateIMU+0x758>)
 8001b46:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MadgwickAHRSupdateIMU+0x75c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f8f8 	bl	8000d44 <__aeabi_fmul>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <MadgwickAHRSupdateIMU+0x75c>)
 8001b5a:	601a      	str	r2, [r3, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	376c      	adds	r7, #108	; 0x6c
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}
 8001b64:	20000000 	.word	0x20000000
 8001b68:	3c615d51 	.word	0x3c615d51
 8001b6c:	20000004 	.word	0x20000004
 8001b70:	2000020c 	.word	0x2000020c
 8001b74:	20000210 	.word	0x20000210
 8001b78:	20000214 	.word	0x20000214

08001b7c <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8001b84:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff f8db 	bl	8000d44 <__aeabi_fmul>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	617b      	str	r3, [r7, #20]
	float y = x;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	105a      	asrs	r2, r3, #1
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <invSqrt+0x74>)
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	6979      	ldr	r1, [r7, #20]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff f8c5 	bl	8000d44 <__aeabi_fmul>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	f7ff f8be 	bl	8000d44 <__aeabi_fmul>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8001bd0:	f7fe ffae 	bl	8000b30 <__aeabi_fsub>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4610      	mov	r0, r2
 8001bde:	f7ff f8b1 	bl	8000d44 <__aeabi_fmul>
 8001be2:	4603      	mov	r3, r0
 8001be4:	613b      	str	r3, [r7, #16]
	return y;
 8001be6:	693b      	ldr	r3, [r7, #16]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	5f3759df 	.word	0x5f3759df

08001bf4 <SX1278_hw_SetNSS>:


#include "gpio.h"


__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6958      	ldr	r0, [r3, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	b299      	uxth	r1, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	bf0c      	ite	eq
 8001c0e:	2301      	moveq	r3, #1
 8001c10:	2300      	movne	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	f001 fd24 	bl	8003662 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <SX1278_hw_init>:

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ffe1 	bl	8001bf4 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6858      	ldr	r0, [r3, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f001 fd0f 	bl	8003662 <HAL_GPIO_WritePin>
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <SX1278_hw_DelayMs>:
__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f001 fa61 	bl	800311c <HAL_Delay>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <SX1278_hw_Reset>:


__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ffc1 	bl	8001bf4 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6858      	ldr	r0, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f001 fcef 	bl	8003662 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8001c84:	2001      	movs	r0, #1
 8001c86:	f7ff ffe1 	bl	8001c4c <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6858      	ldr	r0, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	2201      	movs	r2, #1
 8001c96:	4619      	mov	r1, r3
 8001c98:	f001 fce3 	bl	8003662 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8001c9c:	2064      	movs	r0, #100	; 0x64
 8001c9e:	f7ff ffd5 	bl	8001c4c <SX1278_hw_DelayMs>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <SX1278_hw_SPICommand>:


__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff9b 	bl	8001bf4 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6998      	ldr	r0, [r3, #24]
 8001cc2:	1cf9      	adds	r1, r7, #3
 8001cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f003 f9ad 	bl	8005028 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY);
 8001cce:	bf00      	nop
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 fc9a 	bl	800560e <HAL_SPI_GetState>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d1f7      	bne.n	8001cd0 <SX1278_hw_SPICommand+0x26>
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af02      	add	r7, sp, #8
 8001cf0:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff79 	bl	8001bf4 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6998      	ldr	r0, [r3, #24]
 8001d06:	f107 020e 	add.w	r2, r7, #14
 8001d0a:	f107 010f 	add.w	r1, r7, #15
 8001d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	2301      	movs	r3, #1
 8001d16:	f003 faca 	bl	80052ae <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY);
 8001d1a:	bf00      	nop
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f003 fc74 	bl	800560e <HAL_SPI_GetState>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d1f7      	bne.n	8001d1c <SX1278_hw_SPIReadByte+0x32>
	return rxByte;
 8001d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f001 fc72 	bl	8003634 <HAL_GPIO_ReadPin>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	bf0c      	ite	eq
 8001d56:	2301      	moveq	r3, #1
 8001d58:	2300      	movne	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6a:	f107 0310 	add.w	r3, r7, #16
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d78:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <MX_GPIO_Init+0xec>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a34      	ldr	r2, [pc, #208]	; (8001e50 <MX_GPIO_Init+0xec>)
 8001d7e:	f043 0310 	orr.w	r3, r3, #16
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <MX_GPIO_Init+0xec>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d90:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <MX_GPIO_Init+0xec>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a2e      	ldr	r2, [pc, #184]	; (8001e50 <MX_GPIO_Init+0xec>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <MX_GPIO_Init+0xec>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001da8:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <MX_GPIO_Init+0xec>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4a28      	ldr	r2, [pc, #160]	; (8001e50 <MX_GPIO_Init+0xec>)
 8001dae:	f043 0308 	orr.w	r3, r3, #8
 8001db2:	6193      	str	r3, [r2, #24]
 8001db4:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <MX_GPIO_Init+0xec>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]



	/*cau hinh nut nhan chan so pc13*/
	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = MODE_Pin;
 8001dc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dc4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8001dce:	f107 0310 	add.w	r3, r7, #16
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	481f      	ldr	r0, [pc, #124]	; (8001e54 <MX_GPIO_Init+0xf0>)
 8001dd6:	f001 faa9 	bl	800332c <HAL_GPIO_Init>

	/*cau hinh chan cs va chan led la output*/

	/*Configure GPIO pins : PAPin PAPin */
	GPIO_InitStruct.Pin = NSS_Pin|LED_Pin;
 8001dda:	2330      	movs	r3, #48	; 0x30
 8001ddc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dde:	2301      	movs	r3, #1
 8001de0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 0310 	add.w	r3, r7, #16
 8001dee:	4619      	mov	r1, r3
 8001df0:	4819      	ldr	r0, [pc, #100]	; (8001e58 <MX_GPIO_Init+0xf4>)
 8001df2:	f001 fa9b 	bl	800332c <HAL_GPIO_Init>


	/*cau hinh chan D0 la chan input*/

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = DIO0_Pin;
 8001df6:	2301      	movs	r3, #1
 8001df8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001e02:	f107 0310 	add.w	r3, r7, #16
 8001e06:	4619      	mov	r1, r3
 8001e08:	4814      	ldr	r0, [pc, #80]	; (8001e5c <MX_GPIO_Init+0xf8>)
 8001e0a:	f001 fa8f 	bl	800332c <HAL_GPIO_Init>


	/*cau hinh chan reset la chan output*/

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = RESET_Pin;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8001e1e:	f107 0310 	add.w	r3, r7, #16
 8001e22:	4619      	mov	r1, r3
 8001e24:	480d      	ldr	r0, [pc, #52]	; (8001e5c <MX_GPIO_Init+0xf8>)
 8001e26:	f001 fa81 	bl	800332c <HAL_GPIO_Init>


	/*dat chan cs cua stm32 len muc cao*/
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	2110      	movs	r1, #16
 8001e2e:	480a      	ldr	r0, [pc, #40]	; (8001e58 <MX_GPIO_Init+0xf4>)
 8001e30:	f001 fc17 	bl	8003662 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2120      	movs	r1, #32
 8001e38:	4807      	ldr	r0, [pc, #28]	; (8001e58 <MX_GPIO_Init+0xf4>)
 8001e3a:	f001 fc12 	bl	8003662 <HAL_GPIO_WritePin>


	/*dat chan reset len muc cao*/
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2102      	movs	r1, #2
 8001e42:	4806      	ldr	r0, [pc, #24]	; (8001e5c <MX_GPIO_Init+0xf8>)
 8001e44:	f001 fc0d 	bl	8003662 <HAL_GPIO_WritePin>



}
 8001e48:	bf00      	nop
 8001e4a:	3720      	adds	r7, #32
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40011000 	.word	0x40011000
 8001e58:	40010800 	.word	0x40010800
 8001e5c:	40010c00 	.word	0x40010c00

08001e60 <mpu6050_read>:
/*
 * tao chuong trinh mpu6050_read gom hai doi so ky tu khong am char add, va ky tu khong am char n
 * */

void mpu6050_read(unsigned char add, unsigned char n)     //doc n byte bt dau tu dia chi add, luu vao rbuff
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af04      	add	r7, sp, #16
 8001e66:	4603      	mov	r3, r0
 8001e68:	460a      	mov	r2, r1
 8001e6a:	71fb      	strb	r3, [r7, #7]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	71bb      	strb	r3, [r7, #6]
	/*gan gia tri cua add vao ky tu dau tien cua mang mpu6050_tbuff la gia tri mpu6050_tbuff[0]*/

	*mpu6050_tbuff=add;
 8001e70:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <mpu6050_read+0x3c>)
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	7013      	strb	r3, [r2, #0]
//    HAL_I2C_Master_Transmit(&hi2c1,0xD0,mpu6050_tbuff,1,1);
 //   HAL_I2C_Master_Receive(&hi2c1,0xD0,mpu6050_rbuff,n,1);
	/*
	 * ham nay dung de doc ky tu duoc dua vao tu bien add va kich thuoc la n
	 * */
		HAL_I2C_Mem_Read(&hi2c1, 0xD0, add,I2C_MEMADD_SIZE_8BIT, mpu6050_rbuff, n, 1000);
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	79bb      	ldrb	r3, [r7, #6]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e82:	9102      	str	r1, [sp, #8]
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <mpu6050_read+0x40>)
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	21d0      	movs	r1, #208	; 0xd0
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <mpu6050_read+0x44>)
 8001e90:	f001 fe42 	bl	8003b18 <HAL_I2C_Mem_Read>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000240 	.word	0x20000240
 8001ea0:	20000248 	.word	0x20000248
 8001ea4:	20000250 	.word	0x20000250

08001ea8 <mpu6050_getgyro>:
void mpu6050_getgyro()					 //doc du lieu gyro 16bit, ghi vao rbuff
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	// lay du lieu gia toc goc
	/*
	 * 0x43 la bit cua gyro_xout_h trang 7
	 * */
    mpu6050_read(0x43,6);
 8001eac:	2106      	movs	r1, #6
 8001eae:	2043      	movs	r0, #67	; 0x43
 8001eb0:	f7ff ffd6 	bl	8001e60 <mpu6050_read>
    /*
     * gia tri dau tien
     * */
    *mpu6050_g=((*mpu6050_rbuff)<<8)+*(mpu6050_rbuff+1);
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <mpu6050_getgyro+0x60>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <mpu6050_getgyro+0x60>)
 8001ec0:	785b      	ldrb	r3, [r3, #1]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	b21a      	sxth	r2, r3
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <mpu6050_getgyro+0x64>)
 8001ecc:	801a      	strh	r2, [r3, #0]
    *(mpu6050_g+1)=(*(mpu6050_rbuff+2)<<8)+*(mpu6050_rbuff+3);
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <mpu6050_getgyro+0x60>)
 8001ed0:	789b      	ldrb	r3, [r3, #2]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	021b      	lsls	r3, r3, #8
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <mpu6050_getgyro+0x60>)
 8001eda:	78db      	ldrb	r3, [r3, #3]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	b21a      	sxth	r2, r3
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <mpu6050_getgyro+0x64>)
 8001ee6:	805a      	strh	r2, [r3, #2]
    *(mpu6050_g+2)=(*(mpu6050_rbuff+4)<<8)+*(mpu6050_rbuff+5);
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <mpu6050_getgyro+0x60>)
 8001eea:	791b      	ldrb	r3, [r3, #4]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	021b      	lsls	r3, r3, #8
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <mpu6050_getgyro+0x60>)
 8001ef4:	795b      	ldrb	r3, [r3, #5]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	b21a      	sxth	r2, r3
 8001efe:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <mpu6050_getgyro+0x64>)
 8001f00:	809a      	strh	r2, [r3, #4]
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000248 	.word	0x20000248
 8001f0c:	20000218 	.word	0x20000218

08001f10 <mpu6050_getgyrodata>:
void mpu6050_getgyrodata()				//doc du lieu gyro, don vi: rad/giay, ghi vao mang mpu6050_gf
	{	//3.2768
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
		mpu6050_getgyro();
 8001f14:	f7ff ffc8 	bl	8001ea8 <mpu6050_getgyro>
		*mpu6050_gf=*mpu6050_g/939.650784f;
 8001f18:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <mpu6050_getgyrodata+0x68>)
 8001f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe febc 	bl	8000c9c <__aeabi_i2f>
 8001f24:	4603      	mov	r3, r0
 8001f26:	4915      	ldr	r1, [pc, #84]	; (8001f7c <mpu6050_getgyrodata+0x6c>)
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe ffbf 	bl	8000eac <__aeabi_fdiv>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <mpu6050_getgyrodata+0x70>)
 8001f34:	601a      	str	r2, [r3, #0]
		*(mpu6050_gf+1)=*(mpu6050_g+1)/939.650784f;
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <mpu6050_getgyrodata+0x68>)
 8001f38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fead 	bl	8000c9c <__aeabi_i2f>
 8001f42:	4603      	mov	r3, r0
 8001f44:	490d      	ldr	r1, [pc, #52]	; (8001f7c <mpu6050_getgyrodata+0x6c>)
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe ffb0 	bl	8000eac <__aeabi_fdiv>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <mpu6050_getgyrodata+0x70>)
 8001f52:	605a      	str	r2, [r3, #4]
		*(mpu6050_gf+2)=*(mpu6050_g+2)/939.650784f;
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <mpu6050_getgyrodata+0x68>)
 8001f56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fe9e 	bl	8000c9c <__aeabi_i2f>
 8001f60:	4603      	mov	r3, r0
 8001f62:	4906      	ldr	r1, [pc, #24]	; (8001f7c <mpu6050_getgyrodata+0x6c>)
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe ffa1 	bl	8000eac <__aeabi_fdiv>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <mpu6050_getgyrodata+0x70>)
 8001f70:	609a      	str	r2, [r3, #8]

	}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000218 	.word	0x20000218
 8001f7c:	446ae9a6 	.word	0x446ae9a6
 8001f80:	20000220 	.word	0x20000220

08001f84 <mpu6050_getaccel>:
void mpu6050_getaccel()					//doc du lieu accel 16bit, ghi vao mang mpu6050_a
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	/*
	 * 0x3b la gia tri accel_xout_h
	 * */
    mpu6050_read(0x3b,6);
 8001f88:	2106      	movs	r1, #6
 8001f8a:	203b      	movs	r0, #59	; 0x3b
 8001f8c:	f7ff ff68 	bl	8001e60 <mpu6050_read>
    *mpu6050_a=((*mpu6050_rbuff)<<8)+*(mpu6050_rbuff+1)-260;
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <mpu6050_getaccel+0x64>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <mpu6050_getaccel+0x64>)
 8001f9c:	785b      	ldrb	r3, [r3, #1]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <mpu6050_getaccel+0x68>)
 8001fae:	801a      	strh	r2, [r3, #0]
    *(mpu6050_a+1)=(*(mpu6050_rbuff+2)<<8)+*(mpu6050_rbuff+3);
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <mpu6050_getaccel+0x64>)
 8001fb2:	789b      	ldrb	r3, [r3, #2]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <mpu6050_getaccel+0x64>)
 8001fbc:	78db      	ldrb	r3, [r3, #3]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <mpu6050_getaccel+0x68>)
 8001fc8:	805a      	strh	r2, [r3, #2]
    *(mpu6050_a+2)=(*(mpu6050_rbuff+4)<<8)+*(mpu6050_rbuff+5);
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <mpu6050_getaccel+0x64>)
 8001fcc:	791b      	ldrb	r3, [r3, #4]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <mpu6050_getaccel+0x64>)
 8001fd6:	795b      	ldrb	r3, [r3, #5]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	4413      	add	r3, r2
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	b21a      	sxth	r2, r3
 8001fe0:	4b02      	ldr	r3, [pc, #8]	; (8001fec <mpu6050_getaccel+0x68>)
 8001fe2:	809a      	strh	r2, [r3, #4]
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000248 	.word	0x20000248
 8001fec:	2000022c 	.word	0x2000022c

08001ff0 <mpu6050_getacceldata>:
void mpu6050_getacceldata()				//doc du lieu accel, don vi:g, ghi vao mang mpu6050_af
	{//409.60
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
		mpu6050_getaccel();
 8001ff4:	f7ff ffc6 	bl	8001f84 <mpu6050_getaccel>
		*mpu6050_af=*mpu6050_a/8192.0f;
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <mpu6050_getacceldata+0x6c>)
 8001ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fe4c 	bl	8000c9c <__aeabi_i2f>
 8002004:	4603      	mov	r3, r0
 8002006:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe ff4e 	bl	8000eac <__aeabi_fdiv>
 8002010:	4603      	mov	r3, r0
 8002012:	461a      	mov	r2, r3
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <mpu6050_getacceldata+0x70>)
 8002016:	601a      	str	r2, [r3, #0]
		*(mpu6050_af+1)=*(mpu6050_a+1)/8192.0f;
 8002018:	4b10      	ldr	r3, [pc, #64]	; (800205c <mpu6050_getacceldata+0x6c>)
 800201a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fe3c 	bl	8000c9c <__aeabi_i2f>
 8002024:	4603      	mov	r3, r0
 8002026:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe ff3e 	bl	8000eac <__aeabi_fdiv>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <mpu6050_getacceldata+0x70>)
 8002036:	605a      	str	r2, [r3, #4]
		*(mpu6050_af+2)=*(mpu6050_a+2)/8192.0f;
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <mpu6050_getacceldata+0x6c>)
 800203a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fe2c 	bl	8000c9c <__aeabi_i2f>
 8002044:	4603      	mov	r3, r0
 8002046:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe ff2e 	bl	8000eac <__aeabi_fdiv>
 8002050:	4603      	mov	r3, r0
 8002052:	461a      	mov	r2, r3
 8002054:	4b02      	ldr	r3, [pc, #8]	; (8002060 <mpu6050_getacceldata+0x70>)
 8002056:	609a      	str	r2, [r3, #8]
	}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	2000022c 	.word	0x2000022c
 8002060:	20000234 	.word	0x20000234

08002064 <mpu6050_write>:
void mpu6050_write(unsigned char add,unsigned char data)	//ham ghi 1 byte vao dia chi add
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af02      	add	r7, sp, #8
 800206a:	4603      	mov	r3, r0
 800206c:	460a      	mov	r2, r1
 800206e:	71fb      	strb	r3, [r7, #7]
 8002070:	4613      	mov	r3, r2
 8002072:	71bb      	strb	r3, [r7, #6]
	*mpu6050_tbuff=add;
 8002074:	4a08      	ldr	r2, [pc, #32]	; (8002098 <mpu6050_write+0x34>)
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	7013      	strb	r3, [r2, #0]
	*(mpu6050_tbuff+1)=data;
 800207a:	4a07      	ldr	r2, [pc, #28]	; (8002098 <mpu6050_write+0x34>)
 800207c:	79bb      	ldrb	r3, [r7, #6]
 800207e:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1,0xD0,mpu6050_tbuff,2,1);
 8002080:	2301      	movs	r3, #1
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2302      	movs	r3, #2
 8002086:	4a04      	ldr	r2, [pc, #16]	; (8002098 <mpu6050_write+0x34>)
 8002088:	21d0      	movs	r1, #208	; 0xd0
 800208a:	4804      	ldr	r0, [pc, #16]	; (800209c <mpu6050_write+0x38>)
 800208c:	f001 fc46 	bl	800391c <HAL_I2C_Master_Transmit>
//	HAL_I2C_Mem_Write(&hi2c1, 0x68, address, I2C_MEMADD_SIZE_8BIT, &data, 1, 1);
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000240 	.word	0x20000240
 800209c:	20000250 	.word	0x20000250

080020a0 <mpu6050_init>:
   mpu6050_read(add, 2);

   return ((*mpu6050_rbuff)<<8)+*(mpu6050_rbuff+1);
}
void mpu6050_init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
   mpu6050_write(PWR_MGMT_1, 0x00);  // internal 20MHz, disabled SLEEP mode, disable CYCLE mode
 80020a4:	2100      	movs	r1, #0
 80020a6:	206b      	movs	r0, #107	; 0x6b
 80020a8:	f7ff ffdc 	bl	8002064 <mpu6050_write>
   mpu6050_write(SMPLRT_DIV, 0x03);	 //sample rate: 4MHZ
 80020ac:	2103      	movs	r1, #3
 80020ae:	2019      	movs	r0, #25
 80020b0:	f7ff ffd8 	bl	8002064 <mpu6050_write>
   mpu6050_write(CONFIG, 0x06);		 //DLPF enable gia toc ke bandwidth 5hz, Delay 19ms,con quay hoi chuyen bandwidth 5hz - delay 18.6ms - Fs=1khz
 80020b4:	2106      	movs	r1, #6
 80020b6:	201a      	movs	r0, #26
 80020b8:	f7ff ffd4 	bl	8002064 <mpu6050_write>
   mpu6050_write(GYRO_CONFIG, 0x10);  //full scale range mode 2 +-1000do/s - 32.8 LSB/do/s
 80020bc:	2110      	movs	r1, #16
 80020be:	201b      	movs	r0, #27
 80020c0:	f7ff ffd0 	bl	8002064 <mpu6050_write>
   mpu6050_write(ACCEL_CONFIG, 0x10); //full scale range mode 2 +-8g 4096 LSB/g
 80020c4:	2110      	movs	r1, #16
 80020c6:	201c      	movs	r0, #28
 80020c8:	f7ff ffcc 	bl	8002064 <mpu6050_write>
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020d4:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80020d8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020da:	f000 ffbd 	bl	8003058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020de:	f000 fa27 	bl	8002530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e2:	f7ff fe3f 	bl	8001d64 <MX_GPIO_Init>
  MX_SPI2_Init();
 80020e6:	f000 fa97 	bl	8002618 <MX_SPI2_Init>
  MX_I2C1_Init();
 80020ea:	f000 fa67 	bl	80025bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  initUART1();
 80020ee:	f000 facf 	bl	8002690 <initUART1>

  char buf[512];

  HAL_Delay(5000);
 80020f2:	f241 3088 	movw	r0, #5000	; 0x1388
 80020f6:	f001 f811 	bl	800311c <HAL_Delay>
  SendKyTu(buf, "Mode: Master");
 80020fa:	463b      	mov	r3, r7
 80020fc:	49a6      	ldr	r1, [pc, #664]	; (8002398 <main+0x2c8>)
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 fb0a 	bl	8002718 <SendKyTu>


  /*init lora module*/

  SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8002104:	4ba5      	ldr	r3, [pc, #660]	; (800239c <main+0x2cc>)
 8002106:	4aa6      	ldr	r2, [pc, #664]	; (80023a0 <main+0x2d0>)
 8002108:	60da      	str	r2, [r3, #12]
  SX1278_hw.dio0.pin=DIO0_Pin;
 800210a:	4ba4      	ldr	r3, [pc, #656]	; (800239c <main+0x2cc>)
 800210c:	2201      	movs	r2, #1
 800210e:	609a      	str	r2, [r3, #8]
  SX1278_hw.nss.port=NSS_GPIO_Port;
 8002110:	4ba2      	ldr	r3, [pc, #648]	; (800239c <main+0x2cc>)
 8002112:	4aa4      	ldr	r2, [pc, #656]	; (80023a4 <main+0x2d4>)
 8002114:	615a      	str	r2, [r3, #20]
  SX1278_hw.nss.pin=NSS_Pin;
 8002116:	4ba1      	ldr	r3, [pc, #644]	; (800239c <main+0x2cc>)
 8002118:	2210      	movs	r2, #16
 800211a:	611a      	str	r2, [r3, #16]
  SX1278_hw.reset.port=RESET_GPIO_Port;
 800211c:	4b9f      	ldr	r3, [pc, #636]	; (800239c <main+0x2cc>)
 800211e:	4aa0      	ldr	r2, [pc, #640]	; (80023a0 <main+0x2d0>)
 8002120:	605a      	str	r2, [r3, #4]
  SX1278_hw.reset.pin=RESET_Pin;
 8002122:	4b9e      	ldr	r3, [pc, #632]	; (800239c <main+0x2cc>)
 8002124:	2202      	movs	r2, #2
 8002126:	601a      	str	r2, [r3, #0]
  SX1278_hw.spi= &hspi2;
 8002128:	4b9c      	ldr	r3, [pc, #624]	; (800239c <main+0x2cc>)
 800212a:	4a9f      	ldr	r2, [pc, #636]	; (80023a8 <main+0x2d8>)
 800212c:	619a      	str	r2, [r3, #24]

  /*con tro tro den dia chi */

  SX1278.hw= &SX1278_hw;
 800212e:	4b9f      	ldr	r3, [pc, #636]	; (80023ac <main+0x2dc>)
 8002130:	4a9a      	ldr	r2, [pc, #616]	; (800239c <main+0x2cc>)
 8002132:	601a      	str	r2, [r3, #0]

  HAL_Delay(3000);
 8002134:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002138:	f000 fff0 	bl	800311c <HAL_Delay>
  SendKyTu(buf, "Configuring lora module");
 800213c:	463b      	mov	r3, r7
 800213e:	499c      	ldr	r1, [pc, #624]	; (80023b0 <main+0x2e0>)
 8002140:	4618      	mov	r0, r3
 8002142:	f000 fae9 	bl	8002718 <SendKyTu>
  SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8002146:	230a      	movs	r3, #10
 8002148:	9305      	str	r3, [sp, #20]
 800214a:	2300      	movs	r3, #0
 800214c:	9304      	str	r3, [sp, #16]
 800214e:	2300      	movs	r3, #0
 8002150:	9303      	str	r3, [sp, #12]
 8002152:	2307      	movs	r3, #7
 8002154:	9302      	str	r3, [sp, #8]
 8002156:	2301      	movs	r3, #1
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	2301      	movs	r3, #1
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	a38c      	add	r3, pc, #560	; (adr r3, 8002390 <main+0x2c0>)
 8002160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002164:	4891      	ldr	r0, [pc, #580]	; (80023ac <main+0x2dc>)
 8002166:	f000 fe5e 	bl	8002e26 <SX1278_init>
  SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);

  HAL_Delay(3000);
 800216a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800216e:	f000 ffd5 	bl	800311c <HAL_Delay>
  SendKyTu(buf, "Done configure lora module");
 8002172:	463b      	mov	r3, r7
 8002174:	498f      	ldr	r1, [pc, #572]	; (80023b4 <main+0x2e4>)
 8002176:	4618      	mov	r0, r3
 8002178:	f000 face 	bl	8002718 <SendKyTu>

  sent.ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 800217c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002180:	2110      	movs	r1, #16
 8002182:	488a      	ldr	r0, [pc, #552]	; (80023ac <main+0x2dc>)
 8002184:	f000 fdb8 	bl	8002cf8 <SX1278_LoRaEntryTx>
 8002188:	4603      	mov	r3, r0
 800218a:	4a8b      	ldr	r2, [pc, #556]	; (80023b8 <main+0x2e8>)
 800218c:	6053      	str	r3, [r2, #4]
  sent.message=0;
 800218e:	4b8a      	ldr	r3, [pc, #552]	; (80023b8 <main+0x2e8>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  sent.messageTwo=0;
 8002194:	4b88      	ldr	r3, [pc, #544]	; (80023b8 <main+0x2e8>)
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
  sent.messageThree=0;
 800219a:	4b87      	ldr	r3, [pc, #540]	; (80023b8 <main+0x2e8>)
 800219c:	2200      	movs	r2, #0
 800219e:	615a      	str	r2, [r3, #20]
  mpu6050_init();
 80021a0:	f7ff ff7e 	bl	80020a0 <mpu6050_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mpu6050_getgyrodata();
 80021a4:	f7ff feb4 	bl	8001f10 <mpu6050_getgyrodata>
	  mpu6050_getacceldata();
 80021a8:	f7ff ff22 	bl	8001ff0 <mpu6050_getacceldata>
	  MadgwickAHRSupdateIMU(mpu6050_gf[0],mpu6050_gf[1],mpu6050_gf[2],mpu6050_af[0],mpu6050_af[1],mpu6050_af[2]);
 80021ac:	4b83      	ldr	r3, [pc, #524]	; (80023bc <main+0x2ec>)
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	4b82      	ldr	r3, [pc, #520]	; (80023bc <main+0x2ec>)
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	4b81      	ldr	r3, [pc, #516]	; (80023bc <main+0x2ec>)
 80021b6:	689e      	ldr	r6, [r3, #8]
 80021b8:	4b81      	ldr	r3, [pc, #516]	; (80023c0 <main+0x2f0>)
 80021ba:	f8d3 c000 	ldr.w	ip, [r3]
 80021be:	4b80      	ldr	r3, [pc, #512]	; (80023c0 <main+0x2f0>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4a7f      	ldr	r2, [pc, #508]	; (80023c0 <main+0x2f0>)
 80021c4:	6892      	ldr	r2, [r2, #8]
 80021c6:	9201      	str	r2, [sp, #4]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	4663      	mov	r3, ip
 80021cc:	4632      	mov	r2, r6
 80021ce:	f7ff f925 	bl	800141c <MadgwickAHRSupdateIMU>

	  sent.Pitch_m=100*(-asin (2*(q1*q3 - q0*q2)));
 80021d2:	4b7c      	ldr	r3, [pc, #496]	; (80023c4 <main+0x2f4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a7c      	ldr	r2, [pc, #496]	; (80023c8 <main+0x2f8>)
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fdb1 	bl	8000d44 <__aeabi_fmul>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461e      	mov	r6, r3
 80021e6:	4b79      	ldr	r3, [pc, #484]	; (80023cc <main+0x2fc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a79      	ldr	r2, [pc, #484]	; (80023d0 <main+0x300>)
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe fda7 	bl	8000d44 <__aeabi_fmul>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4619      	mov	r1, r3
 80021fa:	4630      	mov	r0, r6
 80021fc:	f7fe fc98 	bl	8000b30 <__aeabi_fsub>
 8002200:	4603      	mov	r3, r0
 8002202:	4619      	mov	r1, r3
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fc95 	bl	8000b34 <__addsf3>
 800220a:	4603      	mov	r3, r0
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe f90b 	bl	8000428 <__aeabi_f2d>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	f006 f919 	bl	8008450 <asin>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4614      	mov	r4, r2
 8002224:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	4b69      	ldr	r3, [pc, #420]	; (80023d4 <main+0x304>)
 800222e:	4620      	mov	r0, r4
 8002230:	4629      	mov	r1, r5
 8002232:	f7fe f951 	bl	80004d8 <__aeabi_dmul>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	f7fe fc23 	bl	8000a88 <__aeabi_d2f>
 8002242:	4603      	mov	r3, r0
 8002244:	4a5c      	ldr	r2, [pc, #368]	; (80023b8 <main+0x2e8>)
 8002246:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	  sent.Yaw_m=100* atan2(2 * q1 * q2 + 2 * q0 * q3,2 * q0 * q0 + 2 * q1 * q1-1);
 800224a:	4b5e      	ldr	r3, [pc, #376]	; (80023c4 <main+0x2f4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4619      	mov	r1, r3
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe fc6f 	bl	8000b34 <__addsf3>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	4b5d      	ldr	r3, [pc, #372]	; (80023d0 <main+0x300>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4619      	mov	r1, r3
 8002260:	4610      	mov	r0, r2
 8002262:	f7fe fd6f 	bl	8000d44 <__aeabi_fmul>
 8002266:	4603      	mov	r3, r0
 8002268:	461e      	mov	r6, r3
 800226a:	4b58      	ldr	r3, [pc, #352]	; (80023cc <main+0x2fc>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4619      	mov	r1, r3
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe fc5f 	bl	8000b34 <__addsf3>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <main+0x2f8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4619      	mov	r1, r3
 8002280:	4610      	mov	r0, r2
 8002282:	f7fe fd5f 	bl	8000d44 <__aeabi_fmul>
 8002286:	4603      	mov	r3, r0
 8002288:	4619      	mov	r1, r3
 800228a:	4630      	mov	r0, r6
 800228c:	f7fe fc52 	bl	8000b34 <__addsf3>
 8002290:	4603      	mov	r3, r0
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f8c8 	bl	8000428 <__aeabi_f2d>
 8002298:	4680      	mov	r8, r0
 800229a:	4689      	mov	r9, r1
 800229c:	4b4b      	ldr	r3, [pc, #300]	; (80023cc <main+0x2fc>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fc46 	bl	8000b34 <__addsf3>
 80022a8:	4603      	mov	r3, r0
 80022aa:	461a      	mov	r2, r3
 80022ac:	4b47      	ldr	r3, [pc, #284]	; (80023cc <main+0x2fc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4619      	mov	r1, r3
 80022b2:	4610      	mov	r0, r2
 80022b4:	f7fe fd46 	bl	8000d44 <__aeabi_fmul>
 80022b8:	4603      	mov	r3, r0
 80022ba:	461e      	mov	r6, r3
 80022bc:	4b41      	ldr	r3, [pc, #260]	; (80023c4 <main+0x2f4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe fc36 	bl	8000b34 <__addsf3>
 80022c8:	4603      	mov	r3, r0
 80022ca:	461a      	mov	r2, r3
 80022cc:	4b3d      	ldr	r3, [pc, #244]	; (80023c4 <main+0x2f4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	4610      	mov	r0, r2
 80022d4:	f7fe fd36 	bl	8000d44 <__aeabi_fmul>
 80022d8:	4603      	mov	r3, r0
 80022da:	4619      	mov	r1, r3
 80022dc:	4630      	mov	r0, r6
 80022de:	f7fe fc29 	bl	8000b34 <__addsf3>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe fc21 	bl	8000b30 <__aeabi_fsub>
 80022ee:	4603      	mov	r3, r0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe f899 	bl	8000428 <__aeabi_f2d>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4640      	mov	r0, r8
 80022fc:	4649      	mov	r1, r9
 80022fe:	f006 f8cf 	bl	80084a0 <atan2>
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	4b33      	ldr	r3, [pc, #204]	; (80023d4 <main+0x304>)
 8002308:	f7fe f8e6 	bl	80004d8 <__aeabi_dmul>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	f7fe fbb8 	bl	8000a88 <__aeabi_d2f>
 8002318:	4603      	mov	r3, r0
 800231a:	4a27      	ldr	r2, [pc, #156]	; (80023b8 <main+0x2e8>)
 800231c:	f8c2 3218 	str.w	r3, [r2, #536]	; 0x218
	  sent.Roll_m=100*atan2(2 * q2 * q3 + 2 * q0 * q1, 2 * q0 * q0 + 2 * q3 * q3 - 1);
 8002320:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <main+0x300>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4619      	mov	r1, r3
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe fc04 	bl	8000b34 <__addsf3>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <main+0x2f8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4619      	mov	r1, r3
 8002336:	4610      	mov	r0, r2
 8002338:	f7fe fd04 	bl	8000d44 <__aeabi_fmul>
 800233c:	4603      	mov	r3, r0
 800233e:	461e      	mov	r6, r3
 8002340:	4b22      	ldr	r3, [pc, #136]	; (80023cc <main+0x2fc>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe fbf4 	bl	8000b34 <__addsf3>
 800234c:	4603      	mov	r3, r0
 800234e:	461a      	mov	r2, r3
 8002350:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <main+0x2f4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4619      	mov	r1, r3
 8002356:	4610      	mov	r0, r2
 8002358:	f7fe fcf4 	bl	8000d44 <__aeabi_fmul>
 800235c:	4603      	mov	r3, r0
 800235e:	4619      	mov	r1, r3
 8002360:	4630      	mov	r0, r6
 8002362:	f7fe fbe7 	bl	8000b34 <__addsf3>
 8002366:	4603      	mov	r3, r0
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f85d 	bl	8000428 <__aeabi_f2d>
 800236e:	4680      	mov	r8, r0
 8002370:	4689      	mov	r9, r1
 8002372:	4b16      	ldr	r3, [pc, #88]	; (80023cc <main+0x2fc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4619      	mov	r1, r3
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe fbdb 	bl	8000b34 <__addsf3>
 800237e:	4603      	mov	r3, r0
 8002380:	461a      	mov	r2, r3
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <main+0x2fc>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4619      	mov	r1, r3
 8002388:	e026      	b.n	80023d8 <main+0x308>
 800238a:	bf00      	nop
 800238c:	f3af 8000 	nop.w
 8002390:	19de5080 	.word	0x19de5080
 8002394:	00000000 	.word	0x00000000
 8002398:	08008f30 	.word	0x08008f30
 800239c:	200002fc 	.word	0x200002fc
 80023a0:	40010c00 	.word	0x40010c00
 80023a4:	40010800 	.word	0x40010800
 80023a8:	200002a4 	.word	0x200002a4
 80023ac:	20000318 	.word	0x20000318
 80023b0:	08008f40 	.word	0x08008f40
 80023b4:	08008f58 	.word	0x08008f58
 80023b8:	20000430 	.word	0x20000430
 80023bc:	20000220 	.word	0x20000220
 80023c0:	20000234 	.word	0x20000234
 80023c4:	2000020c 	.word	0x2000020c
 80023c8:	20000214 	.word	0x20000214
 80023cc:	20000004 	.word	0x20000004
 80023d0:	20000210 	.word	0x20000210
 80023d4:	40590000 	.word	0x40590000
 80023d8:	4610      	mov	r0, r2
 80023da:	f7fe fcb3 	bl	8000d44 <__aeabi_fmul>
 80023de:	4603      	mov	r3, r0
 80023e0:	461e      	mov	r6, r3
 80023e2:	4b48      	ldr	r3, [pc, #288]	; (8002504 <main+0x434>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4619      	mov	r1, r3
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fba3 	bl	8000b34 <__addsf3>
 80023ee:	4603      	mov	r3, r0
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b44      	ldr	r3, [pc, #272]	; (8002504 <main+0x434>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4619      	mov	r1, r3
 80023f8:	4610      	mov	r0, r2
 80023fa:	f7fe fca3 	bl	8000d44 <__aeabi_fmul>
 80023fe:	4603      	mov	r3, r0
 8002400:	4619      	mov	r1, r3
 8002402:	4630      	mov	r0, r6
 8002404:	f7fe fb96 	bl	8000b34 <__addsf3>
 8002408:	4603      	mov	r3, r0
 800240a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fb8e 	bl	8000b30 <__aeabi_fsub>
 8002414:	4603      	mov	r3, r0
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe f806 	bl	8000428 <__aeabi_f2d>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4640      	mov	r0, r8
 8002422:	4649      	mov	r1, r9
 8002424:	f006 f83c 	bl	80084a0 <atan2>
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	4b36      	ldr	r3, [pc, #216]	; (8002508 <main+0x438>)
 800242e:	f7fe f853 	bl	80004d8 <__aeabi_dmul>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	f7fe fb25 	bl	8000a88 <__aeabi_d2f>
 800243e:	4603      	mov	r3, r0
 8002440:	4a32      	ldr	r2, [pc, #200]	; (800250c <main+0x43c>)
 8002442:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220

	  SendKyTu(buf, "Mastering...");
 8002446:	463b      	mov	r3, r7
 8002448:	4931      	ldr	r1, [pc, #196]	; (8002510 <main+0x440>)
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f964 	bl	8002718 <SendKyTu>
	  HAL_Delay(1000);
 8002450:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002454:	f000 fe62 	bl	800311c <HAL_Delay>
	  SendKyTu(buf, "Sending packet...");
 8002458:	463b      	mov	r3, r7
 800245a:	492e      	ldr	r1, [pc, #184]	; (8002514 <main+0x444>)
 800245c:	4618      	mov	r0, r3
 800245e:	f000 f95b 	bl	8002718 <SendKyTu>
	  sent.message_length = sprintf(sent.buffer, "p %d y %d r %d", (int)sent.Pitch_m,(int)sent.Yaw_m,(int)sent.Roll_m);
 8002462:	4b2a      	ldr	r3, [pc, #168]	; (800250c <main+0x43c>)
 8002464:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe fe31 	bl	80010d0 <__aeabi_f2iz>
 800246e:	4606      	mov	r6, r0
 8002470:	4b26      	ldr	r3, [pc, #152]	; (800250c <main+0x43c>)
 8002472:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fe2a 	bl	80010d0 <__aeabi_f2iz>
 800247c:	4680      	mov	r8, r0
 800247e:	4b23      	ldr	r3, [pc, #140]	; (800250c <main+0x43c>)
 8002480:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe fe23 	bl	80010d0 <__aeabi_f2iz>
 800248a:	4603      	mov	r3, r0
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	4643      	mov	r3, r8
 8002490:	4632      	mov	r2, r6
 8002492:	4921      	ldr	r1, [pc, #132]	; (8002518 <main+0x448>)
 8002494:	4821      	ldr	r0, [pc, #132]	; (800251c <main+0x44c>)
 8002496:	f003 fe8d 	bl	80061b4 <siprintf>
 800249a:	4603      	mov	r3, r0
 800249c:	4a1b      	ldr	r2, [pc, #108]	; (800250c <main+0x43c>)
 800249e:	60d3      	str	r3, [r2, #12]
	  sent.ret = SX1278_LoRaEntryTx(&SX1278, sent.message_length, 2000);
 80024a0:	4b1a      	ldr	r3, [pc, #104]	; (800250c <main+0x43c>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80024aa:	4619      	mov	r1, r3
 80024ac:	481c      	ldr	r0, [pc, #112]	; (8002520 <main+0x450>)
 80024ae:	f000 fc23 	bl	8002cf8 <SX1278_LoRaEntryTx>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4a15      	ldr	r2, [pc, #84]	; (800250c <main+0x43c>)
 80024b6:	6053      	str	r3, [r2, #4]

	  sendNumberAndChu(buf, "entry: ", sent.ret);
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <main+0x43c>)
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	463b      	mov	r3, r7
 80024be:	4919      	ldr	r1, [pc, #100]	; (8002524 <main+0x454>)
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 f94f 	bl	8002764 <sendNumberAndChu>
	  SendKyTu(buf, sent.buffer);
 80024c6:	463b      	mov	r3, r7
 80024c8:	4914      	ldr	r1, [pc, #80]	; (800251c <main+0x44c>)
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 f924 	bl	8002718 <SendKyTu>
	  sent.ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) sent.buffer,
	  					sent.message_length, 2000);
 80024d0:	4b0e      	ldr	r3, [pc, #56]	; (800250c <main+0x43c>)
 80024d2:	68db      	ldr	r3, [r3, #12]
	  sent.ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) sent.buffer,
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80024da:	4910      	ldr	r1, [pc, #64]	; (800251c <main+0x44c>)
 80024dc:	4810      	ldr	r0, [pc, #64]	; (8002520 <main+0x450>)
 80024de:	f000 fc63 	bl	8002da8 <SX1278_LoRaTxPacket>
 80024e2:	4603      	mov	r3, r0
 80024e4:	4a09      	ldr	r2, [pc, #36]	; (800250c <main+0x43c>)
 80024e6:	6053      	str	r3, [r2, #4]
//	  sent.message+=1;
//	  sent.messageTwo+=1;
//	  sent.messageThree+=1;
	  sendNumberAndChu(buf, "Transmission: ", sent.ret);
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <main+0x43c>)
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	463b      	mov	r3, r7
 80024ee:	490e      	ldr	r1, [pc, #56]	; (8002528 <main+0x458>)
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 f937 	bl	8002764 <sendNumberAndChu>
	  SendKyTu(buf, "package sending...");
 80024f6:	463b      	mov	r3, r7
 80024f8:	490c      	ldr	r1, [pc, #48]	; (800252c <main+0x45c>)
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f90c 	bl	8002718 <SendKyTu>
	  mpu6050_getgyrodata();
 8002500:	e650      	b.n	80021a4 <main+0xd4>
 8002502:	bf00      	nop
 8002504:	20000214 	.word	0x20000214
 8002508:	40590000 	.word	0x40590000
 800250c:	20000430 	.word	0x20000430
 8002510:	08008f74 	.word	0x08008f74
 8002514:	08008f84 	.word	0x08008f84
 8002518:	08008f98 	.word	0x08008f98
 800251c:	20000448 	.word	0x20000448
 8002520:	20000318 	.word	0x20000318
 8002524:	08008fa8 	.word	0x08008fa8
 8002528:	08008fb0 	.word	0x08008fb0
 800252c:	08008fc0 	.word	0x08008fc0

08002530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b090      	sub	sp, #64	; 0x40
 8002534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002536:	f107 0318 	add.w	r3, r7, #24
 800253a:	2228      	movs	r2, #40	; 0x28
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f003 fe9b 	bl	800627a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	609a      	str	r2, [r3, #8]
 800254e:	60da      	str	r2, [r3, #12]
 8002550:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002552:	2301      	movs	r3, #1
 8002554:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002556:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800255a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800255c:	2300      	movs	r3, #0
 800255e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002560:	2301      	movs	r3, #1
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002564:	2302      	movs	r3, #2
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800256c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800256e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002572:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002574:	f107 0318 	add.w	r3, r7, #24
 8002578:	4618      	mov	r0, r3
 800257a:	f002 f8d5 	bl	8004728 <HAL_RCC_OscConfig>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002584:	f000 f87e 	bl	8002684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002588:	230f      	movs	r3, #15
 800258a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800258c:	2302      	movs	r3, #2
 800258e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	2102      	movs	r1, #2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f002 fb42 	bl	8004c2c <HAL_RCC_ClockConfig>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80025ae:	f000 f869 	bl	8002684 <Error_Handler>
  }
}
 80025b2:	bf00      	nop
 80025b4:	3740      	adds	r7, #64	; 0x40
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <MX_I2C1_Init+0x50>)
 80025c2:	4a13      	ldr	r2, [pc, #76]	; (8002610 <MX_I2C1_Init+0x54>)
 80025c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025c6:	4b11      	ldr	r3, [pc, #68]	; (800260c <MX_I2C1_Init+0x50>)
 80025c8:	4a12      	ldr	r2, [pc, #72]	; (8002614 <MX_I2C1_Init+0x58>)
 80025ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <MX_I2C1_Init+0x50>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <MX_I2C1_Init+0x50>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <MX_I2C1_Init+0x50>)
 80025da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025e0:	4b0a      	ldr	r3, [pc, #40]	; (800260c <MX_I2C1_Init+0x50>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <MX_I2C1_Init+0x50>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025ec:	4b07      	ldr	r3, [pc, #28]	; (800260c <MX_I2C1_Init+0x50>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <MX_I2C1_Init+0x50>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025f8:	4804      	ldr	r0, [pc, #16]	; (800260c <MX_I2C1_Init+0x50>)
 80025fa:	f001 f84b 	bl	8003694 <HAL_I2C_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002604:	f000 f83e 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000250 	.word	0x20000250
 8002610:	40005400 	.word	0x40005400
 8002614:	000186a0 	.word	0x000186a0

08002618 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800261c:	4b17      	ldr	r3, [pc, #92]	; (800267c <MX_SPI2_Init+0x64>)
 800261e:	4a18      	ldr	r2, [pc, #96]	; (8002680 <MX_SPI2_Init+0x68>)
 8002620:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <MX_SPI2_Init+0x64>)
 8002624:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002628:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800262a:	4b14      	ldr	r3, [pc, #80]	; (800267c <MX_SPI2_Init+0x64>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <MX_SPI2_Init+0x64>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002636:	4b11      	ldr	r3, [pc, #68]	; (800267c <MX_SPI2_Init+0x64>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800263c:	4b0f      	ldr	r3, [pc, #60]	; (800267c <MX_SPI2_Init+0x64>)
 800263e:	2200      	movs	r2, #0
 8002640:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002642:	4b0e      	ldr	r3, [pc, #56]	; (800267c <MX_SPI2_Init+0x64>)
 8002644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002648:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800264a:	4b0c      	ldr	r3, [pc, #48]	; (800267c <MX_SPI2_Init+0x64>)
 800264c:	2200      	movs	r2, #0
 800264e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002650:	4b0a      	ldr	r3, [pc, #40]	; (800267c <MX_SPI2_Init+0x64>)
 8002652:	2200      	movs	r2, #0
 8002654:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <MX_SPI2_Init+0x64>)
 8002658:	2200      	movs	r2, #0
 800265a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800265c:	4b07      	ldr	r3, [pc, #28]	; (800267c <MX_SPI2_Init+0x64>)
 800265e:	2200      	movs	r2, #0
 8002660:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <MX_SPI2_Init+0x64>)
 8002664:	220a      	movs	r2, #10
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002668:	4804      	ldr	r0, [pc, #16]	; (800267c <MX_SPI2_Init+0x64>)
 800266a:	f002 fc59 	bl	8004f20 <HAL_SPI_Init>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002674:	f000 f806 	bl	8002684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	200002a4 	.word	0x200002a4
 8002680:	40003800 	.word	0x40003800

08002684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002688:	b672      	cpsid	i
}
 800268a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800268c:	e7fe      	b.n	800268c <Error_Handler+0x8>
	...

08002690 <initUART1>:
#include "send.h"

void initUART1(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN | RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;
 8002694:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <initUART1+0x44>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	4a0e      	ldr	r2, [pc, #56]	; (80026d4 <initUART1+0x44>)
 800269a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269e:	f043 0305 	orr.w	r3, r3, #5
 80026a2:	6193      	str	r3, [r2, #24]
	GPIOA->CRH |= GPIO_CRH_ALT9|GPIO_CRH_INPUT10;
 80026a4:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <initUART1+0x48>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a0b      	ldr	r2, [pc, #44]	; (80026d8 <initUART1+0x48>)
 80026aa:	f443 630b 	orr.w	r3, r3, #2224	; 0x8b0
 80026ae:	6053      	str	r3, [r2, #4]
	GPIOA->ODR |= GPIO_ODR_ODR10;  //pull-up PA10
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <initUART1+0x48>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4a08      	ldr	r2, [pc, #32]	; (80026d8 <initUART1+0x48>)
 80026b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ba:	60d3      	str	r3, [r2, #12]
	USART1->CR1 = USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 80026bc:	4b07      	ldr	r3, [pc, #28]	; (80026dc <initUART1+0x4c>)
 80026be:	f242 020c 	movw	r2, #8204	; 0x200c
 80026c2:	60da      	str	r2, [r3, #12]
	USART1->BRR = 625;	 // 72MHz/9600bps = 7500
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <initUART1+0x4c>)
 80026c6:	f240 2271 	movw	r2, #625	; 0x271
 80026ca:	609a      	str	r2, [r3, #8]
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40010800 	.word	0x40010800
 80026dc:	40013800 	.word	0x40013800

080026e0 <usart1_sendByte>:
	// khong anh xa lai ma pin CHO TIM2 
	AFIO->MAPR |= AFIO_MAPR_TIM2_REMAP_NOREMAP;
	
}
void usart1_sendByte(unsigned char c)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
	USART1->DR = c;
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <usart1_sendByte+0x34>)
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	6053      	str	r3, [r2, #4]
	
	while((USART1->SR&(1<<6)) == 0);  //wait until the TC flag is set 
 80026f0:	bf00      	nop
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <usart1_sendByte+0x34>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f9      	beq.n	80026f2 <usart1_sendByte+0x12>
	USART1->SR &= ~(1<<6);
 80026fe:	4b05      	ldr	r3, [pc, #20]	; (8002714 <usart1_sendByte+0x34>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a04      	ldr	r2, [pc, #16]	; (8002714 <usart1_sendByte+0x34>)
 8002704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002708:	6013      	str	r3, [r2, #0]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	40013800 	.word	0x40013800

08002718 <SendKyTu>:

void SendKyTu(const char str[100],char str2[])
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
	sprintf(str,"%s ",str2);
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	490e      	ldr	r1, [pc, #56]	; (8002760 <SendKyTu+0x48>)
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f003 fd44 	bl	80061b4 <siprintf>
	int j=0;
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
	while(str[j] != '\0')
 8002730:	e009      	b.n	8002746 <SendKyTu+0x2e>
	{
		usart1_sendByte(str[j]);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4413      	add	r3, r2
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ffd0 	bl	80026e0 <usart1_sendByte>
		j++;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	3301      	adds	r3, #1
 8002744:	60fb      	str	r3, [r7, #12]
	while(str[j] != '\0')
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	4413      	add	r3, r2
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1ef      	bne.n	8002732 <SendKyTu+0x1a>
	}
	usart1_sendByte('\n');
 8002752:	200a      	movs	r0, #10
 8002754:	f7ff ffc4 	bl	80026e0 <usart1_sendByte>
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	08008fd4 	.word	0x08008fd4

08002764 <sendNumberAndChu>:
		usart1_sendByte(str[j]);
		j++;
	}
}
void sendNumberAndChu(const char str[100],char str2[],int data)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
	sprintf(str,"\n%s%d",str2,data);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	490d      	ldr	r1, [pc, #52]	; (80027ac <sendNumberAndChu+0x48>)
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f003 fd1c 	bl	80061b4 <siprintf>
	int j=0;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
	while(str[j] != '\0')
 8002780:	e009      	b.n	8002796 <sendNumberAndChu+0x32>
	{
		usart1_sendByte(str[j]);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff ffa8 	bl	80026e0 <usart1_sendByte>
		j++;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	3301      	adds	r3, #1
 8002794:	617b      	str	r3, [r7, #20]
	while(str[j] != '\0')
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4413      	add	r3, r2
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1ef      	bne.n	8002782 <sendNumberAndChu+0x1e>
	}
}
 80027a2:	bf00      	nop
 80027a4:	bf00      	nop
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	08008fe8 	.word	0x08008fe8

080027b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_MspInit+0x5c>)
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	4a14      	ldr	r2, [pc, #80]	; (800280c <HAL_MspInit+0x5c>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6193      	str	r3, [r2, #24]
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_MspInit+0x5c>)
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <HAL_MspInit+0x5c>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	4a0e      	ldr	r2, [pc, #56]	; (800280c <HAL_MspInit+0x5c>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d8:	61d3      	str	r3, [r2, #28]
 80027da:	4b0c      	ldr	r3, [pc, #48]	; (800280c <HAL_MspInit+0x5c>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_MspInit+0x60>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	4a04      	ldr	r2, [pc, #16]	; (8002810 <HAL_MspInit+0x60>)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	40021000 	.word	0x40021000
 8002810:	40010000 	.word	0x40010000

08002814 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 0310 	add.w	r3, r7, #16
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a15      	ldr	r2, [pc, #84]	; (8002884 <HAL_I2C_MspInit+0x70>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d123      	bne.n	800287c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002834:	4b14      	ldr	r3, [pc, #80]	; (8002888 <HAL_I2C_MspInit+0x74>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	4a13      	ldr	r2, [pc, #76]	; (8002888 <HAL_I2C_MspInit+0x74>)
 800283a:	f043 0308 	orr.w	r3, r3, #8
 800283e:	6193      	str	r3, [r2, #24]
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_I2C_MspInit+0x74>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800284c:	23c0      	movs	r3, #192	; 0xc0
 800284e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002850:	2312      	movs	r3, #18
 8002852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002854:	2303      	movs	r3, #3
 8002856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002858:	f107 0310 	add.w	r3, r7, #16
 800285c:	4619      	mov	r1, r3
 800285e:	480b      	ldr	r0, [pc, #44]	; (800288c <HAL_I2C_MspInit+0x78>)
 8002860:	f000 fd64 	bl	800332c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_I2C_MspInit+0x74>)
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	4a07      	ldr	r2, [pc, #28]	; (8002888 <HAL_I2C_MspInit+0x74>)
 800286a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800286e:	61d3      	str	r3, [r2, #28]
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_I2C_MspInit+0x74>)
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800287c:	bf00      	nop
 800287e:	3720      	adds	r7, #32
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40005400 	.word	0x40005400
 8002888:	40021000 	.word	0x40021000
 800288c:	40010c00 	.word	0x40010c00

08002890 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 0310 	add.w	r3, r7, #16
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a1c      	ldr	r2, [pc, #112]	; (800291c <HAL_SPI_MspInit+0x8c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d131      	bne.n	8002914 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_SPI_MspInit+0x90>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	4a1a      	ldr	r2, [pc, #104]	; (8002920 <HAL_SPI_MspInit+0x90>)
 80028b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ba:	61d3      	str	r3, [r2, #28]
 80028bc:	4b18      	ldr	r3, [pc, #96]	; (8002920 <HAL_SPI_MspInit+0x90>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c8:	4b15      	ldr	r3, [pc, #84]	; (8002920 <HAL_SPI_MspInit+0x90>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	4a14      	ldr	r2, [pc, #80]	; (8002920 <HAL_SPI_MspInit+0x90>)
 80028ce:	f043 0308 	orr.w	r3, r3, #8
 80028d2:	6193      	str	r3, [r2, #24]
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <HAL_SPI_MspInit+0x90>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80028e0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80028e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e6:	2302      	movs	r3, #2
 80028e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028ea:	2303      	movs	r3, #3
 80028ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ee:	f107 0310 	add.w	r3, r7, #16
 80028f2:	4619      	mov	r1, r3
 80028f4:	480b      	ldr	r0, [pc, #44]	; (8002924 <HAL_SPI_MspInit+0x94>)
 80028f6:	f000 fd19 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80028fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002908:	f107 0310 	add.w	r3, r7, #16
 800290c:	4619      	mov	r1, r3
 800290e:	4805      	ldr	r0, [pc, #20]	; (8002924 <HAL_SPI_MspInit+0x94>)
 8002910:	f000 fd0c 	bl	800332c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002914:	bf00      	nop
 8002916:	3720      	adds	r7, #32
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40003800 	.word	0x40003800
 8002920:	40021000 	.word	0x40021000
 8002924:	40010c00 	.word	0x40010c00

08002928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800292c:	e7fe      	b.n	800292c <NMI_Handler+0x4>

0800292e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002932:	e7fe      	b.n	8002932 <HardFault_Handler+0x4>

08002934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002938:	e7fe      	b.n	8002938 <MemManage_Handler+0x4>

0800293a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800293e:	e7fe      	b.n	800293e <BusFault_Handler+0x4>

08002940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002944:	e7fe      	b.n	8002944 <UsageFault_Handler+0x4>

08002946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800295e:	b480      	push	{r7}
 8002960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800296e:	f000 fbb9 	bl	80030e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}

08002976 <SX1278_SPIRead>:
 * https://github.com/realspinner/SX1278_LoRa
 */

#include "sx1278.h"
#include <string.h>
uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	460b      	mov	r3, r1
 8002980:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff f98d 	bl	8001caa <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff f9a8 	bl	8001cea <SX1278_hw_SPIReadByte>
 800299a:	4603      	mov	r3, r0
 800299c:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2101      	movs	r1, #1
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff f925 	bl	8001bf4 <SX1278_hw_SetNSS>
	return tmp;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <SX1278_SPIWrite>:


void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
 80029c0:	4613      	mov	r3, r2
 80029c2:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff f912 	bl	8001bf4 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	4619      	mov	r1, r3
 80029de:	4610      	mov	r0, r2
 80029e0:	f7ff f963 	bl	8001caa <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	78ba      	ldrb	r2, [r7, #2]
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff f95c 	bl	8001caa <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2101      	movs	r1, #1
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff f8fb 	bl	8001bf4 <SX1278_hw_SetNSS>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <SX1278_SPIBurstWrite>:
	}
}


void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b086      	sub	sp, #24
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	461a      	mov	r2, r3
 8002a12:	460b      	mov	r3, r1
 8002a14:	72fb      	strb	r3, [r7, #11]
 8002a16:	4613      	mov	r3, r2
 8002a18:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8002a1a:	7abb      	ldrb	r3, [r7, #10]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d929      	bls.n	8002a74 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff f8e4 	bl	8001bf4 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	7afb      	ldrb	r3, [r7, #11]
 8002a32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	f7ff f935 	bl	8001caa <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8002a40:	2300      	movs	r3, #0
 8002a42:	75fb      	strb	r3, [r7, #23]
 8002a44:	e00b      	b.n	8002a5e <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	4413      	add	r3, r2
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	4619      	mov	r1, r3
 8002a54:	f7ff f929 	bl	8001caa <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8002a58:	7dfb      	ldrb	r3, [r7, #23]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	75fb      	strb	r3, [r7, #23]
 8002a5e:	7dfa      	ldrb	r2, [r7, #23]
 8002a60:	7abb      	ldrb	r3, [r7, #10]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d3ef      	bcc.n	8002a46 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff f8c1 	bl	8001bf4 <SX1278_hw_SetNSS>
 8002a72:	e000      	b.n	8002a76 <SX1278_SPIBurstWrite+0x70>
		return;
 8002a74:	bf00      	nop
	}
}
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <SX1278_config>:


void SX1278_config(SX1278_t *module) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f90d 	bl	8002ca4 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8002a8a:	200f      	movs	r0, #15
 8002a8c:	f7ff f8de 	bl	8001c4c <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f917 	bl	8002cc4 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a9c:	f04f 0000 	mov.w	r0, #0
 8002aa0:	f04f 0100 	mov.w	r1, #0
 8002aa4:	04d9      	lsls	r1, r3, #19
 8002aa6:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8002aaa:	04d0      	lsls	r0, r2, #19
 8002aac:	4a6f      	ldr	r2, [pc, #444]	; (8002c6c <SX1278_config+0x1f0>)
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	f7fe fb33 	bl	800111c <__aeabi_uldivmod>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8002abe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	0c02      	lsrs	r2, r0, #16
 8002acc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002ad0:	0c0b      	lsrs	r3, r1, #16
 8002ad2:	b2d3      	uxtb	r3, r2
 8002ad4:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8002ad6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	0a02      	lsrs	r2, r0, #8
 8002ae4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002ae8:	0a0b      	lsrs	r3, r1, #8
 8002aea:	b2d3      	uxtb	r3, r2
 8002aec:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8002aee:	7c3b      	ldrb	r3, [r7, #16]
 8002af0:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8002af2:	f107 020c 	add.w	r2, r7, #12
 8002af6:	2303      	movs	r3, #3
 8002af8:	2106      	movs	r1, #6
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff ff83 	bl	8002a06 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8002b00:	2234      	movs	r2, #52	; 0x34
 8002b02:	2139      	movs	r1, #57	; 0x39
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff55 	bl	80029b4 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	7c1b      	ldrb	r3, [r3, #16]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b57      	ldr	r3, [pc, #348]	; (8002c70 <SX1278_config+0x1f4>)
 8002b12:	5c9b      	ldrb	r3, [r3, r2]
 8002b14:	461a      	mov	r2, r3
 8002b16:	2109      	movs	r1, #9
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ff4b 	bl	80029b4 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8002b1e:	220b      	movs	r2, #11
 8002b20:	210b      	movs	r1, #11
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff ff46 	bl	80029b4 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8002b28:	2223      	movs	r2, #35	; 0x23
 8002b2a:	210c      	movs	r1, #12
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ff41 	bl	80029b4 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	7c5b      	ldrb	r3, [r3, #17]
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b4e      	ldr	r3, [pc, #312]	; (8002c74 <SX1278_config+0x1f8>)
 8002b3a:	5c9b      	ldrb	r3, [r3, r2]
 8002b3c:	2b06      	cmp	r3, #6
 8002b3e:	d147      	bne.n	8002bd0 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7c9b      	ldrb	r3, [r3, #18]
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b4c      	ldr	r3, [pc, #304]	; (8002c78 <SX1278_config+0x1fc>)
 8002b48:	5c9b      	ldrb	r3, [r3, r2]
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	7cdb      	ldrb	r3, [r3, #19]
 8002b52:	4619      	mov	r1, r3
 8002b54:	4b49      	ldr	r3, [pc, #292]	; (8002c7c <SX1278_config+0x200>)
 8002b56:	5c5b      	ldrb	r3, [r3, r1]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002b60:	3301      	adds	r3, #1
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	211d      	movs	r1, #29
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ff23 	bl	80029b4 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	7c5b      	ldrb	r3, [r3, #17]
 8002b72:	461a      	mov	r2, r3
 8002b74:	4b3f      	ldr	r3, [pc, #252]	; (8002c74 <SX1278_config+0x1f8>)
 8002b76:	5c9b      	ldrb	r3, [r3, r2]
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	7d1b      	ldrb	r3, [r3, #20]
 8002b80:	4619      	mov	r1, r3
 8002b82:	4b3f      	ldr	r3, [pc, #252]	; (8002c80 <SX1278_config+0x204>)
 8002b84:	5c5b      	ldrb	r3, [r3, r1]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002b8e:	3303      	adds	r3, #3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	211e      	movs	r1, #30
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff ff0c 	bl	80029b4 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8002b9c:	2131      	movs	r1, #49	; 0x31
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff fee9 	bl	8002976 <SX1278_SPIRead>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	f023 0307 	bic.w	r3, r3, #7
 8002bae:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	f043 0305 	orr.w	r3, r3, #5
 8002bb6:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	2131      	movs	r1, #49	; 0x31
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff fef8 	bl	80029b4 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8002bc4:	220c      	movs	r2, #12
 8002bc6:	2137      	movs	r1, #55	; 0x37
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff fef3 	bl	80029b4 <SX1278_SPIWrite>
 8002bce:	e029      	b.n	8002c24 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	7c9b      	ldrb	r3, [r3, #18]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4b28      	ldr	r3, [pc, #160]	; (8002c78 <SX1278_config+0x1fc>)
 8002bd8:	5c9b      	ldrb	r3, [r3, r2]
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	7cdb      	ldrb	r3, [r3, #19]
 8002be2:	4619      	mov	r1, r3
 8002be4:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <SX1278_config+0x200>)
 8002be6:	5c5b      	ldrb	r3, [r3, r1]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002bec:	4413      	add	r3, r2
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	211d      	movs	r1, #29
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff fedd 	bl	80029b4 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	7c5b      	ldrb	r3, [r3, #17]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <SX1278_config+0x1f8>)
 8002c02:	5c9b      	ldrb	r3, [r3, r2]
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	7d1b      	ldrb	r3, [r3, #20]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <SX1278_config+0x204>)
 8002c10:	5c5b      	ldrb	r3, [r3, r1]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002c16:	4413      	add	r3, r2
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	211e      	movs	r1, #30
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff fec8 	bl	80029b4 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8002c24:	2204      	movs	r2, #4
 8002c26:	2126      	movs	r1, #38	; 0x26
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff fec3 	bl	80029b4 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8002c2e:	2208      	movs	r2, #8
 8002c30:	211f      	movs	r1, #31
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff febe 	bl	80029b4 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2120      	movs	r1, #32
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff feb9 	bl	80029b4 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8002c42:	2208      	movs	r2, #8
 8002c44:	2121      	movs	r1, #33	; 0x21
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff feb4 	bl	80029b4 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	2141      	movs	r1, #65	; 0x41
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff feaf 	bl	80029b4 <SX1278_SPIWrite>
	module->readBytes = 0;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f810 	bl	8002c84 <SX1278_standby>
}
 8002c64:	bf00      	nop
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	01e84800 	.word	0x01e84800
 8002c70:	08008ff8 	.word	0x08008ff8
 8002c74:	08008ffc 	.word	0x08008ffc
 8002c78:	08009004 	.word	0x08009004
 8002c7c:	08009010 	.word	0x08009010
 8002c80:	08009014 	.word	0x08009014

08002c84 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8002c8c:	2209      	movs	r2, #9
 8002c8e:	2101      	movs	r1, #1
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff fe8f 	bl	80029b4 <SX1278_SPIWrite>
	module->status = STANDBY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	759a      	strb	r2, [r3, #22]
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8002cac:	2208      	movs	r2, #8
 8002cae:	2101      	movs	r1, #1
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff fe7f 	bl	80029b4 <SX1278_SPIWrite>
	module->status = SLEEP;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	759a      	strb	r2, [r3, #22]
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8002ccc:	2288      	movs	r2, #136	; 0x88
 8002cce:	2101      	movs	r1, #1
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff fe6f 	bl	80029b4 <SX1278_SPIWrite>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8002ce6:	22ff      	movs	r2, #255	; 0xff
 8002ce8:	2112      	movs	r1, #18
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff fe62 	bl	80029b4 <SX1278_SPIWrite>
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <SX1278_LoRaEntryTx>:
		SX1278_clearLoRaIrq(module);
	}
	return module->readBytes;
}

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	460b      	mov	r3, r1
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	7afa      	ldrb	r2, [r7, #11]
 8002d0a:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff feb5 	bl	8002a7c <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8002d12:	2287      	movs	r2, #135	; 0x87
 8002d14:	214d      	movs	r1, #77	; 0x4d
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f7ff fe4c 	bl	80029b4 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2124      	movs	r1, #36	; 0x24
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f7ff fe47 	bl	80029b4 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8002d26:	2241      	movs	r2, #65	; 0x41
 8002d28:	2140      	movs	r1, #64	; 0x40
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f7ff fe42 	bl	80029b4 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f7ff ffd4 	bl	8002cde <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8002d36:	22f7      	movs	r2, #247	; 0xf7
 8002d38:	2111      	movs	r1, #17
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f7ff fe3a 	bl	80029b4 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8002d40:	7afb      	ldrb	r3, [r7, #11]
 8002d42:	461a      	mov	r2, r3
 8002d44:	2122      	movs	r1, #34	; 0x22
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f7ff fe34 	bl	80029b4 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8002d4c:	210e      	movs	r1, #14
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f7ff fe11 	bl	8002976 <SX1278_SPIRead>
 8002d54:	4603      	mov	r3, r0
 8002d56:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	210d      	movs	r1, #13
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f7ff fe28 	bl	80029b4 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8002d64:	2122      	movs	r1, #34	; 0x22
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f7ff fe05 	bl	8002976 <SX1278_SPIRead>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8002d70:	7dba      	ldrb	r2, [r7, #22]
 8002d72:	7afb      	ldrb	r3, [r7, #11]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d104      	bne.n	8002d82 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	759a      	strb	r2, [r3, #22]
			return 1;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e00e      	b.n	8002da0 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	607b      	str	r3, [r7, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1ea      	bne.n	8002d64 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe ff65 	bl	8001c62 <SX1278_hw_Reset>
			SX1278_config(module);
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f7ff fe6f 	bl	8002a7c <SX1278_config>
			return 0;
 8002d9e:	2300      	movs	r3, #0
		}
	}
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	603b      	str	r3, [r7, #0]
 8002db4:	4613      	mov	r3, r2
 8002db6:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7ff fe21 	bl	8002a06 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8002dc4:	228b      	movs	r2, #139	; 0x8b
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f7ff fdf3 	bl	80029b4 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe ffaf 	bl	8001d36 <SX1278_hw_GetDIO0>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8002dde:	2112      	movs	r1, #18
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f7ff fdc8 	bl	8002976 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f7ff ff79 	bl	8002cde <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f7ff ff49 	bl	8002c84 <SX1278_standby>
			return 1;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e013      	b.n	8002e1e <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe ff2b 	bl	8001c62 <SX1278_hw_Reset>
			SX1278_config(module);
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff fe35 	bl	8002a7c <SX1278_config>
			return 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e003      	b.n	8002e1e <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8002e16:	2001      	movs	r0, #1
 8002e18:	f7fe ff18 	bl	8001c4c <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8002e1c:	e7d7      	b.n	8002dce <SX1278_LoRaTxPacket+0x26>
	}
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <SX1278_init>:


void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe fef3 	bl	8001c22 <SX1278_hw_init>
	module->frequency = frequency;
 8002e3c:	68f9      	ldr	r1, [r7, #12]
 8002e3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e42:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	7e3a      	ldrb	r2, [r7, #24]
 8002e4a:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	7f3a      	ldrb	r2, [r7, #28]
 8002e50:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002e58:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e60:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002e68:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002e70:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f7ff fe02 	bl	8002a7c <SX1278_config>
}
 8002e78:	bf00      	nop
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return 1;
 8002e84:	2301      	movs	r3, #1
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <_kill>:

int _kill(int pid, int sig)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e98:	f003 fa42 	bl	8006320 <__errno>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2216      	movs	r2, #22
 8002ea0:	601a      	str	r2, [r3, #0]
  return -1;
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <_exit>:

void _exit (int status)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002eb6:	f04f 31ff 	mov.w	r1, #4294967295
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ffe7 	bl	8002e8e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ec0:	e7fe      	b.n	8002ec0 <_exit+0x12>

08002ec2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	e00a      	b.n	8002eea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ed4:	f3af 8000 	nop.w
 8002ed8:	4601      	mov	r1, r0
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	60ba      	str	r2, [r7, #8]
 8002ee0:	b2ca      	uxtb	r2, r1
 8002ee2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	dbf0      	blt.n	8002ed4 <_read+0x12>
  }

  return len;
 8002ef2:	687b      	ldr	r3, [r7, #4]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	e009      	b.n	8002f22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	60ba      	str	r2, [r7, #8]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	dbf1      	blt.n	8002f0e <_write+0x12>
  }
  return len;
 8002f2a:	687b      	ldr	r3, [r7, #4]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <_close>:

int _close(int file)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f5a:	605a      	str	r2, [r3, #4]
  return 0;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <_isatty>:

int _isatty(int file)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f70:	2301      	movs	r3, #1
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f9c:	4a14      	ldr	r2, [pc, #80]	; (8002ff0 <_sbrk+0x5c>)
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <_sbrk+0x60>)
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fa8:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <_sbrk+0x64>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fb0:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <_sbrk+0x64>)
 8002fb2:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <_sbrk+0x68>)
 8002fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <_sbrk+0x64>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d207      	bcs.n	8002fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fc4:	f003 f9ac 	bl	8006320 <__errno>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	220c      	movs	r2, #12
 8002fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fce:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd2:	e009      	b.n	8002fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fd4:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <_sbrk+0x64>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fda:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <_sbrk+0x64>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	4a05      	ldr	r2, [pc, #20]	; (8002ff8 <_sbrk+0x64>)
 8002fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20005000 	.word	0x20005000
 8002ff4:	00000400 	.word	0x00000400
 8002ff8:	20000654 	.word	0x20000654
 8002ffc:	200007a8 	.word	0x200007a8

08003000 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800300c:	f7ff fff8 	bl	8003000 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003010:	480b      	ldr	r0, [pc, #44]	; (8003040 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003012:	490c      	ldr	r1, [pc, #48]	; (8003044 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003014:	4a0c      	ldr	r2, [pc, #48]	; (8003048 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003018:	e002      	b.n	8003020 <LoopCopyDataInit>

0800301a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800301a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800301c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800301e:	3304      	adds	r3, #4

08003020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003024:	d3f9      	bcc.n	800301a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003026:	4a09      	ldr	r2, [pc, #36]	; (800304c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003028:	4c09      	ldr	r4, [pc, #36]	; (8003050 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800302a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800302c:	e001      	b.n	8003032 <LoopFillZerobss>

0800302e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800302e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003030:	3204      	adds	r2, #4

08003032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003034:	d3fb      	bcc.n	800302e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003036:	f003 f979 	bl	800632c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800303a:	f7ff f849 	bl	80020d0 <main>
  bx lr
 800303e:	4770      	bx	lr
  ldr r0, =_sdata
 8003040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003044:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003048:	08009438 	.word	0x08009438
  ldr r2, =_sbss
 800304c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003050:	200007a8 	.word	0x200007a8

08003054 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003054:	e7fe      	b.n	8003054 <ADC1_2_IRQHandler>
	...

08003058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_Init+0x28>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a07      	ldr	r2, [pc, #28]	; (8003080 <HAL_Init+0x28>)
 8003062:	f043 0310 	orr.w	r3, r3, #16
 8003066:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003068:	2003      	movs	r0, #3
 800306a:	f000 f92b 	bl	80032c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800306e:	200f      	movs	r0, #15
 8003070:	f000 f808 	bl	8003084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003074:	f7ff fb9c 	bl	80027b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40022000 	.word	0x40022000

08003084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800308c:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <HAL_InitTick+0x54>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b12      	ldr	r3, [pc, #72]	; (80030dc <HAL_InitTick+0x58>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	4619      	mov	r1, r3
 8003096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800309a:	fbb3 f3f1 	udiv	r3, r3, r1
 800309e:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 f935 	bl	8003312 <HAL_SYSTICK_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e00e      	b.n	80030d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b0f      	cmp	r3, #15
 80030b6:	d80a      	bhi.n	80030ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030b8:	2200      	movs	r2, #0
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
 80030c0:	f000 f90b 	bl	80032da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030c4:	4a06      	ldr	r2, [pc, #24]	; (80030e0 <HAL_InitTick+0x5c>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	e000      	b.n	80030d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000008 	.word	0x20000008
 80030dc:	20000010 	.word	0x20000010
 80030e0:	2000000c 	.word	0x2000000c

080030e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_IncTick+0x1c>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_IncTick+0x20>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4413      	add	r3, r2
 80030f4:	4a03      	ldr	r2, [pc, #12]	; (8003104 <HAL_IncTick+0x20>)
 80030f6:	6013      	str	r3, [r2, #0]
}
 80030f8:	bf00      	nop
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr
 8003100:	20000010 	.word	0x20000010
 8003104:	20000658 	.word	0x20000658

08003108 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return uwTick;
 800310c:	4b02      	ldr	r3, [pc, #8]	; (8003118 <HAL_GetTick+0x10>)
 800310e:	681b      	ldr	r3, [r3, #0]
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr
 8003118:	20000658 	.word	0x20000658

0800311c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003124:	f7ff fff0 	bl	8003108 <HAL_GetTick>
 8003128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d005      	beq.n	8003142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <HAL_Delay+0x44>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4413      	add	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003142:	bf00      	nop
 8003144:	f7ff ffe0 	bl	8003108 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	429a      	cmp	r2, r3
 8003152:	d8f7      	bhi.n	8003144 <HAL_Delay+0x28>
  {
  }
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000010 	.word	0x20000010

08003164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003180:	4013      	ands	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800318c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003196:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	60d3      	str	r3, [r2, #12]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b0:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <__NVIC_GetPriorityGrouping+0x18>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	0a1b      	lsrs	r3, r3, #8
 80031b6:	f003 0307 	and.w	r3, r3, #7
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	6039      	str	r1, [r7, #0]
 80031d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	db0a      	blt.n	80031f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	490c      	ldr	r1, [pc, #48]	; (8003214 <__NVIC_SetPriority+0x4c>)
 80031e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e6:	0112      	lsls	r2, r2, #4
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	440b      	add	r3, r1
 80031ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f0:	e00a      	b.n	8003208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	4908      	ldr	r1, [pc, #32]	; (8003218 <__NVIC_SetPriority+0x50>)
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	3b04      	subs	r3, #4
 8003200:	0112      	lsls	r2, r2, #4
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	440b      	add	r3, r1
 8003206:	761a      	strb	r2, [r3, #24]
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000e100 	.word	0xe000e100
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800321c:	b480      	push	{r7}
 800321e:	b089      	sub	sp, #36	; 0x24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f1c3 0307 	rsb	r3, r3, #7
 8003236:	2b04      	cmp	r3, #4
 8003238:	bf28      	it	cs
 800323a:	2304      	movcs	r3, #4
 800323c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	3304      	adds	r3, #4
 8003242:	2b06      	cmp	r3, #6
 8003244:	d902      	bls.n	800324c <NVIC_EncodePriority+0x30>
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3b03      	subs	r3, #3
 800324a:	e000      	b.n	800324e <NVIC_EncodePriority+0x32>
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003250:	f04f 32ff 	mov.w	r2, #4294967295
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43da      	mvns	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	401a      	ands	r2, r3
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003264:	f04f 31ff 	mov.w	r1, #4294967295
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	fa01 f303 	lsl.w	r3, r1, r3
 800326e:	43d9      	mvns	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003274:	4313      	orrs	r3, r2
         );
}
 8003276:	4618      	mov	r0, r3
 8003278:	3724      	adds	r7, #36	; 0x24
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3b01      	subs	r3, #1
 800328c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003290:	d301      	bcc.n	8003296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003292:	2301      	movs	r3, #1
 8003294:	e00f      	b.n	80032b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003296:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <SysTick_Config+0x40>)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800329e:	210f      	movs	r1, #15
 80032a0:	f04f 30ff 	mov.w	r0, #4294967295
 80032a4:	f7ff ff90 	bl	80031c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <SysTick_Config+0x40>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ae:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <SysTick_Config+0x40>)
 80032b0:	2207      	movs	r2, #7
 80032b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	e000e010 	.word	0xe000e010

080032c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ff49 	bl	8003164 <__NVIC_SetPriorityGrouping>
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032da:	b580      	push	{r7, lr}
 80032dc:	b086      	sub	sp, #24
 80032de:	af00      	add	r7, sp, #0
 80032e0:	4603      	mov	r3, r0
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032ec:	f7ff ff5e 	bl	80031ac <__NVIC_GetPriorityGrouping>
 80032f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	6978      	ldr	r0, [r7, #20]
 80032f8:	f7ff ff90 	bl	800321c <NVIC_EncodePriority>
 80032fc:	4602      	mov	r2, r0
 80032fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff5f 	bl	80031c8 <__NVIC_SetPriority>
}
 800330a:	bf00      	nop
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ffb0 	bl	8003280 <SysTick_Config>
 8003320:	4603      	mov	r3, r0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800332c:	b480      	push	{r7}
 800332e:	b08b      	sub	sp, #44	; 0x2c
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800333a:	2300      	movs	r3, #0
 800333c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800333e:	e169      	b.n	8003614 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003340:	2201      	movs	r2, #1
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	429a      	cmp	r2, r3
 800335a:	f040 8158 	bne.w	800360e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4a9a      	ldr	r2, [pc, #616]	; (80035cc <HAL_GPIO_Init+0x2a0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d05e      	beq.n	8003426 <HAL_GPIO_Init+0xfa>
 8003368:	4a98      	ldr	r2, [pc, #608]	; (80035cc <HAL_GPIO_Init+0x2a0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d875      	bhi.n	800345a <HAL_GPIO_Init+0x12e>
 800336e:	4a98      	ldr	r2, [pc, #608]	; (80035d0 <HAL_GPIO_Init+0x2a4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d058      	beq.n	8003426 <HAL_GPIO_Init+0xfa>
 8003374:	4a96      	ldr	r2, [pc, #600]	; (80035d0 <HAL_GPIO_Init+0x2a4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d86f      	bhi.n	800345a <HAL_GPIO_Init+0x12e>
 800337a:	4a96      	ldr	r2, [pc, #600]	; (80035d4 <HAL_GPIO_Init+0x2a8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d052      	beq.n	8003426 <HAL_GPIO_Init+0xfa>
 8003380:	4a94      	ldr	r2, [pc, #592]	; (80035d4 <HAL_GPIO_Init+0x2a8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d869      	bhi.n	800345a <HAL_GPIO_Init+0x12e>
 8003386:	4a94      	ldr	r2, [pc, #592]	; (80035d8 <HAL_GPIO_Init+0x2ac>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d04c      	beq.n	8003426 <HAL_GPIO_Init+0xfa>
 800338c:	4a92      	ldr	r2, [pc, #584]	; (80035d8 <HAL_GPIO_Init+0x2ac>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d863      	bhi.n	800345a <HAL_GPIO_Init+0x12e>
 8003392:	4a92      	ldr	r2, [pc, #584]	; (80035dc <HAL_GPIO_Init+0x2b0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d046      	beq.n	8003426 <HAL_GPIO_Init+0xfa>
 8003398:	4a90      	ldr	r2, [pc, #576]	; (80035dc <HAL_GPIO_Init+0x2b0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d85d      	bhi.n	800345a <HAL_GPIO_Init+0x12e>
 800339e:	2b12      	cmp	r3, #18
 80033a0:	d82a      	bhi.n	80033f8 <HAL_GPIO_Init+0xcc>
 80033a2:	2b12      	cmp	r3, #18
 80033a4:	d859      	bhi.n	800345a <HAL_GPIO_Init+0x12e>
 80033a6:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <HAL_GPIO_Init+0x80>)
 80033a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ac:	08003427 	.word	0x08003427
 80033b0:	08003401 	.word	0x08003401
 80033b4:	08003413 	.word	0x08003413
 80033b8:	08003455 	.word	0x08003455
 80033bc:	0800345b 	.word	0x0800345b
 80033c0:	0800345b 	.word	0x0800345b
 80033c4:	0800345b 	.word	0x0800345b
 80033c8:	0800345b 	.word	0x0800345b
 80033cc:	0800345b 	.word	0x0800345b
 80033d0:	0800345b 	.word	0x0800345b
 80033d4:	0800345b 	.word	0x0800345b
 80033d8:	0800345b 	.word	0x0800345b
 80033dc:	0800345b 	.word	0x0800345b
 80033e0:	0800345b 	.word	0x0800345b
 80033e4:	0800345b 	.word	0x0800345b
 80033e8:	0800345b 	.word	0x0800345b
 80033ec:	0800345b 	.word	0x0800345b
 80033f0:	08003409 	.word	0x08003409
 80033f4:	0800341d 	.word	0x0800341d
 80033f8:	4a79      	ldr	r2, [pc, #484]	; (80035e0 <HAL_GPIO_Init+0x2b4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033fe:	e02c      	b.n	800345a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	623b      	str	r3, [r7, #32]
          break;
 8003406:	e029      	b.n	800345c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	3304      	adds	r3, #4
 800340e:	623b      	str	r3, [r7, #32]
          break;
 8003410:	e024      	b.n	800345c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	3308      	adds	r3, #8
 8003418:	623b      	str	r3, [r7, #32]
          break;
 800341a:	e01f      	b.n	800345c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	330c      	adds	r3, #12
 8003422:	623b      	str	r3, [r7, #32]
          break;
 8003424:	e01a      	b.n	800345c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d102      	bne.n	8003434 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800342e:	2304      	movs	r3, #4
 8003430:	623b      	str	r3, [r7, #32]
          break;
 8003432:	e013      	b.n	800345c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800343c:	2308      	movs	r3, #8
 800343e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	611a      	str	r2, [r3, #16]
          break;
 8003446:	e009      	b.n	800345c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003448:	2308      	movs	r3, #8
 800344a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	615a      	str	r2, [r3, #20]
          break;
 8003452:	e003      	b.n	800345c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003454:	2300      	movs	r3, #0
 8003456:	623b      	str	r3, [r7, #32]
          break;
 8003458:	e000      	b.n	800345c <HAL_GPIO_Init+0x130>
          break;
 800345a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	2bff      	cmp	r3, #255	; 0xff
 8003460:	d801      	bhi.n	8003466 <HAL_GPIO_Init+0x13a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	e001      	b.n	800346a <HAL_GPIO_Init+0x13e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3304      	adds	r3, #4
 800346a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2bff      	cmp	r3, #255	; 0xff
 8003470:	d802      	bhi.n	8003478 <HAL_GPIO_Init+0x14c>
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	e002      	b.n	800347e <HAL_GPIO_Init+0x152>
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	3b08      	subs	r3, #8
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	210f      	movs	r1, #15
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	fa01 f303 	lsl.w	r3, r1, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	401a      	ands	r2, r3
 8003490:	6a39      	ldr	r1, [r7, #32]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	fa01 f303 	lsl.w	r3, r1, r3
 8003498:	431a      	orrs	r2, r3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80b1 	beq.w	800360e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034ac:	4b4d      	ldr	r3, [pc, #308]	; (80035e4 <HAL_GPIO_Init+0x2b8>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	4a4c      	ldr	r2, [pc, #304]	; (80035e4 <HAL_GPIO_Init+0x2b8>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6193      	str	r3, [r2, #24]
 80034b8:	4b4a      	ldr	r3, [pc, #296]	; (80035e4 <HAL_GPIO_Init+0x2b8>)
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034c4:	4a48      	ldr	r2, [pc, #288]	; (80035e8 <HAL_GPIO_Init+0x2bc>)
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	089b      	lsrs	r3, r3, #2
 80034ca:	3302      	adds	r3, #2
 80034cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	220f      	movs	r2, #15
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4013      	ands	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a40      	ldr	r2, [pc, #256]	; (80035ec <HAL_GPIO_Init+0x2c0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d013      	beq.n	8003518 <HAL_GPIO_Init+0x1ec>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a3f      	ldr	r2, [pc, #252]	; (80035f0 <HAL_GPIO_Init+0x2c4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00d      	beq.n	8003514 <HAL_GPIO_Init+0x1e8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a3e      	ldr	r2, [pc, #248]	; (80035f4 <HAL_GPIO_Init+0x2c8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d007      	beq.n	8003510 <HAL_GPIO_Init+0x1e4>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a3d      	ldr	r2, [pc, #244]	; (80035f8 <HAL_GPIO_Init+0x2cc>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d101      	bne.n	800350c <HAL_GPIO_Init+0x1e0>
 8003508:	2303      	movs	r3, #3
 800350a:	e006      	b.n	800351a <HAL_GPIO_Init+0x1ee>
 800350c:	2304      	movs	r3, #4
 800350e:	e004      	b.n	800351a <HAL_GPIO_Init+0x1ee>
 8003510:	2302      	movs	r3, #2
 8003512:	e002      	b.n	800351a <HAL_GPIO_Init+0x1ee>
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <HAL_GPIO_Init+0x1ee>
 8003518:	2300      	movs	r3, #0
 800351a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351c:	f002 0203 	and.w	r2, r2, #3
 8003520:	0092      	lsls	r2, r2, #2
 8003522:	4093      	lsls	r3, r2
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800352a:	492f      	ldr	r1, [pc, #188]	; (80035e8 <HAL_GPIO_Init+0x2bc>)
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	3302      	adds	r3, #2
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d006      	beq.n	8003552 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003544:	4b2d      	ldr	r3, [pc, #180]	; (80035fc <HAL_GPIO_Init+0x2d0>)
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	492c      	ldr	r1, [pc, #176]	; (80035fc <HAL_GPIO_Init+0x2d0>)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	4313      	orrs	r3, r2
 800354e:	608b      	str	r3, [r1, #8]
 8003550:	e006      	b.n	8003560 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003552:	4b2a      	ldr	r3, [pc, #168]	; (80035fc <HAL_GPIO_Init+0x2d0>)
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	43db      	mvns	r3, r3
 800355a:	4928      	ldr	r1, [pc, #160]	; (80035fc <HAL_GPIO_Init+0x2d0>)
 800355c:	4013      	ands	r3, r2
 800355e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d006      	beq.n	800357a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800356c:	4b23      	ldr	r3, [pc, #140]	; (80035fc <HAL_GPIO_Init+0x2d0>)
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	4922      	ldr	r1, [pc, #136]	; (80035fc <HAL_GPIO_Init+0x2d0>)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	4313      	orrs	r3, r2
 8003576:	60cb      	str	r3, [r1, #12]
 8003578:	e006      	b.n	8003588 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800357a:	4b20      	ldr	r3, [pc, #128]	; (80035fc <HAL_GPIO_Init+0x2d0>)
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	43db      	mvns	r3, r3
 8003582:	491e      	ldr	r1, [pc, #120]	; (80035fc <HAL_GPIO_Init+0x2d0>)
 8003584:	4013      	ands	r3, r2
 8003586:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d006      	beq.n	80035a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003594:	4b19      	ldr	r3, [pc, #100]	; (80035fc <HAL_GPIO_Init+0x2d0>)
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	4918      	ldr	r1, [pc, #96]	; (80035fc <HAL_GPIO_Init+0x2d0>)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]
 80035a0:	e006      	b.n	80035b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035a2:	4b16      	ldr	r3, [pc, #88]	; (80035fc <HAL_GPIO_Init+0x2d0>)
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	4914      	ldr	r1, [pc, #80]	; (80035fc <HAL_GPIO_Init+0x2d0>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d021      	beq.n	8003600 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <HAL_GPIO_Init+0x2d0>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	490e      	ldr	r1, [pc, #56]	; (80035fc <HAL_GPIO_Init+0x2d0>)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	600b      	str	r3, [r1, #0]
 80035c8:	e021      	b.n	800360e <HAL_GPIO_Init+0x2e2>
 80035ca:	bf00      	nop
 80035cc:	10320000 	.word	0x10320000
 80035d0:	10310000 	.word	0x10310000
 80035d4:	10220000 	.word	0x10220000
 80035d8:	10210000 	.word	0x10210000
 80035dc:	10120000 	.word	0x10120000
 80035e0:	10110000 	.word	0x10110000
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40010000 	.word	0x40010000
 80035ec:	40010800 	.word	0x40010800
 80035f0:	40010c00 	.word	0x40010c00
 80035f4:	40011000 	.word	0x40011000
 80035f8:	40011400 	.word	0x40011400
 80035fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_GPIO_Init+0x304>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	43db      	mvns	r3, r3
 8003608:	4909      	ldr	r1, [pc, #36]	; (8003630 <HAL_GPIO_Init+0x304>)
 800360a:	4013      	ands	r3, r2
 800360c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	3301      	adds	r3, #1
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	fa22 f303 	lsr.w	r3, r2, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	f47f ae8e 	bne.w	8003340 <HAL_GPIO_Init+0x14>
  }
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	372c      	adds	r7, #44	; 0x2c
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	40010400 	.word	0x40010400

08003634 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	887b      	ldrh	r3, [r7, #2]
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
 8003650:	e001      	b.n	8003656 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003652:	2300      	movs	r3, #0
 8003654:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003656:	7bfb      	ldrb	r3, [r7, #15]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	460b      	mov	r3, r1
 800366c:	807b      	strh	r3, [r7, #2]
 800366e:	4613      	mov	r3, r2
 8003670:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003672:	787b      	ldrb	r3, [r7, #1]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003678:	887a      	ldrh	r2, [r7, #2]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800367e:	e003      	b.n	8003688 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003680:	887b      	ldrh	r3, [r7, #2]
 8003682:	041a      	lsls	r2, r3, #16
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	611a      	str	r2, [r3, #16]
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr
	...

08003694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e12b      	b.n	80038fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff f8aa 	bl	8002814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2224      	movs	r2, #36	; 0x24
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0201 	bic.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036f8:	f001 fbe0 	bl	8004ebc <HAL_RCC_GetPCLK1Freq>
 80036fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4a81      	ldr	r2, [pc, #516]	; (8003908 <HAL_I2C_Init+0x274>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d807      	bhi.n	8003718 <HAL_I2C_Init+0x84>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a80      	ldr	r2, [pc, #512]	; (800390c <HAL_I2C_Init+0x278>)
 800370c:	4293      	cmp	r3, r2
 800370e:	bf94      	ite	ls
 8003710:	2301      	movls	r3, #1
 8003712:	2300      	movhi	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	e006      	b.n	8003726 <HAL_I2C_Init+0x92>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4a7d      	ldr	r2, [pc, #500]	; (8003910 <HAL_I2C_Init+0x27c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	bf94      	ite	ls
 8003720:	2301      	movls	r3, #1
 8003722:	2300      	movhi	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e0e7      	b.n	80038fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4a78      	ldr	r2, [pc, #480]	; (8003914 <HAL_I2C_Init+0x280>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	0c9b      	lsrs	r3, r3, #18
 8003738:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a6a      	ldr	r2, [pc, #424]	; (8003908 <HAL_I2C_Init+0x274>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d802      	bhi.n	8003768 <HAL_I2C_Init+0xd4>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	3301      	adds	r3, #1
 8003766:	e009      	b.n	800377c <HAL_I2C_Init+0xe8>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	4a69      	ldr	r2, [pc, #420]	; (8003918 <HAL_I2C_Init+0x284>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	099b      	lsrs	r3, r3, #6
 800377a:	3301      	adds	r3, #1
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	430b      	orrs	r3, r1
 8003782:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800378e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	495c      	ldr	r1, [pc, #368]	; (8003908 <HAL_I2C_Init+0x274>)
 8003798:	428b      	cmp	r3, r1
 800379a:	d819      	bhi.n	80037d0 <HAL_I2C_Init+0x13c>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1e59      	subs	r1, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037aa:	1c59      	adds	r1, r3, #1
 80037ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037b0:	400b      	ands	r3, r1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_I2C_Init+0x138>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1e59      	subs	r1, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037c4:	3301      	adds	r3, #1
 80037c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ca:	e051      	b.n	8003870 <HAL_I2C_Init+0x1dc>
 80037cc:	2304      	movs	r3, #4
 80037ce:	e04f      	b.n	8003870 <HAL_I2C_Init+0x1dc>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d111      	bne.n	80037fc <HAL_I2C_Init+0x168>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1e58      	subs	r0, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	440b      	add	r3, r1
 80037e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ea:	3301      	adds	r3, #1
 80037ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e012      	b.n	8003822 <HAL_I2C_Init+0x18e>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1e58      	subs	r0, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6859      	ldr	r1, [r3, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	0099      	lsls	r1, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003812:	3301      	adds	r3, #1
 8003814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003818:	2b00      	cmp	r3, #0
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_I2C_Init+0x196>
 8003826:	2301      	movs	r3, #1
 8003828:	e022      	b.n	8003870 <HAL_I2C_Init+0x1dc>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10e      	bne.n	8003850 <HAL_I2C_Init+0x1bc>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1e58      	subs	r0, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6859      	ldr	r1, [r3, #4]
 800383a:	460b      	mov	r3, r1
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	440b      	add	r3, r1
 8003840:	fbb0 f3f3 	udiv	r3, r0, r3
 8003844:	3301      	adds	r3, #1
 8003846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800384e:	e00f      	b.n	8003870 <HAL_I2C_Init+0x1dc>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1e58      	subs	r0, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	0099      	lsls	r1, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	fbb0 f3f3 	udiv	r3, r0, r3
 8003866:	3301      	adds	r3, #1
 8003868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	6809      	ldr	r1, [r1, #0]
 8003874:	4313      	orrs	r3, r2
 8003876:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69da      	ldr	r2, [r3, #28]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800389e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6911      	ldr	r1, [r2, #16]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	68d2      	ldr	r2, [r2, #12]
 80038aa:	4311      	orrs	r1, r2
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	430b      	orrs	r3, r1
 80038b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	000186a0 	.word	0x000186a0
 800390c:	001e847f 	.word	0x001e847f
 8003910:	003d08ff 	.word	0x003d08ff
 8003914:	431bde83 	.word	0x431bde83
 8003918:	10624dd3 	.word	0x10624dd3

0800391c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	461a      	mov	r2, r3
 8003928:	460b      	mov	r3, r1
 800392a:	817b      	strh	r3, [r7, #10]
 800392c:	4613      	mov	r3, r2
 800392e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003930:	f7ff fbea 	bl	8003108 <HAL_GetTick>
 8003934:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b20      	cmp	r3, #32
 8003940:	f040 80e0 	bne.w	8003b04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2319      	movs	r3, #25
 800394a:	2201      	movs	r2, #1
 800394c:	4970      	ldr	r1, [pc, #448]	; (8003b10 <HAL_I2C_Master_Transmit+0x1f4>)
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fcb4 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
 800395c:	e0d3      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_I2C_Master_Transmit+0x50>
 8003968:	2302      	movs	r3, #2
 800396a:	e0cc      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d007      	beq.n	8003992 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0201 	orr.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2221      	movs	r2, #33	; 0x21
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2210      	movs	r2, #16
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	893a      	ldrh	r2, [r7, #8]
 80039c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4a50      	ldr	r2, [pc, #320]	; (8003b14 <HAL_I2C_Master_Transmit+0x1f8>)
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039d4:	8979      	ldrh	r1, [r7, #10]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	6a3a      	ldr	r2, [r7, #32]
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 fb04 	bl	8003fe8 <I2C_MasterRequestWrite>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e08d      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a00:	e066      	b.n	8003ad0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	6a39      	ldr	r1, [r7, #32]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 fd72 	bl	80044f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d107      	bne.n	8003a2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e06b      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	781a      	ldrb	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d11b      	bne.n	8003aa4 <HAL_I2C_Master_Transmit+0x188>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d017      	beq.n	8003aa4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	781a      	ldrb	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	6a39      	ldr	r1, [r7, #32]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fd69 	bl	8004580 <I2C_WaitOnBTFFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00d      	beq.n	8003ad0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d107      	bne.n	8003acc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e01a      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d194      	bne.n	8003a02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	e000      	b.n	8003b06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
  }
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	00100002 	.word	0x00100002
 8003b14:	ffff0000 	.word	0xffff0000

08003b18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08c      	sub	sp, #48	; 0x30
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	4608      	mov	r0, r1
 8003b22:	4611      	mov	r1, r2
 8003b24:	461a      	mov	r2, r3
 8003b26:	4603      	mov	r3, r0
 8003b28:	817b      	strh	r3, [r7, #10]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	813b      	strh	r3, [r7, #8]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b36:	f7ff fae7 	bl	8003108 <HAL_GetTick>
 8003b3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b20      	cmp	r3, #32
 8003b46:	f040 8244 	bne.w	8003fd2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	2319      	movs	r3, #25
 8003b50:	2201      	movs	r2, #1
 8003b52:	4982      	ldr	r1, [pc, #520]	; (8003d5c <HAL_I2C_Mem_Read+0x244>)
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fbb1 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003b60:	2302      	movs	r3, #2
 8003b62:	e237      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_I2C_Mem_Read+0x5a>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e230      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x4bc>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d007      	beq.n	8003b98 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2222      	movs	r2, #34	; 0x22
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2240      	movs	r2, #64	; 0x40
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4a62      	ldr	r2, [pc, #392]	; (8003d60 <HAL_I2C_Mem_Read+0x248>)
 8003bd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bda:	88f8      	ldrh	r0, [r7, #6]
 8003bdc:	893a      	ldrh	r2, [r7, #8]
 8003bde:	8979      	ldrh	r1, [r7, #10]
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	4603      	mov	r3, r0
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 fa7e 	bl	80040ec <I2C_RequestMemoryRead>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e1ec      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d113      	bne.n	8003c2a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e1c0      	b.n	8003fac <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d11e      	bne.n	8003c70 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c42:	b672      	cpsid	i
}
 8003c44:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c46:	2300      	movs	r3, #0
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c6c:	b662      	cpsie	i
}
 8003c6e:	e035      	b.n	8003cdc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d11e      	bne.n	8003cb6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c88:	b672      	cpsid	i
}
 8003c8a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003cb2:	b662      	cpsie	i
}
 8003cb4:	e012      	b.n	8003cdc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cc4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003cdc:	e166      	b.n	8003fac <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	f200 811f 	bhi.w	8003f26 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d123      	bne.n	8003d38 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fc8b 	bl	8004610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e167      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d36:	e139      	b.n	8003fac <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d152      	bne.n	8003de6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	2200      	movs	r2, #0
 8003d48:	4906      	ldr	r1, [pc, #24]	; (8003d64 <HAL_I2C_Mem_Read+0x24c>)
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 fab6 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e13c      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x4bc>
 8003d5a:	bf00      	nop
 8003d5c:	00100002 	.word	0x00100002
 8003d60:	ffff0000 	.word	0xffff0000
 8003d64:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003d68:	b672      	cpsid	i
}
 8003d6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003dae:	b662      	cpsie	i
}
 8003db0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003de4:	e0e2      	b.n	8003fac <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	2200      	movs	r2, #0
 8003dee:	497b      	ldr	r1, [pc, #492]	; (8003fdc <HAL_I2C_Mem_Read+0x4c4>)
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 fa63 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0e9      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e10:	b672      	cpsid	i
}
 8003e12:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e46:	4b66      	ldr	r3, [pc, #408]	; (8003fe0 <HAL_I2C_Mem_Read+0x4c8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	08db      	lsrs	r3, r3, #3
 8003e4c:	4a65      	ldr	r2, [pc, #404]	; (8003fe4 <HAL_I2C_Mem_Read+0x4cc>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	0a1a      	lsrs	r2, r3, #8
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	00da      	lsls	r2, r3, #3
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d118      	bne.n	8003e9e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f043 0220 	orr.w	r2, r3, #32
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003e8e:	b662      	cpsie	i
}
 8003e90:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e09a      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d1d9      	bne.n	8003e60 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691a      	ldr	r2, [r3, #16]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003eee:	b662      	cpsie	i
}
 8003ef0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f24:	e042      	b.n	8003fac <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 fb70 	bl	8004610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e04c      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d118      	bne.n	8003fac <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f47f ae94 	bne.w	8003cde <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e000      	b.n	8003fd4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003fd2:	2302      	movs	r3, #2
  }
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3728      	adds	r7, #40	; 0x28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	00010004 	.word	0x00010004
 8003fe0:	20000008 	.word	0x20000008
 8003fe4:	14f8b589 	.word	0x14f8b589

08003fe8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b08      	cmp	r3, #8
 8004002:	d006      	beq.n	8004012 <I2C_MasterRequestWrite+0x2a>
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d003      	beq.n	8004012 <I2C_MasterRequestWrite+0x2a>
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004010:	d108      	bne.n	8004024 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e00b      	b.n	800403c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	2b12      	cmp	r3, #18
 800402a:	d107      	bne.n	800403c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800403a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 f937 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00d      	beq.n	8004070 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004062:	d103      	bne.n	800406c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800406a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e035      	b.n	80040dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004078:	d108      	bne.n	800408c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800407a:	897b      	ldrh	r3, [r7, #10]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004088:	611a      	str	r2, [r3, #16]
 800408a:	e01b      	b.n	80040c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800408c:	897b      	ldrh	r3, [r7, #10]
 800408e:	11db      	asrs	r3, r3, #7
 8004090:	b2db      	uxtb	r3, r3
 8004092:	f003 0306 	and.w	r3, r3, #6
 8004096:	b2db      	uxtb	r3, r3
 8004098:	f063 030f 	orn	r3, r3, #15
 800409c:	b2da      	uxtb	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	490e      	ldr	r1, [pc, #56]	; (80040e4 <I2C_MasterRequestWrite+0xfc>)
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f980 	bl	80043b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e010      	b.n	80040dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040ba:	897b      	ldrh	r3, [r7, #10]
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	4907      	ldr	r1, [pc, #28]	; (80040e8 <I2C_MasterRequestWrite+0x100>)
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f970 	bl	80043b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	00010008 	.word	0x00010008
 80040e8:	00010002 	.word	0x00010002

080040ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	4608      	mov	r0, r1
 80040f6:	4611      	mov	r1, r2
 80040f8:	461a      	mov	r2, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	817b      	strh	r3, [r7, #10]
 80040fe:	460b      	mov	r3, r1
 8004100:	813b      	strh	r3, [r7, #8]
 8004102:	4613      	mov	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004114:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004124:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	2200      	movs	r2, #0
 800412e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f8c2 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00d      	beq.n	800415a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800414c:	d103      	bne.n	8004156 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004154:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e0aa      	b.n	80042b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800415a:	897b      	ldrh	r3, [r7, #10]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004168:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	6a3a      	ldr	r2, [r7, #32]
 800416e:	4952      	ldr	r1, [pc, #328]	; (80042b8 <I2C_RequestMemoryRead+0x1cc>)
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f91d 	bl	80043b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e097      	b.n	80042b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004198:	6a39      	ldr	r1, [r7, #32]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f9a8 	bl	80044f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00d      	beq.n	80041c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d107      	bne.n	80041be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e076      	b.n	80042b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d105      	bne.n	80041d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041c8:	893b      	ldrh	r3, [r7, #8]
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	611a      	str	r2, [r3, #16]
 80041d2:	e021      	b.n	8004218 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041d4:	893b      	ldrh	r3, [r7, #8]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	b29b      	uxth	r3, r3
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e4:	6a39      	ldr	r1, [r7, #32]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f982 	bl	80044f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00d      	beq.n	800420e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d107      	bne.n	800420a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004208:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e050      	b.n	80042b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800420e:	893b      	ldrh	r3, [r7, #8]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421a:	6a39      	ldr	r1, [r7, #32]
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f967 	bl	80044f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	2b04      	cmp	r3, #4
 800422e:	d107      	bne.n	8004240 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800423e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e035      	b.n	80042b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004252:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	2200      	movs	r2, #0
 800425c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f82b 	bl	80042bc <I2C_WaitOnFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00d      	beq.n	8004288 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800427a:	d103      	bne.n	8004284 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004282:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e013      	b.n	80042b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004288:	897b      	ldrh	r3, [r7, #10]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	b2da      	uxtb	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	6a3a      	ldr	r2, [r7, #32]
 800429c:	4906      	ldr	r1, [pc, #24]	; (80042b8 <I2C_RequestMemoryRead+0x1cc>)
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f886 	bl	80043b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	00010002 	.word	0x00010002

080042bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	4613      	mov	r3, r2
 80042ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042cc:	e048      	b.n	8004360 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d4:	d044      	beq.n	8004360 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d6:	f7fe ff17 	bl	8003108 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d302      	bcc.n	80042ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d139      	bne.n	8004360 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	0c1b      	lsrs	r3, r3, #16
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d10d      	bne.n	8004312 <I2C_WaitOnFlagUntilTimeout+0x56>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	43da      	mvns	r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4013      	ands	r3, r2
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf0c      	ite	eq
 8004308:	2301      	moveq	r3, #1
 800430a:	2300      	movne	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	e00c      	b.n	800432c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	43da      	mvns	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	4013      	ands	r3, r2
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	bf0c      	ite	eq
 8004324:	2301      	moveq	r3, #1
 8004326:	2300      	movne	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	429a      	cmp	r2, r3
 8004330:	d116      	bne.n	8004360 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	f043 0220 	orr.w	r2, r3, #32
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e023      	b.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	0c1b      	lsrs	r3, r3, #16
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	d10d      	bne.n	8004386 <I2C_WaitOnFlagUntilTimeout+0xca>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	43da      	mvns	r2, r3
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	4013      	ands	r3, r2
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	bf0c      	ite	eq
 800437c:	2301      	moveq	r3, #1
 800437e:	2300      	movne	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	461a      	mov	r2, r3
 8004384:	e00c      	b.n	80043a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	43da      	mvns	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4013      	ands	r3, r2
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf0c      	ite	eq
 8004398:	2301      	moveq	r3, #1
 800439a:	2300      	movne	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	461a      	mov	r2, r3
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d093      	beq.n	80042ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043be:	e071      	b.n	80044a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ce:	d123      	bne.n	8004418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	f043 0204 	orr.w	r2, r3, #4
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e067      	b.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441e:	d041      	beq.n	80044a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004420:	f7fe fe72 	bl	8003108 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	429a      	cmp	r2, r3
 800442e:	d302      	bcc.n	8004436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d136      	bne.n	80044a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	0c1b      	lsrs	r3, r3, #16
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	d10c      	bne.n	800445a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	43da      	mvns	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4013      	ands	r3, r2
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	bf14      	ite	ne
 8004452:	2301      	movne	r3, #1
 8004454:	2300      	moveq	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	e00b      	b.n	8004472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	43da      	mvns	r2, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4013      	ands	r3, r2
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	f043 0220 	orr.w	r2, r3, #32
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e021      	b.n	80044e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	0c1b      	lsrs	r3, r3, #16
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d10c      	bne.n	80044c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	43da      	mvns	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4013      	ands	r3, r2
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	bf14      	ite	ne
 80044c0:	2301      	movne	r3, #1
 80044c2:	2300      	moveq	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	e00b      	b.n	80044e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	43da      	mvns	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4013      	ands	r3, r2
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	bf14      	ite	ne
 80044da:	2301      	movne	r3, #1
 80044dc:	2300      	moveq	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f47f af6d 	bne.w	80043c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044fc:	e034      	b.n	8004568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f8e3 	bl	80046ca <I2C_IsAcknowledgeFailed>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e034      	b.n	8004578 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004514:	d028      	beq.n	8004568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004516:	f7fe fdf7 	bl	8003108 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	429a      	cmp	r2, r3
 8004524:	d302      	bcc.n	800452c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d11d      	bne.n	8004568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004536:	2b80      	cmp	r3, #128	; 0x80
 8004538:	d016      	beq.n	8004568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	f043 0220 	orr.w	r2, r3, #32
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e007      	b.n	8004578 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004572:	2b80      	cmp	r3, #128	; 0x80
 8004574:	d1c3      	bne.n	80044fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800458c:	e034      	b.n	80045f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f89b 	bl	80046ca <I2C_IsAcknowledgeFailed>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e034      	b.n	8004608 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a4:	d028      	beq.n	80045f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a6:	f7fe fdaf 	bl	8003108 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d302      	bcc.n	80045bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d11d      	bne.n	80045f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d016      	beq.n	80045f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	f043 0220 	orr.w	r2, r3, #32
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e007      	b.n	8004608 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b04      	cmp	r3, #4
 8004604:	d1c3      	bne.n	800458e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800461c:	e049      	b.n	80046b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	2b10      	cmp	r3, #16
 800462a:	d119      	bne.n	8004660 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0210 	mvn.w	r2, #16
 8004634:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e030      	b.n	80046c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004660:	f7fe fd52 	bl	8003108 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	429a      	cmp	r2, r3
 800466e:	d302      	bcc.n	8004676 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d11d      	bne.n	80046b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	d016      	beq.n	80046b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f043 0220 	orr.w	r2, r3, #32
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e007      	b.n	80046c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046bc:	2b40      	cmp	r3, #64	; 0x40
 80046be:	d1ae      	bne.n	800461e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e0:	d11b      	bne.n	800471a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f043 0204 	orr.w	r2, r3, #4
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr
	...

08004728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e272      	b.n	8004c20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8087 	beq.w	8004856 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004748:	4b92      	ldr	r3, [pc, #584]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 030c 	and.w	r3, r3, #12
 8004750:	2b04      	cmp	r3, #4
 8004752:	d00c      	beq.n	800476e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004754:	4b8f      	ldr	r3, [pc, #572]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 030c 	and.w	r3, r3, #12
 800475c:	2b08      	cmp	r3, #8
 800475e:	d112      	bne.n	8004786 <HAL_RCC_OscConfig+0x5e>
 8004760:	4b8c      	ldr	r3, [pc, #560]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476c:	d10b      	bne.n	8004786 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476e:	4b89      	ldr	r3, [pc, #548]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d06c      	beq.n	8004854 <HAL_RCC_OscConfig+0x12c>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d168      	bne.n	8004854 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e24c      	b.n	8004c20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478e:	d106      	bne.n	800479e <HAL_RCC_OscConfig+0x76>
 8004790:	4b80      	ldr	r3, [pc, #512]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a7f      	ldr	r2, [pc, #508]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 8004796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	e02e      	b.n	80047fc <HAL_RCC_OscConfig+0xd4>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x98>
 80047a6:	4b7b      	ldr	r3, [pc, #492]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a7a      	ldr	r2, [pc, #488]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 80047ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	4b78      	ldr	r3, [pc, #480]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a77      	ldr	r2, [pc, #476]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 80047b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	e01d      	b.n	80047fc <HAL_RCC_OscConfig+0xd4>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCC_OscConfig+0xbc>
 80047ca:	4b72      	ldr	r3, [pc, #456]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a71      	ldr	r2, [pc, #452]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 80047d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	4b6f      	ldr	r3, [pc, #444]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a6e      	ldr	r2, [pc, #440]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 80047dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	e00b      	b.n	80047fc <HAL_RCC_OscConfig+0xd4>
 80047e4:	4b6b      	ldr	r3, [pc, #428]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a6a      	ldr	r2, [pc, #424]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 80047ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	4b68      	ldr	r3, [pc, #416]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a67      	ldr	r2, [pc, #412]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 80047f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d013      	beq.n	800482c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004804:	f7fe fc80 	bl	8003108 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800480c:	f7fe fc7c 	bl	8003108 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	; 0x64
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e200      	b.n	8004c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481e:	4b5d      	ldr	r3, [pc, #372]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0xe4>
 800482a:	e014      	b.n	8004856 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482c:	f7fe fc6c 	bl	8003108 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004834:	f7fe fc68 	bl	8003108 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b64      	cmp	r3, #100	; 0x64
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e1ec      	b.n	8004c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004846:	4b53      	ldr	r3, [pc, #332]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0x10c>
 8004852:	e000      	b.n	8004856 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d063      	beq.n	800492a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004862:	4b4c      	ldr	r3, [pc, #304]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f003 030c 	and.w	r3, r3, #12
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00b      	beq.n	8004886 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800486e:	4b49      	ldr	r3, [pc, #292]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 030c 	and.w	r3, r3, #12
 8004876:	2b08      	cmp	r3, #8
 8004878:	d11c      	bne.n	80048b4 <HAL_RCC_OscConfig+0x18c>
 800487a:	4b46      	ldr	r3, [pc, #280]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d116      	bne.n	80048b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004886:	4b43      	ldr	r3, [pc, #268]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d005      	beq.n	800489e <HAL_RCC_OscConfig+0x176>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d001      	beq.n	800489e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e1c0      	b.n	8004c20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489e:	4b3d      	ldr	r3, [pc, #244]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	4939      	ldr	r1, [pc, #228]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b2:	e03a      	b.n	800492a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d020      	beq.n	80048fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048bc:	4b36      	ldr	r3, [pc, #216]	; (8004998 <HAL_RCC_OscConfig+0x270>)
 80048be:	2201      	movs	r2, #1
 80048c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c2:	f7fe fc21 	bl	8003108 <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ca:	f7fe fc1d 	bl	8003108 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e1a1      	b.n	8004c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048dc:	4b2d      	ldr	r3, [pc, #180]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0f0      	beq.n	80048ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e8:	4b2a      	ldr	r3, [pc, #168]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	4927      	ldr	r1, [pc, #156]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	600b      	str	r3, [r1, #0]
 80048fc:	e015      	b.n	800492a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048fe:	4b26      	ldr	r3, [pc, #152]	; (8004998 <HAL_RCC_OscConfig+0x270>)
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004904:	f7fe fc00 	bl	8003108 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800490c:	f7fe fbfc 	bl	8003108 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e180      	b.n	8004c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800491e:	4b1d      	ldr	r3, [pc, #116]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d03a      	beq.n	80049ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d019      	beq.n	8004972 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800493e:	4b17      	ldr	r3, [pc, #92]	; (800499c <HAL_RCC_OscConfig+0x274>)
 8004940:	2201      	movs	r2, #1
 8004942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004944:	f7fe fbe0 	bl	8003108 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800494c:	f7fe fbdc 	bl	8003108 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e160      	b.n	8004c20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495e:	4b0d      	ldr	r3, [pc, #52]	; (8004994 <HAL_RCC_OscConfig+0x26c>)
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800496a:	2001      	movs	r0, #1
 800496c:	f000 faba 	bl	8004ee4 <RCC_Delay>
 8004970:	e01c      	b.n	80049ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004972:	4b0a      	ldr	r3, [pc, #40]	; (800499c <HAL_RCC_OscConfig+0x274>)
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004978:	f7fe fbc6 	bl	8003108 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800497e:	e00f      	b.n	80049a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004980:	f7fe fbc2 	bl	8003108 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d908      	bls.n	80049a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e146      	b.n	8004c20 <HAL_RCC_OscConfig+0x4f8>
 8004992:	bf00      	nop
 8004994:	40021000 	.word	0x40021000
 8004998:	42420000 	.word	0x42420000
 800499c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a0:	4b92      	ldr	r3, [pc, #584]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e9      	bne.n	8004980 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80a6 	beq.w	8004b06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ba:	2300      	movs	r3, #0
 80049bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049be:	4b8b      	ldr	r3, [pc, #556]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10d      	bne.n	80049e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ca:	4b88      	ldr	r3, [pc, #544]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	4a87      	ldr	r2, [pc, #540]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 80049d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d4:	61d3      	str	r3, [r2, #28]
 80049d6:	4b85      	ldr	r3, [pc, #532]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049de:	60bb      	str	r3, [r7, #8]
 80049e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049e2:	2301      	movs	r3, #1
 80049e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e6:	4b82      	ldr	r3, [pc, #520]	; (8004bf0 <HAL_RCC_OscConfig+0x4c8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d118      	bne.n	8004a24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049f2:	4b7f      	ldr	r3, [pc, #508]	; (8004bf0 <HAL_RCC_OscConfig+0x4c8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a7e      	ldr	r2, [pc, #504]	; (8004bf0 <HAL_RCC_OscConfig+0x4c8>)
 80049f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049fe:	f7fe fb83 	bl	8003108 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a06:	f7fe fb7f 	bl	8003108 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b64      	cmp	r3, #100	; 0x64
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e103      	b.n	8004c20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a18:	4b75      	ldr	r3, [pc, #468]	; (8004bf0 <HAL_RCC_OscConfig+0x4c8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0f0      	beq.n	8004a06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d106      	bne.n	8004a3a <HAL_RCC_OscConfig+0x312>
 8004a2c:	4b6f      	ldr	r3, [pc, #444]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	4a6e      	ldr	r2, [pc, #440]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	6213      	str	r3, [r2, #32]
 8004a38:	e02d      	b.n	8004a96 <HAL_RCC_OscConfig+0x36e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10c      	bne.n	8004a5c <HAL_RCC_OscConfig+0x334>
 8004a42:	4b6a      	ldr	r3, [pc, #424]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	4a69      	ldr	r2, [pc, #420]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004a48:	f023 0301 	bic.w	r3, r3, #1
 8004a4c:	6213      	str	r3, [r2, #32]
 8004a4e:	4b67      	ldr	r3, [pc, #412]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	4a66      	ldr	r2, [pc, #408]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004a54:	f023 0304 	bic.w	r3, r3, #4
 8004a58:	6213      	str	r3, [r2, #32]
 8004a5a:	e01c      	b.n	8004a96 <HAL_RCC_OscConfig+0x36e>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	2b05      	cmp	r3, #5
 8004a62:	d10c      	bne.n	8004a7e <HAL_RCC_OscConfig+0x356>
 8004a64:	4b61      	ldr	r3, [pc, #388]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	4a60      	ldr	r2, [pc, #384]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004a6a:	f043 0304 	orr.w	r3, r3, #4
 8004a6e:	6213      	str	r3, [r2, #32]
 8004a70:	4b5e      	ldr	r3, [pc, #376]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	4a5d      	ldr	r2, [pc, #372]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	6213      	str	r3, [r2, #32]
 8004a7c:	e00b      	b.n	8004a96 <HAL_RCC_OscConfig+0x36e>
 8004a7e:	4b5b      	ldr	r3, [pc, #364]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	4a5a      	ldr	r2, [pc, #360]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004a84:	f023 0301 	bic.w	r3, r3, #1
 8004a88:	6213      	str	r3, [r2, #32]
 8004a8a:	4b58      	ldr	r3, [pc, #352]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	4a57      	ldr	r2, [pc, #348]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004a90:	f023 0304 	bic.w	r3, r3, #4
 8004a94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d015      	beq.n	8004aca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a9e:	f7fe fb33 	bl	8003108 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa4:	e00a      	b.n	8004abc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa6:	f7fe fb2f 	bl	8003108 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e0b1      	b.n	8004c20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004abc:	4b4b      	ldr	r3, [pc, #300]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0ee      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x37e>
 8004ac8:	e014      	b.n	8004af4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aca:	f7fe fb1d 	bl	8003108 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad0:	e00a      	b.n	8004ae8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad2:	f7fe fb19 	bl	8003108 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e09b      	b.n	8004c20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae8:	4b40      	ldr	r3, [pc, #256]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ee      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004af4:	7dfb      	ldrb	r3, [r7, #23]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d105      	bne.n	8004b06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afa:	4b3c      	ldr	r3, [pc, #240]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	4a3b      	ldr	r2, [pc, #236]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 8087 	beq.w	8004c1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b10:	4b36      	ldr	r3, [pc, #216]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 030c 	and.w	r3, r3, #12
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d061      	beq.n	8004be0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d146      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b24:	4b33      	ldr	r3, [pc, #204]	; (8004bf4 <HAL_RCC_OscConfig+0x4cc>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2a:	f7fe faed 	bl	8003108 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b32:	f7fe fae9 	bl	8003108 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e06d      	b.n	8004c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b44:	4b29      	ldr	r3, [pc, #164]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f0      	bne.n	8004b32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b58:	d108      	bne.n	8004b6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b5a:	4b24      	ldr	r3, [pc, #144]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	4921      	ldr	r1, [pc, #132]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b6c:	4b1f      	ldr	r3, [pc, #124]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a19      	ldr	r1, [r3, #32]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	491b      	ldr	r1, [pc, #108]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b84:	4b1b      	ldr	r3, [pc, #108]	; (8004bf4 <HAL_RCC_OscConfig+0x4cc>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8a:	f7fe fabd 	bl	8003108 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b92:	f7fe fab9 	bl	8003108 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e03d      	b.n	8004c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ba4:	4b11      	ldr	r3, [pc, #68]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCC_OscConfig+0x46a>
 8004bb0:	e035      	b.n	8004c1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb2:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <HAL_RCC_OscConfig+0x4cc>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb8:	f7fe faa6 	bl	8003108 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc0:	f7fe faa2 	bl	8003108 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e026      	b.n	8004c20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <HAL_RCC_OscConfig+0x4c4>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x498>
 8004bde:	e01e      	b.n	8004c1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d107      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e019      	b.n	8004c20 <HAL_RCC_OscConfig+0x4f8>
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	40007000 	.word	0x40007000
 8004bf4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bf8:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <HAL_RCC_OscConfig+0x500>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d106      	bne.n	8004c1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d001      	beq.n	8004c1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40021000 	.word	0x40021000

08004c2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e0d0      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c40:	4b6a      	ldr	r3, [pc, #424]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d910      	bls.n	8004c70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4e:	4b67      	ldr	r3, [pc, #412]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f023 0207 	bic.w	r2, r3, #7
 8004c56:	4965      	ldr	r1, [pc, #404]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5e:	4b63      	ldr	r3, [pc, #396]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d001      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e0b8      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d020      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c88:	4b59      	ldr	r3, [pc, #356]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4a58      	ldr	r2, [pc, #352]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ca0:	4b53      	ldr	r3, [pc, #332]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	4a52      	ldr	r2, [pc, #328]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004caa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cac:	4b50      	ldr	r3, [pc, #320]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	494d      	ldr	r1, [pc, #308]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d040      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d107      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd2:	4b47      	ldr	r3, [pc, #284]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d115      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e07f      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d107      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cea:	4b41      	ldr	r3, [pc, #260]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d109      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e073      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfa:	4b3d      	ldr	r3, [pc, #244]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e06b      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d0a:	4b39      	ldr	r3, [pc, #228]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f023 0203 	bic.w	r2, r3, #3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	4936      	ldr	r1, [pc, #216]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d1c:	f7fe f9f4 	bl	8003108 <HAL_GetTick>
 8004d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d22:	e00a      	b.n	8004d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d24:	f7fe f9f0 	bl	8003108 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e053      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3a:	4b2d      	ldr	r3, [pc, #180]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f003 020c 	and.w	r2, r3, #12
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d1eb      	bne.n	8004d24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d4c:	4b27      	ldr	r3, [pc, #156]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d210      	bcs.n	8004d7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5a:	4b24      	ldr	r3, [pc, #144]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 0207 	bic.w	r2, r3, #7
 8004d62:	4922      	ldr	r1, [pc, #136]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6a:	4b20      	ldr	r3, [pc, #128]	; (8004dec <HAL_RCC_ClockConfig+0x1c0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d001      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e032      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d88:	4b19      	ldr	r3, [pc, #100]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	4916      	ldr	r1, [pc, #88]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d009      	beq.n	8004dba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004da6:	4b12      	ldr	r3, [pc, #72]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	490e      	ldr	r1, [pc, #56]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dba:	f000 f821 	bl	8004e00 <HAL_RCC_GetSysClockFreq>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	091b      	lsrs	r3, r3, #4
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	490a      	ldr	r1, [pc, #40]	; (8004df4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dcc:	5ccb      	ldrb	r3, [r1, r3]
 8004dce:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd2:	4a09      	ldr	r2, [pc, #36]	; (8004df8 <HAL_RCC_ClockConfig+0x1cc>)
 8004dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dd6:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <HAL_RCC_ClockConfig+0x1d0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fe f952 	bl	8003084 <HAL_InitTick>

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	40022000 	.word	0x40022000
 8004df0:	40021000 	.word	0x40021000
 8004df4:	08009018 	.word	0x08009018
 8004df8:	20000008 	.word	0x20000008
 8004dfc:	2000000c 	.word	0x2000000c

08004e00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	2300      	movs	r3, #0
 8004e14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e1a:	4b1e      	ldr	r3, [pc, #120]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f003 030c 	and.w	r3, r3, #12
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d002      	beq.n	8004e30 <HAL_RCC_GetSysClockFreq+0x30>
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d003      	beq.n	8004e36 <HAL_RCC_GetSysClockFreq+0x36>
 8004e2e:	e027      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e30:	4b19      	ldr	r3, [pc, #100]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e32:	613b      	str	r3, [r7, #16]
      break;
 8004e34:	e027      	b.n	8004e86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	0c9b      	lsrs	r3, r3, #18
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	4a17      	ldr	r2, [pc, #92]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e40:	5cd3      	ldrb	r3, [r2, r3]
 8004e42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d010      	beq.n	8004e70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e4e:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	0c5b      	lsrs	r3, r3, #17
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	4a11      	ldr	r2, [pc, #68]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e5a:	5cd3      	ldrb	r3, [r2, r3]
 8004e5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a0d      	ldr	r2, [pc, #52]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e62:	fb03 f202 	mul.w	r2, r3, r2
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	e004      	b.n	8004e7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a0c      	ldr	r2, [pc, #48]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e74:	fb02 f303 	mul.w	r3, r2, r3
 8004e78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	613b      	str	r3, [r7, #16]
      break;
 8004e7e:	e002      	b.n	8004e86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e80:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e82:	613b      	str	r3, [r7, #16]
      break;
 8004e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e86:	693b      	ldr	r3, [r7, #16]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40021000 	.word	0x40021000
 8004e98:	007a1200 	.word	0x007a1200
 8004e9c:	08009030 	.word	0x08009030
 8004ea0:	08009040 	.word	0x08009040
 8004ea4:	003d0900 	.word	0x003d0900

08004ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eac:	4b02      	ldr	r3, [pc, #8]	; (8004eb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004eae:	681b      	ldr	r3, [r3, #0]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bc80      	pop	{r7}
 8004eb6:	4770      	bx	lr
 8004eb8:	20000008 	.word	0x20000008

08004ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ec0:	f7ff fff2 	bl	8004ea8 <HAL_RCC_GetHCLKFreq>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	4b05      	ldr	r3, [pc, #20]	; (8004edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	0a1b      	lsrs	r3, r3, #8
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	4903      	ldr	r1, [pc, #12]	; (8004ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ed2:	5ccb      	ldrb	r3, [r1, r3]
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	08009028 	.word	0x08009028

08004ee4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004eec:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <RCC_Delay+0x34>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a0a      	ldr	r2, [pc, #40]	; (8004f1c <RCC_Delay+0x38>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	0a5b      	lsrs	r3, r3, #9
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	fb02 f303 	mul.w	r3, r2, r3
 8004efe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f00:	bf00      	nop
  }
  while (Delay --);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	1e5a      	subs	r2, r3, #1
 8004f06:	60fa      	str	r2, [r7, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1f9      	bne.n	8004f00 <RCC_Delay+0x1c>
}
 8004f0c:	bf00      	nop
 8004f0e:	bf00      	nop
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr
 8004f18:	20000008 	.word	0x20000008
 8004f1c:	10624dd3 	.word	0x10624dd3

08004f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e076      	b.n	8005020 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d108      	bne.n	8004f4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f42:	d009      	beq.n	8004f58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	61da      	str	r2, [r3, #28]
 8004f4a:	e005      	b.n	8004f58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fd fc8c 	bl	8002890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fdc:	ea42 0103 	orr.w	r1, r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	0c1a      	lsrs	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f002 0204 	and.w	r2, r2, #4
 8004ffe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	69da      	ldr	r2, [r3, #28]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800500e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	4613      	mov	r3, r2
 8005036:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_SPI_Transmit+0x22>
 8005046:	2302      	movs	r3, #2
 8005048:	e12d      	b.n	80052a6 <HAL_SPI_Transmit+0x27e>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005052:	f7fe f859 	bl	8003108 <HAL_GetTick>
 8005056:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005058:	88fb      	ldrh	r3, [r7, #6]
 800505a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	d002      	beq.n	800506e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005068:	2302      	movs	r3, #2
 800506a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800506c:	e116      	b.n	800529c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <HAL_SPI_Transmit+0x52>
 8005074:	88fb      	ldrh	r3, [r7, #6]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d102      	bne.n	8005080 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800507e:	e10d      	b.n	800529c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2203      	movs	r2, #3
 8005084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	88fa      	ldrh	r2, [r7, #6]
 8005098:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	88fa      	ldrh	r2, [r7, #6]
 800509e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c6:	d10f      	bne.n	80050e8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f2:	2b40      	cmp	r3, #64	; 0x40
 80050f4:	d007      	beq.n	8005106 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005104:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800510e:	d14f      	bne.n	80051b0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <HAL_SPI_Transmit+0xf6>
 8005118:	8afb      	ldrh	r3, [r7, #22]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d142      	bne.n	80051a4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	881a      	ldrh	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	1c9a      	adds	r2, r3, #2
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005142:	e02f      	b.n	80051a4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b02      	cmp	r3, #2
 8005150:	d112      	bne.n	8005178 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	881a      	ldrh	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	1c9a      	adds	r2, r3, #2
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	86da      	strh	r2, [r3, #54]	; 0x36
 8005176:	e015      	b.n	80051a4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005178:	f7fd ffc6 	bl	8003108 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d803      	bhi.n	8005190 <HAL_SPI_Transmit+0x168>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518e:	d102      	bne.n	8005196 <HAL_SPI_Transmit+0x16e>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80051a2:	e07b      	b.n	800529c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1ca      	bne.n	8005144 <HAL_SPI_Transmit+0x11c>
 80051ae:	e050      	b.n	8005252 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <HAL_SPI_Transmit+0x196>
 80051b8:	8afb      	ldrh	r3, [r7, #22]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d144      	bne.n	8005248 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	330c      	adds	r3, #12
 80051c8:	7812      	ldrb	r2, [r2, #0]
 80051ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051da:	b29b      	uxth	r3, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051e4:	e030      	b.n	8005248 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d113      	bne.n	800521c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	330c      	adds	r3, #12
 80051fe:	7812      	ldrb	r2, [r2, #0]
 8005200:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	86da      	strh	r2, [r3, #54]	; 0x36
 800521a:	e015      	b.n	8005248 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800521c:	f7fd ff74 	bl	8003108 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d803      	bhi.n	8005234 <HAL_SPI_Transmit+0x20c>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	d102      	bne.n	800523a <HAL_SPI_Transmit+0x212>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005246:	e029      	b.n	800529c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1c9      	bne.n	80051e6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fa6e 	bl	8005738 <SPI_EndRxTxTransaction>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2220      	movs	r2, #32
 8005266:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005270:	2300      	movs	r3, #0
 8005272:	613b      	str	r3, [r7, #16]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	77fb      	strb	r3, [r7, #31]
 8005292:	e003      	b.n	800529c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3720      	adds	r7, #32
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b08c      	sub	sp, #48	; 0x30
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
 80052ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80052bc:	2301      	movs	r3, #1
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_SPI_TransmitReceive+0x26>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e198      	b.n	8005606 <HAL_SPI_TransmitReceive+0x358>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052dc:	f7fd ff14 	bl	8003108 <HAL_GetTick>
 80052e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80052f2:	887b      	ldrh	r3, [r7, #2]
 80052f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d00f      	beq.n	800531e <HAL_SPI_TransmitReceive+0x70>
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005304:	d107      	bne.n	8005316 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d103      	bne.n	8005316 <HAL_SPI_TransmitReceive+0x68>
 800530e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005312:	2b04      	cmp	r3, #4
 8005314:	d003      	beq.n	800531e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005316:	2302      	movs	r3, #2
 8005318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800531c:	e16d      	b.n	80055fa <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d005      	beq.n	8005330 <HAL_SPI_TransmitReceive+0x82>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_SPI_TransmitReceive+0x82>
 800532a:	887b      	ldrh	r3, [r7, #2]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d103      	bne.n	8005338 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005336:	e160      	b.n	80055fa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b04      	cmp	r3, #4
 8005342:	d003      	beq.n	800534c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2205      	movs	r2, #5
 8005348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	887a      	ldrh	r2, [r7, #2]
 800535c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	887a      	ldrh	r2, [r7, #2]
 8005362:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	887a      	ldrh	r2, [r7, #2]
 800536e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	887a      	ldrh	r2, [r7, #2]
 8005374:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d007      	beq.n	80053a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800539e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a8:	d17c      	bne.n	80054a4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <HAL_SPI_TransmitReceive+0x10a>
 80053b2:	8b7b      	ldrh	r3, [r7, #26]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d16a      	bne.n	800548e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053bc:	881a      	ldrh	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	1c9a      	adds	r2, r3, #2
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053dc:	e057      	b.n	800548e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d11b      	bne.n	8005424 <HAL_SPI_TransmitReceive+0x176>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d016      	beq.n	8005424 <HAL_SPI_TransmitReceive+0x176>
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d113      	bne.n	8005424 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	881a      	ldrh	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540c:	1c9a      	adds	r2, r3, #2
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005416:	b29b      	uxth	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b29a      	uxth	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b01      	cmp	r3, #1
 8005430:	d119      	bne.n	8005466 <HAL_SPI_TransmitReceive+0x1b8>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d014      	beq.n	8005466 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	b292      	uxth	r2, r2
 8005448:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	1c9a      	adds	r2, r3, #2
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005462:	2301      	movs	r3, #1
 8005464:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005466:	f7fd fe4f 	bl	8003108 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005472:	429a      	cmp	r2, r3
 8005474:	d80b      	bhi.n	800548e <HAL_SPI_TransmitReceive+0x1e0>
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547c:	d007      	beq.n	800548e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800548c:	e0b5      	b.n	80055fa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1a2      	bne.n	80053de <HAL_SPI_TransmitReceive+0x130>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d19d      	bne.n	80053de <HAL_SPI_TransmitReceive+0x130>
 80054a2:	e080      	b.n	80055a6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <HAL_SPI_TransmitReceive+0x204>
 80054ac:	8b7b      	ldrh	r3, [r7, #26]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d16f      	bne.n	8005592 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	330c      	adds	r3, #12
 80054bc:	7812      	ldrb	r2, [r2, #0]
 80054be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054d8:	e05b      	b.n	8005592 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d11c      	bne.n	8005522 <HAL_SPI_TransmitReceive+0x274>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d017      	beq.n	8005522 <HAL_SPI_TransmitReceive+0x274>
 80054f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d114      	bne.n	8005522 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	330c      	adds	r3, #12
 8005502:	7812      	ldrb	r2, [r2, #0]
 8005504:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b01      	cmp	r3, #1
 800552e:	d119      	bne.n	8005564 <HAL_SPI_TransmitReceive+0x2b6>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005534:	b29b      	uxth	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d014      	beq.n	8005564 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	1c5a      	adds	r2, r3, #1
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005560:	2301      	movs	r3, #1
 8005562:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005564:	f7fd fdd0 	bl	8003108 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005570:	429a      	cmp	r2, r3
 8005572:	d803      	bhi.n	800557c <HAL_SPI_TransmitReceive+0x2ce>
 8005574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557a:	d102      	bne.n	8005582 <HAL_SPI_TransmitReceive+0x2d4>
 800557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557e:	2b00      	cmp	r3, #0
 8005580:	d107      	bne.n	8005592 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005590:	e033      	b.n	80055fa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005596:	b29b      	uxth	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d19e      	bne.n	80054da <HAL_SPI_TransmitReceive+0x22c>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d199      	bne.n	80054da <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f8c4 	bl	8005738 <SPI_EndRxTxTransaction>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d006      	beq.n	80055c4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80055c2:	e01a      	b.n	80055fa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055f0:	e003      	b.n	80055fa <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005602:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005606:	4618      	mov	r0, r3
 8005608:	3730      	adds	r7, #48	; 0x30
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800561c:	b2db      	uxtb	r3, r3
}
 800561e:	4618      	mov	r0, r3
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr

08005628 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	4613      	mov	r3, r2
 8005636:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005638:	f7fd fd66 	bl	8003108 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	4413      	add	r3, r2
 8005646:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005648:	f7fd fd5e 	bl	8003108 <HAL_GetTick>
 800564c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800564e:	4b39      	ldr	r3, [pc, #228]	; (8005734 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	015b      	lsls	r3, r3, #5
 8005654:	0d1b      	lsrs	r3, r3, #20
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	fb02 f303 	mul.w	r3, r2, r3
 800565c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800565e:	e054      	b.n	800570a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005666:	d050      	beq.n	800570a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005668:	f7fd fd4e 	bl	8003108 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	429a      	cmp	r2, r3
 8005676:	d902      	bls.n	800567e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d13d      	bne.n	80056fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800568c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005696:	d111      	bne.n	80056bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a0:	d004      	beq.n	80056ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056aa:	d107      	bne.n	80056bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c4:	d10f      	bne.n	80056e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e017      	b.n	800572a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	3b01      	subs	r3, #1
 8005708:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4013      	ands	r3, r2
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	bf0c      	ite	eq
 800571a:	2301      	moveq	r3, #1
 800571c:	2300      	movne	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	429a      	cmp	r2, r3
 8005726:	d19b      	bne.n	8005660 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000008 	.word	0x20000008

08005738 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2200      	movs	r2, #0
 800574c:	2180      	movs	r1, #128	; 0x80
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7ff ff6a 	bl	8005628 <SPI_WaitFlagStateUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d007      	beq.n	800576a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575e:	f043 0220 	orr.w	r2, r3, #32
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e000      	b.n	800576c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <__cvt>:
 8005774:	2b00      	cmp	r3, #0
 8005776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800577a:	461f      	mov	r7, r3
 800577c:	bfbb      	ittet	lt
 800577e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005782:	461f      	movlt	r7, r3
 8005784:	2300      	movge	r3, #0
 8005786:	232d      	movlt	r3, #45	; 0x2d
 8005788:	b088      	sub	sp, #32
 800578a:	4614      	mov	r4, r2
 800578c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800578e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005790:	7013      	strb	r3, [r2, #0]
 8005792:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005794:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005798:	f023 0820 	bic.w	r8, r3, #32
 800579c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057a0:	d005      	beq.n	80057ae <__cvt+0x3a>
 80057a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057a6:	d100      	bne.n	80057aa <__cvt+0x36>
 80057a8:	3501      	adds	r5, #1
 80057aa:	2302      	movs	r3, #2
 80057ac:	e000      	b.n	80057b0 <__cvt+0x3c>
 80057ae:	2303      	movs	r3, #3
 80057b0:	aa07      	add	r2, sp, #28
 80057b2:	9204      	str	r2, [sp, #16]
 80057b4:	aa06      	add	r2, sp, #24
 80057b6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80057ba:	e9cd 3500 	strd	r3, r5, [sp]
 80057be:	4622      	mov	r2, r4
 80057c0:	463b      	mov	r3, r7
 80057c2:	f000 fe81 	bl	80064c8 <_dtoa_r>
 80057c6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057ca:	4606      	mov	r6, r0
 80057cc:	d102      	bne.n	80057d4 <__cvt+0x60>
 80057ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057d0:	07db      	lsls	r3, r3, #31
 80057d2:	d522      	bpl.n	800581a <__cvt+0xa6>
 80057d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057d8:	eb06 0905 	add.w	r9, r6, r5
 80057dc:	d110      	bne.n	8005800 <__cvt+0x8c>
 80057de:	7833      	ldrb	r3, [r6, #0]
 80057e0:	2b30      	cmp	r3, #48	; 0x30
 80057e2:	d10a      	bne.n	80057fa <__cvt+0x86>
 80057e4:	2200      	movs	r2, #0
 80057e6:	2300      	movs	r3, #0
 80057e8:	4620      	mov	r0, r4
 80057ea:	4639      	mov	r1, r7
 80057ec:	f7fb f8dc 	bl	80009a8 <__aeabi_dcmpeq>
 80057f0:	b918      	cbnz	r0, 80057fa <__cvt+0x86>
 80057f2:	f1c5 0501 	rsb	r5, r5, #1
 80057f6:	f8ca 5000 	str.w	r5, [sl]
 80057fa:	f8da 3000 	ldr.w	r3, [sl]
 80057fe:	4499      	add	r9, r3
 8005800:	2200      	movs	r2, #0
 8005802:	2300      	movs	r3, #0
 8005804:	4620      	mov	r0, r4
 8005806:	4639      	mov	r1, r7
 8005808:	f7fb f8ce 	bl	80009a8 <__aeabi_dcmpeq>
 800580c:	b108      	cbz	r0, 8005812 <__cvt+0x9e>
 800580e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005812:	2230      	movs	r2, #48	; 0x30
 8005814:	9b07      	ldr	r3, [sp, #28]
 8005816:	454b      	cmp	r3, r9
 8005818:	d307      	bcc.n	800582a <__cvt+0xb6>
 800581a:	4630      	mov	r0, r6
 800581c:	9b07      	ldr	r3, [sp, #28]
 800581e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005820:	1b9b      	subs	r3, r3, r6
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	b008      	add	sp, #32
 8005826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800582a:	1c59      	adds	r1, r3, #1
 800582c:	9107      	str	r1, [sp, #28]
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	e7f0      	b.n	8005814 <__cvt+0xa0>

08005832 <__exponent>:
 8005832:	4603      	mov	r3, r0
 8005834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005836:	2900      	cmp	r1, #0
 8005838:	f803 2b02 	strb.w	r2, [r3], #2
 800583c:	bfb6      	itet	lt
 800583e:	222d      	movlt	r2, #45	; 0x2d
 8005840:	222b      	movge	r2, #43	; 0x2b
 8005842:	4249      	neglt	r1, r1
 8005844:	2909      	cmp	r1, #9
 8005846:	7042      	strb	r2, [r0, #1]
 8005848:	dd2a      	ble.n	80058a0 <__exponent+0x6e>
 800584a:	f10d 0207 	add.w	r2, sp, #7
 800584e:	4617      	mov	r7, r2
 8005850:	260a      	movs	r6, #10
 8005852:	fb91 f5f6 	sdiv	r5, r1, r6
 8005856:	4694      	mov	ip, r2
 8005858:	fb06 1415 	mls	r4, r6, r5, r1
 800585c:	3430      	adds	r4, #48	; 0x30
 800585e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005862:	460c      	mov	r4, r1
 8005864:	2c63      	cmp	r4, #99	; 0x63
 8005866:	4629      	mov	r1, r5
 8005868:	f102 32ff 	add.w	r2, r2, #4294967295
 800586c:	dcf1      	bgt.n	8005852 <__exponent+0x20>
 800586e:	3130      	adds	r1, #48	; 0x30
 8005870:	f1ac 0402 	sub.w	r4, ip, #2
 8005874:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005878:	4622      	mov	r2, r4
 800587a:	1c41      	adds	r1, r0, #1
 800587c:	42ba      	cmp	r2, r7
 800587e:	d30a      	bcc.n	8005896 <__exponent+0x64>
 8005880:	f10d 0209 	add.w	r2, sp, #9
 8005884:	eba2 020c 	sub.w	r2, r2, ip
 8005888:	42bc      	cmp	r4, r7
 800588a:	bf88      	it	hi
 800588c:	2200      	movhi	r2, #0
 800588e:	4413      	add	r3, r2
 8005890:	1a18      	subs	r0, r3, r0
 8005892:	b003      	add	sp, #12
 8005894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005896:	f812 5b01 	ldrb.w	r5, [r2], #1
 800589a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800589e:	e7ed      	b.n	800587c <__exponent+0x4a>
 80058a0:	2330      	movs	r3, #48	; 0x30
 80058a2:	3130      	adds	r1, #48	; 0x30
 80058a4:	7083      	strb	r3, [r0, #2]
 80058a6:	70c1      	strb	r1, [r0, #3]
 80058a8:	1d03      	adds	r3, r0, #4
 80058aa:	e7f1      	b.n	8005890 <__exponent+0x5e>

080058ac <_printf_float>:
 80058ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b0:	b091      	sub	sp, #68	; 0x44
 80058b2:	460c      	mov	r4, r1
 80058b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80058b8:	4616      	mov	r6, r2
 80058ba:	461f      	mov	r7, r3
 80058bc:	4605      	mov	r5, r0
 80058be:	f000 fce5 	bl	800628c <_localeconv_r>
 80058c2:	6803      	ldr	r3, [r0, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	9309      	str	r3, [sp, #36]	; 0x24
 80058c8:	f7fa fc42 	bl	8000150 <strlen>
 80058cc:	2300      	movs	r3, #0
 80058ce:	930e      	str	r3, [sp, #56]	; 0x38
 80058d0:	f8d8 3000 	ldr.w	r3, [r8]
 80058d4:	900a      	str	r0, [sp, #40]	; 0x28
 80058d6:	3307      	adds	r3, #7
 80058d8:	f023 0307 	bic.w	r3, r3, #7
 80058dc:	f103 0208 	add.w	r2, r3, #8
 80058e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80058e4:	f8d4 b000 	ldr.w	fp, [r4]
 80058e8:	f8c8 2000 	str.w	r2, [r8]
 80058ec:	e9d3 a800 	ldrd	sl, r8, [r3]
 80058f0:	4652      	mov	r2, sl
 80058f2:	4643      	mov	r3, r8
 80058f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80058f8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80058fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80058fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005902:	4650      	mov	r0, sl
 8005904:	4b9c      	ldr	r3, [pc, #624]	; (8005b78 <_printf_float+0x2cc>)
 8005906:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005908:	f7fb f880 	bl	8000a0c <__aeabi_dcmpun>
 800590c:	bb70      	cbnz	r0, 800596c <_printf_float+0xc0>
 800590e:	f04f 32ff 	mov.w	r2, #4294967295
 8005912:	4650      	mov	r0, sl
 8005914:	4b98      	ldr	r3, [pc, #608]	; (8005b78 <_printf_float+0x2cc>)
 8005916:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005918:	f7fb f85a 	bl	80009d0 <__aeabi_dcmple>
 800591c:	bb30      	cbnz	r0, 800596c <_printf_float+0xc0>
 800591e:	2200      	movs	r2, #0
 8005920:	2300      	movs	r3, #0
 8005922:	4650      	mov	r0, sl
 8005924:	4641      	mov	r1, r8
 8005926:	f7fb f849 	bl	80009bc <__aeabi_dcmplt>
 800592a:	b110      	cbz	r0, 8005932 <_printf_float+0x86>
 800592c:	232d      	movs	r3, #45	; 0x2d
 800592e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005932:	4a92      	ldr	r2, [pc, #584]	; (8005b7c <_printf_float+0x2d0>)
 8005934:	4b92      	ldr	r3, [pc, #584]	; (8005b80 <_printf_float+0x2d4>)
 8005936:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800593a:	bf94      	ite	ls
 800593c:	4690      	movls	r8, r2
 800593e:	4698      	movhi	r8, r3
 8005940:	2303      	movs	r3, #3
 8005942:	f04f 0a00 	mov.w	sl, #0
 8005946:	6123      	str	r3, [r4, #16]
 8005948:	f02b 0304 	bic.w	r3, fp, #4
 800594c:	6023      	str	r3, [r4, #0]
 800594e:	4633      	mov	r3, r6
 8005950:	4621      	mov	r1, r4
 8005952:	4628      	mov	r0, r5
 8005954:	9700      	str	r7, [sp, #0]
 8005956:	aa0f      	add	r2, sp, #60	; 0x3c
 8005958:	f000 f9d6 	bl	8005d08 <_printf_common>
 800595c:	3001      	adds	r0, #1
 800595e:	f040 8090 	bne.w	8005a82 <_printf_float+0x1d6>
 8005962:	f04f 30ff 	mov.w	r0, #4294967295
 8005966:	b011      	add	sp, #68	; 0x44
 8005968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596c:	4652      	mov	r2, sl
 800596e:	4643      	mov	r3, r8
 8005970:	4650      	mov	r0, sl
 8005972:	4641      	mov	r1, r8
 8005974:	f7fb f84a 	bl	8000a0c <__aeabi_dcmpun>
 8005978:	b148      	cbz	r0, 800598e <_printf_float+0xe2>
 800597a:	f1b8 0f00 	cmp.w	r8, #0
 800597e:	bfb8      	it	lt
 8005980:	232d      	movlt	r3, #45	; 0x2d
 8005982:	4a80      	ldr	r2, [pc, #512]	; (8005b84 <_printf_float+0x2d8>)
 8005984:	bfb8      	it	lt
 8005986:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800598a:	4b7f      	ldr	r3, [pc, #508]	; (8005b88 <_printf_float+0x2dc>)
 800598c:	e7d3      	b.n	8005936 <_printf_float+0x8a>
 800598e:	6863      	ldr	r3, [r4, #4]
 8005990:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	d142      	bne.n	8005a1e <_printf_float+0x172>
 8005998:	2306      	movs	r3, #6
 800599a:	6063      	str	r3, [r4, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	9206      	str	r2, [sp, #24]
 80059a0:	aa0e      	add	r2, sp, #56	; 0x38
 80059a2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80059a6:	aa0d      	add	r2, sp, #52	; 0x34
 80059a8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80059ac:	9203      	str	r2, [sp, #12]
 80059ae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80059b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80059b6:	6023      	str	r3, [r4, #0]
 80059b8:	6863      	ldr	r3, [r4, #4]
 80059ba:	4652      	mov	r2, sl
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	4628      	mov	r0, r5
 80059c0:	4643      	mov	r3, r8
 80059c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80059c4:	f7ff fed6 	bl	8005774 <__cvt>
 80059c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059ca:	4680      	mov	r8, r0
 80059cc:	2947      	cmp	r1, #71	; 0x47
 80059ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059d0:	d108      	bne.n	80059e4 <_printf_float+0x138>
 80059d2:	1cc8      	adds	r0, r1, #3
 80059d4:	db02      	blt.n	80059dc <_printf_float+0x130>
 80059d6:	6863      	ldr	r3, [r4, #4]
 80059d8:	4299      	cmp	r1, r3
 80059da:	dd40      	ble.n	8005a5e <_printf_float+0x1b2>
 80059dc:	f1a9 0902 	sub.w	r9, r9, #2
 80059e0:	fa5f f989 	uxtb.w	r9, r9
 80059e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80059e8:	d81f      	bhi.n	8005a2a <_printf_float+0x17e>
 80059ea:	464a      	mov	r2, r9
 80059ec:	3901      	subs	r1, #1
 80059ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059f2:	910d      	str	r1, [sp, #52]	; 0x34
 80059f4:	f7ff ff1d 	bl	8005832 <__exponent>
 80059f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059fa:	4682      	mov	sl, r0
 80059fc:	1813      	adds	r3, r2, r0
 80059fe:	2a01      	cmp	r2, #1
 8005a00:	6123      	str	r3, [r4, #16]
 8005a02:	dc02      	bgt.n	8005a0a <_printf_float+0x15e>
 8005a04:	6822      	ldr	r2, [r4, #0]
 8005a06:	07d2      	lsls	r2, r2, #31
 8005a08:	d501      	bpl.n	8005a0e <_printf_float+0x162>
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	6123      	str	r3, [r4, #16]
 8005a0e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d09b      	beq.n	800594e <_printf_float+0xa2>
 8005a16:	232d      	movs	r3, #45	; 0x2d
 8005a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a1c:	e797      	b.n	800594e <_printf_float+0xa2>
 8005a1e:	2947      	cmp	r1, #71	; 0x47
 8005a20:	d1bc      	bne.n	800599c <_printf_float+0xf0>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1ba      	bne.n	800599c <_printf_float+0xf0>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e7b7      	b.n	800599a <_printf_float+0xee>
 8005a2a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005a2e:	d118      	bne.n	8005a62 <_printf_float+0x1b6>
 8005a30:	2900      	cmp	r1, #0
 8005a32:	6863      	ldr	r3, [r4, #4]
 8005a34:	dd0b      	ble.n	8005a4e <_printf_float+0x1a2>
 8005a36:	6121      	str	r1, [r4, #16]
 8005a38:	b913      	cbnz	r3, 8005a40 <_printf_float+0x194>
 8005a3a:	6822      	ldr	r2, [r4, #0]
 8005a3c:	07d0      	lsls	r0, r2, #31
 8005a3e:	d502      	bpl.n	8005a46 <_printf_float+0x19a>
 8005a40:	3301      	adds	r3, #1
 8005a42:	440b      	add	r3, r1
 8005a44:	6123      	str	r3, [r4, #16]
 8005a46:	f04f 0a00 	mov.w	sl, #0
 8005a4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a4c:	e7df      	b.n	8005a0e <_printf_float+0x162>
 8005a4e:	b913      	cbnz	r3, 8005a56 <_printf_float+0x1aa>
 8005a50:	6822      	ldr	r2, [r4, #0]
 8005a52:	07d2      	lsls	r2, r2, #31
 8005a54:	d501      	bpl.n	8005a5a <_printf_float+0x1ae>
 8005a56:	3302      	adds	r3, #2
 8005a58:	e7f4      	b.n	8005a44 <_printf_float+0x198>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e7f2      	b.n	8005a44 <_printf_float+0x198>
 8005a5e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a64:	4299      	cmp	r1, r3
 8005a66:	db05      	blt.n	8005a74 <_printf_float+0x1c8>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	6121      	str	r1, [r4, #16]
 8005a6c:	07d8      	lsls	r0, r3, #31
 8005a6e:	d5ea      	bpl.n	8005a46 <_printf_float+0x19a>
 8005a70:	1c4b      	adds	r3, r1, #1
 8005a72:	e7e7      	b.n	8005a44 <_printf_float+0x198>
 8005a74:	2900      	cmp	r1, #0
 8005a76:	bfcc      	ite	gt
 8005a78:	2201      	movgt	r2, #1
 8005a7a:	f1c1 0202 	rsble	r2, r1, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	e7e0      	b.n	8005a44 <_printf_float+0x198>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	055a      	lsls	r2, r3, #21
 8005a86:	d407      	bmi.n	8005a98 <_printf_float+0x1ec>
 8005a88:	6923      	ldr	r3, [r4, #16]
 8005a8a:	4642      	mov	r2, r8
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	4628      	mov	r0, r5
 8005a90:	47b8      	blx	r7
 8005a92:	3001      	adds	r0, #1
 8005a94:	d12b      	bne.n	8005aee <_printf_float+0x242>
 8005a96:	e764      	b.n	8005962 <_printf_float+0xb6>
 8005a98:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005a9c:	f240 80dd 	bls.w	8005c5a <_printf_float+0x3ae>
 8005aa0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f7fa ff7e 	bl	80009a8 <__aeabi_dcmpeq>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	d033      	beq.n	8005b18 <_printf_float+0x26c>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	4631      	mov	r1, r6
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	4a35      	ldr	r2, [pc, #212]	; (8005b8c <_printf_float+0x2e0>)
 8005ab8:	47b8      	blx	r7
 8005aba:	3001      	adds	r0, #1
 8005abc:	f43f af51 	beq.w	8005962 <_printf_float+0xb6>
 8005ac0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	db02      	blt.n	8005ace <_printf_float+0x222>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	07d8      	lsls	r0, r3, #31
 8005acc:	d50f      	bpl.n	8005aee <_printf_float+0x242>
 8005ace:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	47b8      	blx	r7
 8005ad8:	3001      	adds	r0, #1
 8005ada:	f43f af42 	beq.w	8005962 <_printf_float+0xb6>
 8005ade:	f04f 0800 	mov.w	r8, #0
 8005ae2:	f104 091a 	add.w	r9, r4, #26
 8005ae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	4543      	cmp	r3, r8
 8005aec:	dc09      	bgt.n	8005b02 <_printf_float+0x256>
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	079b      	lsls	r3, r3, #30
 8005af2:	f100 8104 	bmi.w	8005cfe <_printf_float+0x452>
 8005af6:	68e0      	ldr	r0, [r4, #12]
 8005af8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005afa:	4298      	cmp	r0, r3
 8005afc:	bfb8      	it	lt
 8005afe:	4618      	movlt	r0, r3
 8005b00:	e731      	b.n	8005966 <_printf_float+0xba>
 8005b02:	2301      	movs	r3, #1
 8005b04:	464a      	mov	r2, r9
 8005b06:	4631      	mov	r1, r6
 8005b08:	4628      	mov	r0, r5
 8005b0a:	47b8      	blx	r7
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	f43f af28 	beq.w	8005962 <_printf_float+0xb6>
 8005b12:	f108 0801 	add.w	r8, r8, #1
 8005b16:	e7e6      	b.n	8005ae6 <_printf_float+0x23a>
 8005b18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	dc38      	bgt.n	8005b90 <_printf_float+0x2e4>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	4631      	mov	r1, r6
 8005b22:	4628      	mov	r0, r5
 8005b24:	4a19      	ldr	r2, [pc, #100]	; (8005b8c <_printf_float+0x2e0>)
 8005b26:	47b8      	blx	r7
 8005b28:	3001      	adds	r0, #1
 8005b2a:	f43f af1a 	beq.w	8005962 <_printf_float+0xb6>
 8005b2e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005b32:	4313      	orrs	r3, r2
 8005b34:	d102      	bne.n	8005b3c <_printf_float+0x290>
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	07d9      	lsls	r1, r3, #31
 8005b3a:	d5d8      	bpl.n	8005aee <_printf_float+0x242>
 8005b3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b40:	4631      	mov	r1, r6
 8005b42:	4628      	mov	r0, r5
 8005b44:	47b8      	blx	r7
 8005b46:	3001      	adds	r0, #1
 8005b48:	f43f af0b 	beq.w	8005962 <_printf_float+0xb6>
 8005b4c:	f04f 0900 	mov.w	r9, #0
 8005b50:	f104 0a1a 	add.w	sl, r4, #26
 8005b54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b56:	425b      	negs	r3, r3
 8005b58:	454b      	cmp	r3, r9
 8005b5a:	dc01      	bgt.n	8005b60 <_printf_float+0x2b4>
 8005b5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b5e:	e794      	b.n	8005a8a <_printf_float+0x1de>
 8005b60:	2301      	movs	r3, #1
 8005b62:	4652      	mov	r2, sl
 8005b64:	4631      	mov	r1, r6
 8005b66:	4628      	mov	r0, r5
 8005b68:	47b8      	blx	r7
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	f43f aef9 	beq.w	8005962 <_printf_float+0xb6>
 8005b70:	f109 0901 	add.w	r9, r9, #1
 8005b74:	e7ee      	b.n	8005b54 <_printf_float+0x2a8>
 8005b76:	bf00      	nop
 8005b78:	7fefffff 	.word	0x7fefffff
 8005b7c:	08009042 	.word	0x08009042
 8005b80:	08009046 	.word	0x08009046
 8005b84:	0800904a 	.word	0x0800904a
 8005b88:	0800904e 	.word	0x0800904e
 8005b8c:	08009052 	.word	0x08009052
 8005b90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b94:	429a      	cmp	r2, r3
 8005b96:	bfa8      	it	ge
 8005b98:	461a      	movge	r2, r3
 8005b9a:	2a00      	cmp	r2, #0
 8005b9c:	4691      	mov	r9, r2
 8005b9e:	dc37      	bgt.n	8005c10 <_printf_float+0x364>
 8005ba0:	f04f 0b00 	mov.w	fp, #0
 8005ba4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ba8:	f104 021a 	add.w	r2, r4, #26
 8005bac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005bb0:	ebaa 0309 	sub.w	r3, sl, r9
 8005bb4:	455b      	cmp	r3, fp
 8005bb6:	dc33      	bgt.n	8005c20 <_printf_float+0x374>
 8005bb8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	db3b      	blt.n	8005c38 <_printf_float+0x38c>
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	07da      	lsls	r2, r3, #31
 8005bc4:	d438      	bmi.n	8005c38 <_printf_float+0x38c>
 8005bc6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005bca:	eba2 0903 	sub.w	r9, r2, r3
 8005bce:	eba2 020a 	sub.w	r2, r2, sl
 8005bd2:	4591      	cmp	r9, r2
 8005bd4:	bfa8      	it	ge
 8005bd6:	4691      	movge	r9, r2
 8005bd8:	f1b9 0f00 	cmp.w	r9, #0
 8005bdc:	dc34      	bgt.n	8005c48 <_printf_float+0x39c>
 8005bde:	f04f 0800 	mov.w	r8, #0
 8005be2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005be6:	f104 0a1a 	add.w	sl, r4, #26
 8005bea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bee:	1a9b      	subs	r3, r3, r2
 8005bf0:	eba3 0309 	sub.w	r3, r3, r9
 8005bf4:	4543      	cmp	r3, r8
 8005bf6:	f77f af7a 	ble.w	8005aee <_printf_float+0x242>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4652      	mov	r2, sl
 8005bfe:	4631      	mov	r1, r6
 8005c00:	4628      	mov	r0, r5
 8005c02:	47b8      	blx	r7
 8005c04:	3001      	adds	r0, #1
 8005c06:	f43f aeac 	beq.w	8005962 <_printf_float+0xb6>
 8005c0a:	f108 0801 	add.w	r8, r8, #1
 8005c0e:	e7ec      	b.n	8005bea <_printf_float+0x33e>
 8005c10:	4613      	mov	r3, r2
 8005c12:	4631      	mov	r1, r6
 8005c14:	4642      	mov	r2, r8
 8005c16:	4628      	mov	r0, r5
 8005c18:	47b8      	blx	r7
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d1c0      	bne.n	8005ba0 <_printf_float+0x2f4>
 8005c1e:	e6a0      	b.n	8005962 <_printf_float+0xb6>
 8005c20:	2301      	movs	r3, #1
 8005c22:	4631      	mov	r1, r6
 8005c24:	4628      	mov	r0, r5
 8005c26:	920b      	str	r2, [sp, #44]	; 0x2c
 8005c28:	47b8      	blx	r7
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	f43f ae99 	beq.w	8005962 <_printf_float+0xb6>
 8005c30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c32:	f10b 0b01 	add.w	fp, fp, #1
 8005c36:	e7b9      	b.n	8005bac <_printf_float+0x300>
 8005c38:	4631      	mov	r1, r6
 8005c3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c3e:	4628      	mov	r0, r5
 8005c40:	47b8      	blx	r7
 8005c42:	3001      	adds	r0, #1
 8005c44:	d1bf      	bne.n	8005bc6 <_printf_float+0x31a>
 8005c46:	e68c      	b.n	8005962 <_printf_float+0xb6>
 8005c48:	464b      	mov	r3, r9
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	eb08 020a 	add.w	r2, r8, sl
 8005c52:	47b8      	blx	r7
 8005c54:	3001      	adds	r0, #1
 8005c56:	d1c2      	bne.n	8005bde <_printf_float+0x332>
 8005c58:	e683      	b.n	8005962 <_printf_float+0xb6>
 8005c5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c5c:	2a01      	cmp	r2, #1
 8005c5e:	dc01      	bgt.n	8005c64 <_printf_float+0x3b8>
 8005c60:	07db      	lsls	r3, r3, #31
 8005c62:	d539      	bpl.n	8005cd8 <_printf_float+0x42c>
 8005c64:	2301      	movs	r3, #1
 8005c66:	4642      	mov	r2, r8
 8005c68:	4631      	mov	r1, r6
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	47b8      	blx	r7
 8005c6e:	3001      	adds	r0, #1
 8005c70:	f43f ae77 	beq.w	8005962 <_printf_float+0xb6>
 8005c74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	47b8      	blx	r7
 8005c7e:	3001      	adds	r0, #1
 8005c80:	f43f ae6f 	beq.w	8005962 <_printf_float+0xb6>
 8005c84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005c90:	f7fa fe8a 	bl	80009a8 <__aeabi_dcmpeq>
 8005c94:	b9d8      	cbnz	r0, 8005cce <_printf_float+0x422>
 8005c96:	f109 33ff 	add.w	r3, r9, #4294967295
 8005c9a:	f108 0201 	add.w	r2, r8, #1
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	47b8      	blx	r7
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d10e      	bne.n	8005cc6 <_printf_float+0x41a>
 8005ca8:	e65b      	b.n	8005962 <_printf_float+0xb6>
 8005caa:	2301      	movs	r3, #1
 8005cac:	464a      	mov	r2, r9
 8005cae:	4631      	mov	r1, r6
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	47b8      	blx	r7
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	f43f ae54 	beq.w	8005962 <_printf_float+0xb6>
 8005cba:	f108 0801 	add.w	r8, r8, #1
 8005cbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	4543      	cmp	r3, r8
 8005cc4:	dcf1      	bgt.n	8005caa <_printf_float+0x3fe>
 8005cc6:	4653      	mov	r3, sl
 8005cc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ccc:	e6de      	b.n	8005a8c <_printf_float+0x1e0>
 8005cce:	f04f 0800 	mov.w	r8, #0
 8005cd2:	f104 091a 	add.w	r9, r4, #26
 8005cd6:	e7f2      	b.n	8005cbe <_printf_float+0x412>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	4642      	mov	r2, r8
 8005cdc:	e7df      	b.n	8005c9e <_printf_float+0x3f2>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	464a      	mov	r2, r9
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	47b8      	blx	r7
 8005ce8:	3001      	adds	r0, #1
 8005cea:	f43f ae3a 	beq.w	8005962 <_printf_float+0xb6>
 8005cee:	f108 0801 	add.w	r8, r8, #1
 8005cf2:	68e3      	ldr	r3, [r4, #12]
 8005cf4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005cf6:	1a5b      	subs	r3, r3, r1
 8005cf8:	4543      	cmp	r3, r8
 8005cfa:	dcf0      	bgt.n	8005cde <_printf_float+0x432>
 8005cfc:	e6fb      	b.n	8005af6 <_printf_float+0x24a>
 8005cfe:	f04f 0800 	mov.w	r8, #0
 8005d02:	f104 0919 	add.w	r9, r4, #25
 8005d06:	e7f4      	b.n	8005cf2 <_printf_float+0x446>

08005d08 <_printf_common>:
 8005d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d0c:	4616      	mov	r6, r2
 8005d0e:	4699      	mov	r9, r3
 8005d10:	688a      	ldr	r2, [r1, #8]
 8005d12:	690b      	ldr	r3, [r1, #16]
 8005d14:	4607      	mov	r7, r0
 8005d16:	4293      	cmp	r3, r2
 8005d18:	bfb8      	it	lt
 8005d1a:	4613      	movlt	r3, r2
 8005d1c:	6033      	str	r3, [r6, #0]
 8005d1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d22:	460c      	mov	r4, r1
 8005d24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d28:	b10a      	cbz	r2, 8005d2e <_printf_common+0x26>
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	6033      	str	r3, [r6, #0]
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	0699      	lsls	r1, r3, #26
 8005d32:	bf42      	ittt	mi
 8005d34:	6833      	ldrmi	r3, [r6, #0]
 8005d36:	3302      	addmi	r3, #2
 8005d38:	6033      	strmi	r3, [r6, #0]
 8005d3a:	6825      	ldr	r5, [r4, #0]
 8005d3c:	f015 0506 	ands.w	r5, r5, #6
 8005d40:	d106      	bne.n	8005d50 <_printf_common+0x48>
 8005d42:	f104 0a19 	add.w	sl, r4, #25
 8005d46:	68e3      	ldr	r3, [r4, #12]
 8005d48:	6832      	ldr	r2, [r6, #0]
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	42ab      	cmp	r3, r5
 8005d4e:	dc2b      	bgt.n	8005da8 <_printf_common+0xa0>
 8005d50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d54:	1e13      	subs	r3, r2, #0
 8005d56:	6822      	ldr	r2, [r4, #0]
 8005d58:	bf18      	it	ne
 8005d5a:	2301      	movne	r3, #1
 8005d5c:	0692      	lsls	r2, r2, #26
 8005d5e:	d430      	bmi.n	8005dc2 <_printf_common+0xba>
 8005d60:	4649      	mov	r1, r9
 8005d62:	4638      	mov	r0, r7
 8005d64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d68:	47c0      	blx	r8
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	d023      	beq.n	8005db6 <_printf_common+0xae>
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	6922      	ldr	r2, [r4, #16]
 8005d72:	f003 0306 	and.w	r3, r3, #6
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	bf14      	ite	ne
 8005d7a:	2500      	movne	r5, #0
 8005d7c:	6833      	ldreq	r3, [r6, #0]
 8005d7e:	f04f 0600 	mov.w	r6, #0
 8005d82:	bf08      	it	eq
 8005d84:	68e5      	ldreq	r5, [r4, #12]
 8005d86:	f104 041a 	add.w	r4, r4, #26
 8005d8a:	bf08      	it	eq
 8005d8c:	1aed      	subeq	r5, r5, r3
 8005d8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d92:	bf08      	it	eq
 8005d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	bfc4      	itt	gt
 8005d9c:	1a9b      	subgt	r3, r3, r2
 8005d9e:	18ed      	addgt	r5, r5, r3
 8005da0:	42b5      	cmp	r5, r6
 8005da2:	d11a      	bne.n	8005dda <_printf_common+0xd2>
 8005da4:	2000      	movs	r0, #0
 8005da6:	e008      	b.n	8005dba <_printf_common+0xb2>
 8005da8:	2301      	movs	r3, #1
 8005daa:	4652      	mov	r2, sl
 8005dac:	4649      	mov	r1, r9
 8005dae:	4638      	mov	r0, r7
 8005db0:	47c0      	blx	r8
 8005db2:	3001      	adds	r0, #1
 8005db4:	d103      	bne.n	8005dbe <_printf_common+0xb6>
 8005db6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dbe:	3501      	adds	r5, #1
 8005dc0:	e7c1      	b.n	8005d46 <_printf_common+0x3e>
 8005dc2:	2030      	movs	r0, #48	; 0x30
 8005dc4:	18e1      	adds	r1, r4, r3
 8005dc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dd0:	4422      	add	r2, r4
 8005dd2:	3302      	adds	r3, #2
 8005dd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dd8:	e7c2      	b.n	8005d60 <_printf_common+0x58>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	4622      	mov	r2, r4
 8005dde:	4649      	mov	r1, r9
 8005de0:	4638      	mov	r0, r7
 8005de2:	47c0      	blx	r8
 8005de4:	3001      	adds	r0, #1
 8005de6:	d0e6      	beq.n	8005db6 <_printf_common+0xae>
 8005de8:	3601      	adds	r6, #1
 8005dea:	e7d9      	b.n	8005da0 <_printf_common+0x98>

08005dec <_printf_i>:
 8005dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005df0:	7e0f      	ldrb	r7, [r1, #24]
 8005df2:	4691      	mov	r9, r2
 8005df4:	2f78      	cmp	r7, #120	; 0x78
 8005df6:	4680      	mov	r8, r0
 8005df8:	460c      	mov	r4, r1
 8005dfa:	469a      	mov	sl, r3
 8005dfc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005dfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e02:	d807      	bhi.n	8005e14 <_printf_i+0x28>
 8005e04:	2f62      	cmp	r7, #98	; 0x62
 8005e06:	d80a      	bhi.n	8005e1e <_printf_i+0x32>
 8005e08:	2f00      	cmp	r7, #0
 8005e0a:	f000 80d5 	beq.w	8005fb8 <_printf_i+0x1cc>
 8005e0e:	2f58      	cmp	r7, #88	; 0x58
 8005e10:	f000 80c1 	beq.w	8005f96 <_printf_i+0x1aa>
 8005e14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e1c:	e03a      	b.n	8005e94 <_printf_i+0xa8>
 8005e1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e22:	2b15      	cmp	r3, #21
 8005e24:	d8f6      	bhi.n	8005e14 <_printf_i+0x28>
 8005e26:	a101      	add	r1, pc, #4	; (adr r1, 8005e2c <_printf_i+0x40>)
 8005e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e2c:	08005e85 	.word	0x08005e85
 8005e30:	08005e99 	.word	0x08005e99
 8005e34:	08005e15 	.word	0x08005e15
 8005e38:	08005e15 	.word	0x08005e15
 8005e3c:	08005e15 	.word	0x08005e15
 8005e40:	08005e15 	.word	0x08005e15
 8005e44:	08005e99 	.word	0x08005e99
 8005e48:	08005e15 	.word	0x08005e15
 8005e4c:	08005e15 	.word	0x08005e15
 8005e50:	08005e15 	.word	0x08005e15
 8005e54:	08005e15 	.word	0x08005e15
 8005e58:	08005f9f 	.word	0x08005f9f
 8005e5c:	08005ec5 	.word	0x08005ec5
 8005e60:	08005f59 	.word	0x08005f59
 8005e64:	08005e15 	.word	0x08005e15
 8005e68:	08005e15 	.word	0x08005e15
 8005e6c:	08005fc1 	.word	0x08005fc1
 8005e70:	08005e15 	.word	0x08005e15
 8005e74:	08005ec5 	.word	0x08005ec5
 8005e78:	08005e15 	.word	0x08005e15
 8005e7c:	08005e15 	.word	0x08005e15
 8005e80:	08005f61 	.word	0x08005f61
 8005e84:	682b      	ldr	r3, [r5, #0]
 8005e86:	1d1a      	adds	r2, r3, #4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	602a      	str	r2, [r5, #0]
 8005e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e94:	2301      	movs	r3, #1
 8005e96:	e0a0      	b.n	8005fda <_printf_i+0x1ee>
 8005e98:	6820      	ldr	r0, [r4, #0]
 8005e9a:	682b      	ldr	r3, [r5, #0]
 8005e9c:	0607      	lsls	r7, r0, #24
 8005e9e:	f103 0104 	add.w	r1, r3, #4
 8005ea2:	6029      	str	r1, [r5, #0]
 8005ea4:	d501      	bpl.n	8005eaa <_printf_i+0xbe>
 8005ea6:	681e      	ldr	r6, [r3, #0]
 8005ea8:	e003      	b.n	8005eb2 <_printf_i+0xc6>
 8005eaa:	0646      	lsls	r6, r0, #25
 8005eac:	d5fb      	bpl.n	8005ea6 <_printf_i+0xba>
 8005eae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005eb2:	2e00      	cmp	r6, #0
 8005eb4:	da03      	bge.n	8005ebe <_printf_i+0xd2>
 8005eb6:	232d      	movs	r3, #45	; 0x2d
 8005eb8:	4276      	negs	r6, r6
 8005eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ebe:	230a      	movs	r3, #10
 8005ec0:	4859      	ldr	r0, [pc, #356]	; (8006028 <_printf_i+0x23c>)
 8005ec2:	e012      	b.n	8005eea <_printf_i+0xfe>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	6820      	ldr	r0, [r4, #0]
 8005ec8:	1d19      	adds	r1, r3, #4
 8005eca:	6029      	str	r1, [r5, #0]
 8005ecc:	0605      	lsls	r5, r0, #24
 8005ece:	d501      	bpl.n	8005ed4 <_printf_i+0xe8>
 8005ed0:	681e      	ldr	r6, [r3, #0]
 8005ed2:	e002      	b.n	8005eda <_printf_i+0xee>
 8005ed4:	0641      	lsls	r1, r0, #25
 8005ed6:	d5fb      	bpl.n	8005ed0 <_printf_i+0xe4>
 8005ed8:	881e      	ldrh	r6, [r3, #0]
 8005eda:	2f6f      	cmp	r7, #111	; 0x6f
 8005edc:	bf0c      	ite	eq
 8005ede:	2308      	moveq	r3, #8
 8005ee0:	230a      	movne	r3, #10
 8005ee2:	4851      	ldr	r0, [pc, #324]	; (8006028 <_printf_i+0x23c>)
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005eea:	6865      	ldr	r5, [r4, #4]
 8005eec:	2d00      	cmp	r5, #0
 8005eee:	bfa8      	it	ge
 8005ef0:	6821      	ldrge	r1, [r4, #0]
 8005ef2:	60a5      	str	r5, [r4, #8]
 8005ef4:	bfa4      	itt	ge
 8005ef6:	f021 0104 	bicge.w	r1, r1, #4
 8005efa:	6021      	strge	r1, [r4, #0]
 8005efc:	b90e      	cbnz	r6, 8005f02 <_printf_i+0x116>
 8005efe:	2d00      	cmp	r5, #0
 8005f00:	d04b      	beq.n	8005f9a <_printf_i+0x1ae>
 8005f02:	4615      	mov	r5, r2
 8005f04:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f08:	fb03 6711 	mls	r7, r3, r1, r6
 8005f0c:	5dc7      	ldrb	r7, [r0, r7]
 8005f0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f12:	4637      	mov	r7, r6
 8005f14:	42bb      	cmp	r3, r7
 8005f16:	460e      	mov	r6, r1
 8005f18:	d9f4      	bls.n	8005f04 <_printf_i+0x118>
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d10b      	bne.n	8005f36 <_printf_i+0x14a>
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	07de      	lsls	r6, r3, #31
 8005f22:	d508      	bpl.n	8005f36 <_printf_i+0x14a>
 8005f24:	6923      	ldr	r3, [r4, #16]
 8005f26:	6861      	ldr	r1, [r4, #4]
 8005f28:	4299      	cmp	r1, r3
 8005f2a:	bfde      	ittt	le
 8005f2c:	2330      	movle	r3, #48	; 0x30
 8005f2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f36:	1b52      	subs	r2, r2, r5
 8005f38:	6122      	str	r2, [r4, #16]
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	4640      	mov	r0, r8
 8005f40:	f8cd a000 	str.w	sl, [sp]
 8005f44:	aa03      	add	r2, sp, #12
 8005f46:	f7ff fedf 	bl	8005d08 <_printf_common>
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d14a      	bne.n	8005fe4 <_printf_i+0x1f8>
 8005f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f52:	b004      	add	sp, #16
 8005f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	f043 0320 	orr.w	r3, r3, #32
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	2778      	movs	r7, #120	; 0x78
 8005f62:	4832      	ldr	r0, [pc, #200]	; (800602c <_printf_i+0x240>)
 8005f64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	6829      	ldr	r1, [r5, #0]
 8005f6c:	061f      	lsls	r7, r3, #24
 8005f6e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f72:	d402      	bmi.n	8005f7a <_printf_i+0x18e>
 8005f74:	065f      	lsls	r7, r3, #25
 8005f76:	bf48      	it	mi
 8005f78:	b2b6      	uxthmi	r6, r6
 8005f7a:	07df      	lsls	r7, r3, #31
 8005f7c:	bf48      	it	mi
 8005f7e:	f043 0320 	orrmi.w	r3, r3, #32
 8005f82:	6029      	str	r1, [r5, #0]
 8005f84:	bf48      	it	mi
 8005f86:	6023      	strmi	r3, [r4, #0]
 8005f88:	b91e      	cbnz	r6, 8005f92 <_printf_i+0x1a6>
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	f023 0320 	bic.w	r3, r3, #32
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	2310      	movs	r3, #16
 8005f94:	e7a6      	b.n	8005ee4 <_printf_i+0xf8>
 8005f96:	4824      	ldr	r0, [pc, #144]	; (8006028 <_printf_i+0x23c>)
 8005f98:	e7e4      	b.n	8005f64 <_printf_i+0x178>
 8005f9a:	4615      	mov	r5, r2
 8005f9c:	e7bd      	b.n	8005f1a <_printf_i+0x12e>
 8005f9e:	682b      	ldr	r3, [r5, #0]
 8005fa0:	6826      	ldr	r6, [r4, #0]
 8005fa2:	1d18      	adds	r0, r3, #4
 8005fa4:	6961      	ldr	r1, [r4, #20]
 8005fa6:	6028      	str	r0, [r5, #0]
 8005fa8:	0635      	lsls	r5, r6, #24
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	d501      	bpl.n	8005fb2 <_printf_i+0x1c6>
 8005fae:	6019      	str	r1, [r3, #0]
 8005fb0:	e002      	b.n	8005fb8 <_printf_i+0x1cc>
 8005fb2:	0670      	lsls	r0, r6, #25
 8005fb4:	d5fb      	bpl.n	8005fae <_printf_i+0x1c2>
 8005fb6:	8019      	strh	r1, [r3, #0]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	4615      	mov	r5, r2
 8005fbc:	6123      	str	r3, [r4, #16]
 8005fbe:	e7bc      	b.n	8005f3a <_printf_i+0x14e>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	1d1a      	adds	r2, r3, #4
 8005fc6:	602a      	str	r2, [r5, #0]
 8005fc8:	681d      	ldr	r5, [r3, #0]
 8005fca:	6862      	ldr	r2, [r4, #4]
 8005fcc:	4628      	mov	r0, r5
 8005fce:	f000 f9d4 	bl	800637a <memchr>
 8005fd2:	b108      	cbz	r0, 8005fd8 <_printf_i+0x1ec>
 8005fd4:	1b40      	subs	r0, r0, r5
 8005fd6:	6060      	str	r0, [r4, #4]
 8005fd8:	6863      	ldr	r3, [r4, #4]
 8005fda:	6123      	str	r3, [r4, #16]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fe2:	e7aa      	b.n	8005f3a <_printf_i+0x14e>
 8005fe4:	462a      	mov	r2, r5
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	4640      	mov	r0, r8
 8005fea:	6923      	ldr	r3, [r4, #16]
 8005fec:	47d0      	blx	sl
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d0ad      	beq.n	8005f4e <_printf_i+0x162>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	079b      	lsls	r3, r3, #30
 8005ff6:	d413      	bmi.n	8006020 <_printf_i+0x234>
 8005ff8:	68e0      	ldr	r0, [r4, #12]
 8005ffa:	9b03      	ldr	r3, [sp, #12]
 8005ffc:	4298      	cmp	r0, r3
 8005ffe:	bfb8      	it	lt
 8006000:	4618      	movlt	r0, r3
 8006002:	e7a6      	b.n	8005f52 <_printf_i+0x166>
 8006004:	2301      	movs	r3, #1
 8006006:	4632      	mov	r2, r6
 8006008:	4649      	mov	r1, r9
 800600a:	4640      	mov	r0, r8
 800600c:	47d0      	blx	sl
 800600e:	3001      	adds	r0, #1
 8006010:	d09d      	beq.n	8005f4e <_printf_i+0x162>
 8006012:	3501      	adds	r5, #1
 8006014:	68e3      	ldr	r3, [r4, #12]
 8006016:	9903      	ldr	r1, [sp, #12]
 8006018:	1a5b      	subs	r3, r3, r1
 800601a:	42ab      	cmp	r3, r5
 800601c:	dcf2      	bgt.n	8006004 <_printf_i+0x218>
 800601e:	e7eb      	b.n	8005ff8 <_printf_i+0x20c>
 8006020:	2500      	movs	r5, #0
 8006022:	f104 0619 	add.w	r6, r4, #25
 8006026:	e7f5      	b.n	8006014 <_printf_i+0x228>
 8006028:	08009054 	.word	0x08009054
 800602c:	08009065 	.word	0x08009065

08006030 <std>:
 8006030:	2300      	movs	r3, #0
 8006032:	b510      	push	{r4, lr}
 8006034:	4604      	mov	r4, r0
 8006036:	e9c0 3300 	strd	r3, r3, [r0]
 800603a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800603e:	6083      	str	r3, [r0, #8]
 8006040:	8181      	strh	r1, [r0, #12]
 8006042:	6643      	str	r3, [r0, #100]	; 0x64
 8006044:	81c2      	strh	r2, [r0, #14]
 8006046:	6183      	str	r3, [r0, #24]
 8006048:	4619      	mov	r1, r3
 800604a:	2208      	movs	r2, #8
 800604c:	305c      	adds	r0, #92	; 0x5c
 800604e:	f000 f914 	bl	800627a <memset>
 8006052:	4b0d      	ldr	r3, [pc, #52]	; (8006088 <std+0x58>)
 8006054:	6224      	str	r4, [r4, #32]
 8006056:	6263      	str	r3, [r4, #36]	; 0x24
 8006058:	4b0c      	ldr	r3, [pc, #48]	; (800608c <std+0x5c>)
 800605a:	62a3      	str	r3, [r4, #40]	; 0x28
 800605c:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <std+0x60>)
 800605e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006060:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <std+0x64>)
 8006062:	6323      	str	r3, [r4, #48]	; 0x30
 8006064:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <std+0x68>)
 8006066:	429c      	cmp	r4, r3
 8006068:	d006      	beq.n	8006078 <std+0x48>
 800606a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800606e:	4294      	cmp	r4, r2
 8006070:	d002      	beq.n	8006078 <std+0x48>
 8006072:	33d0      	adds	r3, #208	; 0xd0
 8006074:	429c      	cmp	r4, r3
 8006076:	d105      	bne.n	8006084 <std+0x54>
 8006078:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800607c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006080:	f000 b978 	b.w	8006374 <__retarget_lock_init_recursive>
 8006084:	bd10      	pop	{r4, pc}
 8006086:	bf00      	nop
 8006088:	080061f5 	.word	0x080061f5
 800608c:	08006217 	.word	0x08006217
 8006090:	0800624f 	.word	0x0800624f
 8006094:	08006273 	.word	0x08006273
 8006098:	2000065c 	.word	0x2000065c

0800609c <stdio_exit_handler>:
 800609c:	4a02      	ldr	r2, [pc, #8]	; (80060a8 <stdio_exit_handler+0xc>)
 800609e:	4903      	ldr	r1, [pc, #12]	; (80060ac <stdio_exit_handler+0x10>)
 80060a0:	4803      	ldr	r0, [pc, #12]	; (80060b0 <stdio_exit_handler+0x14>)
 80060a2:	f000 b869 	b.w	8006178 <_fwalk_sglue>
 80060a6:	bf00      	nop
 80060a8:	20000014 	.word	0x20000014
 80060ac:	08007d2d 	.word	0x08007d2d
 80060b0:	20000020 	.word	0x20000020

080060b4 <cleanup_stdio>:
 80060b4:	6841      	ldr	r1, [r0, #4]
 80060b6:	4b0c      	ldr	r3, [pc, #48]	; (80060e8 <cleanup_stdio+0x34>)
 80060b8:	b510      	push	{r4, lr}
 80060ba:	4299      	cmp	r1, r3
 80060bc:	4604      	mov	r4, r0
 80060be:	d001      	beq.n	80060c4 <cleanup_stdio+0x10>
 80060c0:	f001 fe34 	bl	8007d2c <_fflush_r>
 80060c4:	68a1      	ldr	r1, [r4, #8]
 80060c6:	4b09      	ldr	r3, [pc, #36]	; (80060ec <cleanup_stdio+0x38>)
 80060c8:	4299      	cmp	r1, r3
 80060ca:	d002      	beq.n	80060d2 <cleanup_stdio+0x1e>
 80060cc:	4620      	mov	r0, r4
 80060ce:	f001 fe2d 	bl	8007d2c <_fflush_r>
 80060d2:	68e1      	ldr	r1, [r4, #12]
 80060d4:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <cleanup_stdio+0x3c>)
 80060d6:	4299      	cmp	r1, r3
 80060d8:	d004      	beq.n	80060e4 <cleanup_stdio+0x30>
 80060da:	4620      	mov	r0, r4
 80060dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e0:	f001 be24 	b.w	8007d2c <_fflush_r>
 80060e4:	bd10      	pop	{r4, pc}
 80060e6:	bf00      	nop
 80060e8:	2000065c 	.word	0x2000065c
 80060ec:	200006c4 	.word	0x200006c4
 80060f0:	2000072c 	.word	0x2000072c

080060f4 <global_stdio_init.part.0>:
 80060f4:	b510      	push	{r4, lr}
 80060f6:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <global_stdio_init.part.0+0x30>)
 80060f8:	4c0b      	ldr	r4, [pc, #44]	; (8006128 <global_stdio_init.part.0+0x34>)
 80060fa:	4a0c      	ldr	r2, [pc, #48]	; (800612c <global_stdio_init.part.0+0x38>)
 80060fc:	4620      	mov	r0, r4
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	2104      	movs	r1, #4
 8006102:	2200      	movs	r2, #0
 8006104:	f7ff ff94 	bl	8006030 <std>
 8006108:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800610c:	2201      	movs	r2, #1
 800610e:	2109      	movs	r1, #9
 8006110:	f7ff ff8e 	bl	8006030 <std>
 8006114:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006118:	2202      	movs	r2, #2
 800611a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800611e:	2112      	movs	r1, #18
 8006120:	f7ff bf86 	b.w	8006030 <std>
 8006124:	20000794 	.word	0x20000794
 8006128:	2000065c 	.word	0x2000065c
 800612c:	0800609d 	.word	0x0800609d

08006130 <__sfp_lock_acquire>:
 8006130:	4801      	ldr	r0, [pc, #4]	; (8006138 <__sfp_lock_acquire+0x8>)
 8006132:	f000 b920 	b.w	8006376 <__retarget_lock_acquire_recursive>
 8006136:	bf00      	nop
 8006138:	2000079d 	.word	0x2000079d

0800613c <__sfp_lock_release>:
 800613c:	4801      	ldr	r0, [pc, #4]	; (8006144 <__sfp_lock_release+0x8>)
 800613e:	f000 b91b 	b.w	8006378 <__retarget_lock_release_recursive>
 8006142:	bf00      	nop
 8006144:	2000079d 	.word	0x2000079d

08006148 <__sinit>:
 8006148:	b510      	push	{r4, lr}
 800614a:	4604      	mov	r4, r0
 800614c:	f7ff fff0 	bl	8006130 <__sfp_lock_acquire>
 8006150:	6a23      	ldr	r3, [r4, #32]
 8006152:	b11b      	cbz	r3, 800615c <__sinit+0x14>
 8006154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006158:	f7ff bff0 	b.w	800613c <__sfp_lock_release>
 800615c:	4b04      	ldr	r3, [pc, #16]	; (8006170 <__sinit+0x28>)
 800615e:	6223      	str	r3, [r4, #32]
 8006160:	4b04      	ldr	r3, [pc, #16]	; (8006174 <__sinit+0x2c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1f5      	bne.n	8006154 <__sinit+0xc>
 8006168:	f7ff ffc4 	bl	80060f4 <global_stdio_init.part.0>
 800616c:	e7f2      	b.n	8006154 <__sinit+0xc>
 800616e:	bf00      	nop
 8006170:	080060b5 	.word	0x080060b5
 8006174:	20000794 	.word	0x20000794

08006178 <_fwalk_sglue>:
 8006178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800617c:	4607      	mov	r7, r0
 800617e:	4688      	mov	r8, r1
 8006180:	4614      	mov	r4, r2
 8006182:	2600      	movs	r6, #0
 8006184:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006188:	f1b9 0901 	subs.w	r9, r9, #1
 800618c:	d505      	bpl.n	800619a <_fwalk_sglue+0x22>
 800618e:	6824      	ldr	r4, [r4, #0]
 8006190:	2c00      	cmp	r4, #0
 8006192:	d1f7      	bne.n	8006184 <_fwalk_sglue+0xc>
 8006194:	4630      	mov	r0, r6
 8006196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800619a:	89ab      	ldrh	r3, [r5, #12]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d907      	bls.n	80061b0 <_fwalk_sglue+0x38>
 80061a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061a4:	3301      	adds	r3, #1
 80061a6:	d003      	beq.n	80061b0 <_fwalk_sglue+0x38>
 80061a8:	4629      	mov	r1, r5
 80061aa:	4638      	mov	r0, r7
 80061ac:	47c0      	blx	r8
 80061ae:	4306      	orrs	r6, r0
 80061b0:	3568      	adds	r5, #104	; 0x68
 80061b2:	e7e9      	b.n	8006188 <_fwalk_sglue+0x10>

080061b4 <siprintf>:
 80061b4:	b40e      	push	{r1, r2, r3}
 80061b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061ba:	b500      	push	{lr}
 80061bc:	b09c      	sub	sp, #112	; 0x70
 80061be:	ab1d      	add	r3, sp, #116	; 0x74
 80061c0:	9002      	str	r0, [sp, #8]
 80061c2:	9006      	str	r0, [sp, #24]
 80061c4:	9107      	str	r1, [sp, #28]
 80061c6:	9104      	str	r1, [sp, #16]
 80061c8:	4808      	ldr	r0, [pc, #32]	; (80061ec <siprintf+0x38>)
 80061ca:	4909      	ldr	r1, [pc, #36]	; (80061f0 <siprintf+0x3c>)
 80061cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80061d0:	9105      	str	r1, [sp, #20]
 80061d2:	6800      	ldr	r0, [r0, #0]
 80061d4:	a902      	add	r1, sp, #8
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	f001 fc28 	bl	8007a2c <_svfiprintf_r>
 80061dc:	2200      	movs	r2, #0
 80061de:	9b02      	ldr	r3, [sp, #8]
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	b01c      	add	sp, #112	; 0x70
 80061e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80061e8:	b003      	add	sp, #12
 80061ea:	4770      	bx	lr
 80061ec:	2000006c 	.word	0x2000006c
 80061f0:	ffff0208 	.word	0xffff0208

080061f4 <__sread>:
 80061f4:	b510      	push	{r4, lr}
 80061f6:	460c      	mov	r4, r1
 80061f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061fc:	f000 f86c 	bl	80062d8 <_read_r>
 8006200:	2800      	cmp	r0, #0
 8006202:	bfab      	itete	ge
 8006204:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006206:	89a3      	ldrhlt	r3, [r4, #12]
 8006208:	181b      	addge	r3, r3, r0
 800620a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800620e:	bfac      	ite	ge
 8006210:	6563      	strge	r3, [r4, #84]	; 0x54
 8006212:	81a3      	strhlt	r3, [r4, #12]
 8006214:	bd10      	pop	{r4, pc}

08006216 <__swrite>:
 8006216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800621a:	461f      	mov	r7, r3
 800621c:	898b      	ldrh	r3, [r1, #12]
 800621e:	4605      	mov	r5, r0
 8006220:	05db      	lsls	r3, r3, #23
 8006222:	460c      	mov	r4, r1
 8006224:	4616      	mov	r6, r2
 8006226:	d505      	bpl.n	8006234 <__swrite+0x1e>
 8006228:	2302      	movs	r3, #2
 800622a:	2200      	movs	r2, #0
 800622c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006230:	f000 f840 	bl	80062b4 <_lseek_r>
 8006234:	89a3      	ldrh	r3, [r4, #12]
 8006236:	4632      	mov	r2, r6
 8006238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800623c:	81a3      	strh	r3, [r4, #12]
 800623e:	4628      	mov	r0, r5
 8006240:	463b      	mov	r3, r7
 8006242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800624a:	f000 b857 	b.w	80062fc <_write_r>

0800624e <__sseek>:
 800624e:	b510      	push	{r4, lr}
 8006250:	460c      	mov	r4, r1
 8006252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006256:	f000 f82d 	bl	80062b4 <_lseek_r>
 800625a:	1c43      	adds	r3, r0, #1
 800625c:	89a3      	ldrh	r3, [r4, #12]
 800625e:	bf15      	itete	ne
 8006260:	6560      	strne	r0, [r4, #84]	; 0x54
 8006262:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006266:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800626a:	81a3      	strheq	r3, [r4, #12]
 800626c:	bf18      	it	ne
 800626e:	81a3      	strhne	r3, [r4, #12]
 8006270:	bd10      	pop	{r4, pc}

08006272 <__sclose>:
 8006272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006276:	f000 b80d 	b.w	8006294 <_close_r>

0800627a <memset>:
 800627a:	4603      	mov	r3, r0
 800627c:	4402      	add	r2, r0
 800627e:	4293      	cmp	r3, r2
 8006280:	d100      	bne.n	8006284 <memset+0xa>
 8006282:	4770      	bx	lr
 8006284:	f803 1b01 	strb.w	r1, [r3], #1
 8006288:	e7f9      	b.n	800627e <memset+0x4>
	...

0800628c <_localeconv_r>:
 800628c:	4800      	ldr	r0, [pc, #0]	; (8006290 <_localeconv_r+0x4>)
 800628e:	4770      	bx	lr
 8006290:	20000160 	.word	0x20000160

08006294 <_close_r>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	2300      	movs	r3, #0
 8006298:	4d05      	ldr	r5, [pc, #20]	; (80062b0 <_close_r+0x1c>)
 800629a:	4604      	mov	r4, r0
 800629c:	4608      	mov	r0, r1
 800629e:	602b      	str	r3, [r5, #0]
 80062a0:	f7fc fe48 	bl	8002f34 <_close>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_close_r+0x1a>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_close_r+0x1a>
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	20000798 	.word	0x20000798

080062b4 <_lseek_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4604      	mov	r4, r0
 80062b8:	4608      	mov	r0, r1
 80062ba:	4611      	mov	r1, r2
 80062bc:	2200      	movs	r2, #0
 80062be:	4d05      	ldr	r5, [pc, #20]	; (80062d4 <_lseek_r+0x20>)
 80062c0:	602a      	str	r2, [r5, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	f7fc fe5a 	bl	8002f7c <_lseek>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d102      	bne.n	80062d2 <_lseek_r+0x1e>
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	b103      	cbz	r3, 80062d2 <_lseek_r+0x1e>
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
 80062d4:	20000798 	.word	0x20000798

080062d8 <_read_r>:
 80062d8:	b538      	push	{r3, r4, r5, lr}
 80062da:	4604      	mov	r4, r0
 80062dc:	4608      	mov	r0, r1
 80062de:	4611      	mov	r1, r2
 80062e0:	2200      	movs	r2, #0
 80062e2:	4d05      	ldr	r5, [pc, #20]	; (80062f8 <_read_r+0x20>)
 80062e4:	602a      	str	r2, [r5, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	f7fc fdeb 	bl	8002ec2 <_read>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d102      	bne.n	80062f6 <_read_r+0x1e>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	b103      	cbz	r3, 80062f6 <_read_r+0x1e>
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	bd38      	pop	{r3, r4, r5, pc}
 80062f8:	20000798 	.word	0x20000798

080062fc <_write_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4604      	mov	r4, r0
 8006300:	4608      	mov	r0, r1
 8006302:	4611      	mov	r1, r2
 8006304:	2200      	movs	r2, #0
 8006306:	4d05      	ldr	r5, [pc, #20]	; (800631c <_write_r+0x20>)
 8006308:	602a      	str	r2, [r5, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	f7fc fdf6 	bl	8002efc <_write>
 8006310:	1c43      	adds	r3, r0, #1
 8006312:	d102      	bne.n	800631a <_write_r+0x1e>
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	b103      	cbz	r3, 800631a <_write_r+0x1e>
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	bd38      	pop	{r3, r4, r5, pc}
 800631c:	20000798 	.word	0x20000798

08006320 <__errno>:
 8006320:	4b01      	ldr	r3, [pc, #4]	; (8006328 <__errno+0x8>)
 8006322:	6818      	ldr	r0, [r3, #0]
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	2000006c 	.word	0x2000006c

0800632c <__libc_init_array>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	2600      	movs	r6, #0
 8006330:	4d0c      	ldr	r5, [pc, #48]	; (8006364 <__libc_init_array+0x38>)
 8006332:	4c0d      	ldr	r4, [pc, #52]	; (8006368 <__libc_init_array+0x3c>)
 8006334:	1b64      	subs	r4, r4, r5
 8006336:	10a4      	asrs	r4, r4, #2
 8006338:	42a6      	cmp	r6, r4
 800633a:	d109      	bne.n	8006350 <__libc_init_array+0x24>
 800633c:	f002 fdea 	bl	8008f14 <_init>
 8006340:	2600      	movs	r6, #0
 8006342:	4d0a      	ldr	r5, [pc, #40]	; (800636c <__libc_init_array+0x40>)
 8006344:	4c0a      	ldr	r4, [pc, #40]	; (8006370 <__libc_init_array+0x44>)
 8006346:	1b64      	subs	r4, r4, r5
 8006348:	10a4      	asrs	r4, r4, #2
 800634a:	42a6      	cmp	r6, r4
 800634c:	d105      	bne.n	800635a <__libc_init_array+0x2e>
 800634e:	bd70      	pop	{r4, r5, r6, pc}
 8006350:	f855 3b04 	ldr.w	r3, [r5], #4
 8006354:	4798      	blx	r3
 8006356:	3601      	adds	r6, #1
 8006358:	e7ee      	b.n	8006338 <__libc_init_array+0xc>
 800635a:	f855 3b04 	ldr.w	r3, [r5], #4
 800635e:	4798      	blx	r3
 8006360:	3601      	adds	r6, #1
 8006362:	e7f2      	b.n	800634a <__libc_init_array+0x1e>
 8006364:	08009430 	.word	0x08009430
 8006368:	08009430 	.word	0x08009430
 800636c:	08009430 	.word	0x08009430
 8006370:	08009434 	.word	0x08009434

08006374 <__retarget_lock_init_recursive>:
 8006374:	4770      	bx	lr

08006376 <__retarget_lock_acquire_recursive>:
 8006376:	4770      	bx	lr

08006378 <__retarget_lock_release_recursive>:
 8006378:	4770      	bx	lr

0800637a <memchr>:
 800637a:	4603      	mov	r3, r0
 800637c:	b510      	push	{r4, lr}
 800637e:	b2c9      	uxtb	r1, r1
 8006380:	4402      	add	r2, r0
 8006382:	4293      	cmp	r3, r2
 8006384:	4618      	mov	r0, r3
 8006386:	d101      	bne.n	800638c <memchr+0x12>
 8006388:	2000      	movs	r0, #0
 800638a:	e003      	b.n	8006394 <memchr+0x1a>
 800638c:	7804      	ldrb	r4, [r0, #0]
 800638e:	3301      	adds	r3, #1
 8006390:	428c      	cmp	r4, r1
 8006392:	d1f6      	bne.n	8006382 <memchr+0x8>
 8006394:	bd10      	pop	{r4, pc}

08006396 <memcpy>:
 8006396:	440a      	add	r2, r1
 8006398:	4291      	cmp	r1, r2
 800639a:	f100 33ff 	add.w	r3, r0, #4294967295
 800639e:	d100      	bne.n	80063a2 <memcpy+0xc>
 80063a0:	4770      	bx	lr
 80063a2:	b510      	push	{r4, lr}
 80063a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063a8:	4291      	cmp	r1, r2
 80063aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ae:	d1f9      	bne.n	80063a4 <memcpy+0xe>
 80063b0:	bd10      	pop	{r4, pc}

080063b2 <quorem>:
 80063b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b6:	6903      	ldr	r3, [r0, #16]
 80063b8:	690c      	ldr	r4, [r1, #16]
 80063ba:	4607      	mov	r7, r0
 80063bc:	42a3      	cmp	r3, r4
 80063be:	db7f      	blt.n	80064c0 <quorem+0x10e>
 80063c0:	3c01      	subs	r4, #1
 80063c2:	f100 0514 	add.w	r5, r0, #20
 80063c6:	f101 0814 	add.w	r8, r1, #20
 80063ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063ce:	9301      	str	r3, [sp, #4]
 80063d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063d8:	3301      	adds	r3, #1
 80063da:	429a      	cmp	r2, r3
 80063dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80063e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063e8:	d331      	bcc.n	800644e <quorem+0x9c>
 80063ea:	f04f 0e00 	mov.w	lr, #0
 80063ee:	4640      	mov	r0, r8
 80063f0:	46ac      	mov	ip, r5
 80063f2:	46f2      	mov	sl, lr
 80063f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80063f8:	b293      	uxth	r3, r2
 80063fa:	fb06 e303 	mla	r3, r6, r3, lr
 80063fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006402:	0c1a      	lsrs	r2, r3, #16
 8006404:	b29b      	uxth	r3, r3
 8006406:	fb06 220e 	mla	r2, r6, lr, r2
 800640a:	ebaa 0303 	sub.w	r3, sl, r3
 800640e:	f8dc a000 	ldr.w	sl, [ip]
 8006412:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006416:	fa1f fa8a 	uxth.w	sl, sl
 800641a:	4453      	add	r3, sl
 800641c:	f8dc a000 	ldr.w	sl, [ip]
 8006420:	b292      	uxth	r2, r2
 8006422:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006426:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800642a:	b29b      	uxth	r3, r3
 800642c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006430:	4581      	cmp	r9, r0
 8006432:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006436:	f84c 3b04 	str.w	r3, [ip], #4
 800643a:	d2db      	bcs.n	80063f4 <quorem+0x42>
 800643c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006440:	b92b      	cbnz	r3, 800644e <quorem+0x9c>
 8006442:	9b01      	ldr	r3, [sp, #4]
 8006444:	3b04      	subs	r3, #4
 8006446:	429d      	cmp	r5, r3
 8006448:	461a      	mov	r2, r3
 800644a:	d32d      	bcc.n	80064a8 <quorem+0xf6>
 800644c:	613c      	str	r4, [r7, #16]
 800644e:	4638      	mov	r0, r7
 8006450:	f001 f994 	bl	800777c <__mcmp>
 8006454:	2800      	cmp	r0, #0
 8006456:	db23      	blt.n	80064a0 <quorem+0xee>
 8006458:	4629      	mov	r1, r5
 800645a:	2000      	movs	r0, #0
 800645c:	3601      	adds	r6, #1
 800645e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006462:	f8d1 c000 	ldr.w	ip, [r1]
 8006466:	b293      	uxth	r3, r2
 8006468:	1ac3      	subs	r3, r0, r3
 800646a:	0c12      	lsrs	r2, r2, #16
 800646c:	fa1f f08c 	uxth.w	r0, ip
 8006470:	4403      	add	r3, r0
 8006472:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006476:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800647a:	b29b      	uxth	r3, r3
 800647c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006480:	45c1      	cmp	r9, r8
 8006482:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006486:	f841 3b04 	str.w	r3, [r1], #4
 800648a:	d2e8      	bcs.n	800645e <quorem+0xac>
 800648c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006490:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006494:	b922      	cbnz	r2, 80064a0 <quorem+0xee>
 8006496:	3b04      	subs	r3, #4
 8006498:	429d      	cmp	r5, r3
 800649a:	461a      	mov	r2, r3
 800649c:	d30a      	bcc.n	80064b4 <quorem+0x102>
 800649e:	613c      	str	r4, [r7, #16]
 80064a0:	4630      	mov	r0, r6
 80064a2:	b003      	add	sp, #12
 80064a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a8:	6812      	ldr	r2, [r2, #0]
 80064aa:	3b04      	subs	r3, #4
 80064ac:	2a00      	cmp	r2, #0
 80064ae:	d1cd      	bne.n	800644c <quorem+0x9a>
 80064b0:	3c01      	subs	r4, #1
 80064b2:	e7c8      	b.n	8006446 <quorem+0x94>
 80064b4:	6812      	ldr	r2, [r2, #0]
 80064b6:	3b04      	subs	r3, #4
 80064b8:	2a00      	cmp	r2, #0
 80064ba:	d1f0      	bne.n	800649e <quorem+0xec>
 80064bc:	3c01      	subs	r4, #1
 80064be:	e7eb      	b.n	8006498 <quorem+0xe6>
 80064c0:	2000      	movs	r0, #0
 80064c2:	e7ee      	b.n	80064a2 <quorem+0xf0>
 80064c4:	0000      	movs	r0, r0
	...

080064c8 <_dtoa_r>:
 80064c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064cc:	4616      	mov	r6, r2
 80064ce:	461f      	mov	r7, r3
 80064d0:	69c4      	ldr	r4, [r0, #28]
 80064d2:	b099      	sub	sp, #100	; 0x64
 80064d4:	4605      	mov	r5, r0
 80064d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80064da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80064de:	b974      	cbnz	r4, 80064fe <_dtoa_r+0x36>
 80064e0:	2010      	movs	r0, #16
 80064e2:	f000 fe1d 	bl	8007120 <malloc>
 80064e6:	4602      	mov	r2, r0
 80064e8:	61e8      	str	r0, [r5, #28]
 80064ea:	b920      	cbnz	r0, 80064f6 <_dtoa_r+0x2e>
 80064ec:	21ef      	movs	r1, #239	; 0xef
 80064ee:	4bac      	ldr	r3, [pc, #688]	; (80067a0 <_dtoa_r+0x2d8>)
 80064f0:	48ac      	ldr	r0, [pc, #688]	; (80067a4 <_dtoa_r+0x2dc>)
 80064f2:	f001 fc6d 	bl	8007dd0 <__assert_func>
 80064f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064fa:	6004      	str	r4, [r0, #0]
 80064fc:	60c4      	str	r4, [r0, #12]
 80064fe:	69eb      	ldr	r3, [r5, #28]
 8006500:	6819      	ldr	r1, [r3, #0]
 8006502:	b151      	cbz	r1, 800651a <_dtoa_r+0x52>
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	2301      	movs	r3, #1
 8006508:	4093      	lsls	r3, r2
 800650a:	604a      	str	r2, [r1, #4]
 800650c:	608b      	str	r3, [r1, #8]
 800650e:	4628      	mov	r0, r5
 8006510:	f000 fefa 	bl	8007308 <_Bfree>
 8006514:	2200      	movs	r2, #0
 8006516:	69eb      	ldr	r3, [r5, #28]
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	1e3b      	subs	r3, r7, #0
 800651c:	bfaf      	iteee	ge
 800651e:	2300      	movge	r3, #0
 8006520:	2201      	movlt	r2, #1
 8006522:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006526:	9305      	strlt	r3, [sp, #20]
 8006528:	bfa8      	it	ge
 800652a:	f8c8 3000 	strge.w	r3, [r8]
 800652e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006532:	4b9d      	ldr	r3, [pc, #628]	; (80067a8 <_dtoa_r+0x2e0>)
 8006534:	bfb8      	it	lt
 8006536:	f8c8 2000 	strlt.w	r2, [r8]
 800653a:	ea33 0309 	bics.w	r3, r3, r9
 800653e:	d119      	bne.n	8006574 <_dtoa_r+0xac>
 8006540:	f242 730f 	movw	r3, #9999	; 0x270f
 8006544:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800654c:	4333      	orrs	r3, r6
 800654e:	f000 8589 	beq.w	8007064 <_dtoa_r+0xb9c>
 8006552:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006554:	b953      	cbnz	r3, 800656c <_dtoa_r+0xa4>
 8006556:	4b95      	ldr	r3, [pc, #596]	; (80067ac <_dtoa_r+0x2e4>)
 8006558:	e023      	b.n	80065a2 <_dtoa_r+0xda>
 800655a:	4b95      	ldr	r3, [pc, #596]	; (80067b0 <_dtoa_r+0x2e8>)
 800655c:	9303      	str	r3, [sp, #12]
 800655e:	3308      	adds	r3, #8
 8006560:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	9803      	ldr	r0, [sp, #12]
 8006566:	b019      	add	sp, #100	; 0x64
 8006568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800656c:	4b8f      	ldr	r3, [pc, #572]	; (80067ac <_dtoa_r+0x2e4>)
 800656e:	9303      	str	r3, [sp, #12]
 8006570:	3303      	adds	r3, #3
 8006572:	e7f5      	b.n	8006560 <_dtoa_r+0x98>
 8006574:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006578:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800657c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006580:	2200      	movs	r2, #0
 8006582:	2300      	movs	r3, #0
 8006584:	f7fa fa10 	bl	80009a8 <__aeabi_dcmpeq>
 8006588:	4680      	mov	r8, r0
 800658a:	b160      	cbz	r0, 80065a6 <_dtoa_r+0xde>
 800658c:	2301      	movs	r3, #1
 800658e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 8562 	beq.w	800705e <_dtoa_r+0xb96>
 800659a:	4b86      	ldr	r3, [pc, #536]	; (80067b4 <_dtoa_r+0x2ec>)
 800659c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	9303      	str	r3, [sp, #12]
 80065a4:	e7de      	b.n	8006564 <_dtoa_r+0x9c>
 80065a6:	ab16      	add	r3, sp, #88	; 0x58
 80065a8:	9301      	str	r3, [sp, #4]
 80065aa:	ab17      	add	r3, sp, #92	; 0x5c
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	4628      	mov	r0, r5
 80065b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065b4:	f001 f98a 	bl	80078cc <__d2b>
 80065b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80065bc:	4682      	mov	sl, r0
 80065be:	2c00      	cmp	r4, #0
 80065c0:	d07e      	beq.n	80066c0 <_dtoa_r+0x1f8>
 80065c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065c8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80065cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065d0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80065d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80065d8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80065dc:	4619      	mov	r1, r3
 80065de:	2200      	movs	r2, #0
 80065e0:	4b75      	ldr	r3, [pc, #468]	; (80067b8 <_dtoa_r+0x2f0>)
 80065e2:	f7f9 fdc1 	bl	8000168 <__aeabi_dsub>
 80065e6:	a368      	add	r3, pc, #416	; (adr r3, 8006788 <_dtoa_r+0x2c0>)
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	f7f9 ff74 	bl	80004d8 <__aeabi_dmul>
 80065f0:	a367      	add	r3, pc, #412	; (adr r3, 8006790 <_dtoa_r+0x2c8>)
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	f7f9 fdb9 	bl	800016c <__adddf3>
 80065fa:	4606      	mov	r6, r0
 80065fc:	4620      	mov	r0, r4
 80065fe:	460f      	mov	r7, r1
 8006600:	f7f9 ff00 	bl	8000404 <__aeabi_i2d>
 8006604:	a364      	add	r3, pc, #400	; (adr r3, 8006798 <_dtoa_r+0x2d0>)
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	f7f9 ff65 	bl	80004d8 <__aeabi_dmul>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	4630      	mov	r0, r6
 8006614:	4639      	mov	r1, r7
 8006616:	f7f9 fda9 	bl	800016c <__adddf3>
 800661a:	4606      	mov	r6, r0
 800661c:	460f      	mov	r7, r1
 800661e:	f7fa fa0b 	bl	8000a38 <__aeabi_d2iz>
 8006622:	2200      	movs	r2, #0
 8006624:	4683      	mov	fp, r0
 8006626:	2300      	movs	r3, #0
 8006628:	4630      	mov	r0, r6
 800662a:	4639      	mov	r1, r7
 800662c:	f7fa f9c6 	bl	80009bc <__aeabi_dcmplt>
 8006630:	b148      	cbz	r0, 8006646 <_dtoa_r+0x17e>
 8006632:	4658      	mov	r0, fp
 8006634:	f7f9 fee6 	bl	8000404 <__aeabi_i2d>
 8006638:	4632      	mov	r2, r6
 800663a:	463b      	mov	r3, r7
 800663c:	f7fa f9b4 	bl	80009a8 <__aeabi_dcmpeq>
 8006640:	b908      	cbnz	r0, 8006646 <_dtoa_r+0x17e>
 8006642:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006646:	f1bb 0f16 	cmp.w	fp, #22
 800664a:	d857      	bhi.n	80066fc <_dtoa_r+0x234>
 800664c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006650:	4b5a      	ldr	r3, [pc, #360]	; (80067bc <_dtoa_r+0x2f4>)
 8006652:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665a:	f7fa f9af 	bl	80009bc <__aeabi_dcmplt>
 800665e:	2800      	cmp	r0, #0
 8006660:	d04e      	beq.n	8006700 <_dtoa_r+0x238>
 8006662:	2300      	movs	r3, #0
 8006664:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006668:	930f      	str	r3, [sp, #60]	; 0x3c
 800666a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800666c:	1b1b      	subs	r3, r3, r4
 800666e:	1e5a      	subs	r2, r3, #1
 8006670:	bf46      	itte	mi
 8006672:	f1c3 0901 	rsbmi	r9, r3, #1
 8006676:	2300      	movmi	r3, #0
 8006678:	f04f 0900 	movpl.w	r9, #0
 800667c:	9209      	str	r2, [sp, #36]	; 0x24
 800667e:	bf48      	it	mi
 8006680:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006682:	f1bb 0f00 	cmp.w	fp, #0
 8006686:	db3d      	blt.n	8006704 <_dtoa_r+0x23c>
 8006688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800668a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800668e:	445b      	add	r3, fp
 8006690:	9309      	str	r3, [sp, #36]	; 0x24
 8006692:	2300      	movs	r3, #0
 8006694:	930a      	str	r3, [sp, #40]	; 0x28
 8006696:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006698:	2b09      	cmp	r3, #9
 800669a:	d867      	bhi.n	800676c <_dtoa_r+0x2a4>
 800669c:	2b05      	cmp	r3, #5
 800669e:	bfc4      	itt	gt
 80066a0:	3b04      	subgt	r3, #4
 80066a2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80066a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066a6:	bfc8      	it	gt
 80066a8:	2400      	movgt	r4, #0
 80066aa:	f1a3 0302 	sub.w	r3, r3, #2
 80066ae:	bfd8      	it	le
 80066b0:	2401      	movle	r4, #1
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	f200 8086 	bhi.w	80067c4 <_dtoa_r+0x2fc>
 80066b8:	e8df f003 	tbb	[pc, r3]
 80066bc:	5637392c 	.word	0x5637392c
 80066c0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80066c4:	441c      	add	r4, r3
 80066c6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	bfc1      	itttt	gt
 80066ce:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066d2:	fa09 f903 	lslgt.w	r9, r9, r3
 80066d6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80066da:	fa26 f303 	lsrgt.w	r3, r6, r3
 80066de:	bfd6      	itet	le
 80066e0:	f1c3 0320 	rsble	r3, r3, #32
 80066e4:	ea49 0003 	orrgt.w	r0, r9, r3
 80066e8:	fa06 f003 	lslle.w	r0, r6, r3
 80066ec:	f7f9 fe7a 	bl	80003e4 <__aeabi_ui2d>
 80066f0:	2201      	movs	r2, #1
 80066f2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80066f6:	3c01      	subs	r4, #1
 80066f8:	9213      	str	r2, [sp, #76]	; 0x4c
 80066fa:	e76f      	b.n	80065dc <_dtoa_r+0x114>
 80066fc:	2301      	movs	r3, #1
 80066fe:	e7b3      	b.n	8006668 <_dtoa_r+0x1a0>
 8006700:	900f      	str	r0, [sp, #60]	; 0x3c
 8006702:	e7b2      	b.n	800666a <_dtoa_r+0x1a2>
 8006704:	f1cb 0300 	rsb	r3, fp, #0
 8006708:	930a      	str	r3, [sp, #40]	; 0x28
 800670a:	2300      	movs	r3, #0
 800670c:	eba9 090b 	sub.w	r9, r9, fp
 8006710:	930e      	str	r3, [sp, #56]	; 0x38
 8006712:	e7c0      	b.n	8006696 <_dtoa_r+0x1ce>
 8006714:	2300      	movs	r3, #0
 8006716:	930b      	str	r3, [sp, #44]	; 0x2c
 8006718:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800671a:	2b00      	cmp	r3, #0
 800671c:	dc55      	bgt.n	80067ca <_dtoa_r+0x302>
 800671e:	2301      	movs	r3, #1
 8006720:	461a      	mov	r2, r3
 8006722:	9306      	str	r3, [sp, #24]
 8006724:	9308      	str	r3, [sp, #32]
 8006726:	9223      	str	r2, [sp, #140]	; 0x8c
 8006728:	e00b      	b.n	8006742 <_dtoa_r+0x27a>
 800672a:	2301      	movs	r3, #1
 800672c:	e7f3      	b.n	8006716 <_dtoa_r+0x24e>
 800672e:	2300      	movs	r3, #0
 8006730:	930b      	str	r3, [sp, #44]	; 0x2c
 8006732:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006734:	445b      	add	r3, fp
 8006736:	9306      	str	r3, [sp, #24]
 8006738:	3301      	adds	r3, #1
 800673a:	2b01      	cmp	r3, #1
 800673c:	9308      	str	r3, [sp, #32]
 800673e:	bfb8      	it	lt
 8006740:	2301      	movlt	r3, #1
 8006742:	2100      	movs	r1, #0
 8006744:	2204      	movs	r2, #4
 8006746:	69e8      	ldr	r0, [r5, #28]
 8006748:	f102 0614 	add.w	r6, r2, #20
 800674c:	429e      	cmp	r6, r3
 800674e:	d940      	bls.n	80067d2 <_dtoa_r+0x30a>
 8006750:	6041      	str	r1, [r0, #4]
 8006752:	4628      	mov	r0, r5
 8006754:	f000 fd98 	bl	8007288 <_Balloc>
 8006758:	9003      	str	r0, [sp, #12]
 800675a:	2800      	cmp	r0, #0
 800675c:	d13c      	bne.n	80067d8 <_dtoa_r+0x310>
 800675e:	4602      	mov	r2, r0
 8006760:	f240 11af 	movw	r1, #431	; 0x1af
 8006764:	4b16      	ldr	r3, [pc, #88]	; (80067c0 <_dtoa_r+0x2f8>)
 8006766:	e6c3      	b.n	80064f0 <_dtoa_r+0x28>
 8006768:	2301      	movs	r3, #1
 800676a:	e7e1      	b.n	8006730 <_dtoa_r+0x268>
 800676c:	2401      	movs	r4, #1
 800676e:	2300      	movs	r3, #0
 8006770:	940b      	str	r4, [sp, #44]	; 0x2c
 8006772:	9322      	str	r3, [sp, #136]	; 0x88
 8006774:	f04f 33ff 	mov.w	r3, #4294967295
 8006778:	2200      	movs	r2, #0
 800677a:	9306      	str	r3, [sp, #24]
 800677c:	9308      	str	r3, [sp, #32]
 800677e:	2312      	movs	r3, #18
 8006780:	e7d1      	b.n	8006726 <_dtoa_r+0x25e>
 8006782:	bf00      	nop
 8006784:	f3af 8000 	nop.w
 8006788:	636f4361 	.word	0x636f4361
 800678c:	3fd287a7 	.word	0x3fd287a7
 8006790:	8b60c8b3 	.word	0x8b60c8b3
 8006794:	3fc68a28 	.word	0x3fc68a28
 8006798:	509f79fb 	.word	0x509f79fb
 800679c:	3fd34413 	.word	0x3fd34413
 80067a0:	08009083 	.word	0x08009083
 80067a4:	0800909a 	.word	0x0800909a
 80067a8:	7ff00000 	.word	0x7ff00000
 80067ac:	0800907f 	.word	0x0800907f
 80067b0:	08009076 	.word	0x08009076
 80067b4:	08009053 	.word	0x08009053
 80067b8:	3ff80000 	.word	0x3ff80000
 80067bc:	08009188 	.word	0x08009188
 80067c0:	080090f2 	.word	0x080090f2
 80067c4:	2301      	movs	r3, #1
 80067c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80067c8:	e7d4      	b.n	8006774 <_dtoa_r+0x2ac>
 80067ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067cc:	9306      	str	r3, [sp, #24]
 80067ce:	9308      	str	r3, [sp, #32]
 80067d0:	e7b7      	b.n	8006742 <_dtoa_r+0x27a>
 80067d2:	3101      	adds	r1, #1
 80067d4:	0052      	lsls	r2, r2, #1
 80067d6:	e7b7      	b.n	8006748 <_dtoa_r+0x280>
 80067d8:	69eb      	ldr	r3, [r5, #28]
 80067da:	9a03      	ldr	r2, [sp, #12]
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	9b08      	ldr	r3, [sp, #32]
 80067e0:	2b0e      	cmp	r3, #14
 80067e2:	f200 80a8 	bhi.w	8006936 <_dtoa_r+0x46e>
 80067e6:	2c00      	cmp	r4, #0
 80067e8:	f000 80a5 	beq.w	8006936 <_dtoa_r+0x46e>
 80067ec:	f1bb 0f00 	cmp.w	fp, #0
 80067f0:	dd34      	ble.n	800685c <_dtoa_r+0x394>
 80067f2:	4b9a      	ldr	r3, [pc, #616]	; (8006a5c <_dtoa_r+0x594>)
 80067f4:	f00b 020f 	and.w	r2, fp, #15
 80067f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006800:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006804:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006808:	ea4f 142b 	mov.w	r4, fp, asr #4
 800680c:	d016      	beq.n	800683c <_dtoa_r+0x374>
 800680e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006812:	4b93      	ldr	r3, [pc, #588]	; (8006a60 <_dtoa_r+0x598>)
 8006814:	2703      	movs	r7, #3
 8006816:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800681a:	f7f9 ff87 	bl	800072c <__aeabi_ddiv>
 800681e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006822:	f004 040f 	and.w	r4, r4, #15
 8006826:	4e8e      	ldr	r6, [pc, #568]	; (8006a60 <_dtoa_r+0x598>)
 8006828:	b954      	cbnz	r4, 8006840 <_dtoa_r+0x378>
 800682a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800682e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006832:	f7f9 ff7b 	bl	800072c <__aeabi_ddiv>
 8006836:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800683a:	e029      	b.n	8006890 <_dtoa_r+0x3c8>
 800683c:	2702      	movs	r7, #2
 800683e:	e7f2      	b.n	8006826 <_dtoa_r+0x35e>
 8006840:	07e1      	lsls	r1, r4, #31
 8006842:	d508      	bpl.n	8006856 <_dtoa_r+0x38e>
 8006844:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006848:	e9d6 2300 	ldrd	r2, r3, [r6]
 800684c:	f7f9 fe44 	bl	80004d8 <__aeabi_dmul>
 8006850:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006854:	3701      	adds	r7, #1
 8006856:	1064      	asrs	r4, r4, #1
 8006858:	3608      	adds	r6, #8
 800685a:	e7e5      	b.n	8006828 <_dtoa_r+0x360>
 800685c:	f000 80a5 	beq.w	80069aa <_dtoa_r+0x4e2>
 8006860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006864:	f1cb 0400 	rsb	r4, fp, #0
 8006868:	4b7c      	ldr	r3, [pc, #496]	; (8006a5c <_dtoa_r+0x594>)
 800686a:	f004 020f 	and.w	r2, r4, #15
 800686e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	f7f9 fe2f 	bl	80004d8 <__aeabi_dmul>
 800687a:	2702      	movs	r7, #2
 800687c:	2300      	movs	r3, #0
 800687e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006882:	4e77      	ldr	r6, [pc, #476]	; (8006a60 <_dtoa_r+0x598>)
 8006884:	1124      	asrs	r4, r4, #4
 8006886:	2c00      	cmp	r4, #0
 8006888:	f040 8084 	bne.w	8006994 <_dtoa_r+0x4cc>
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1d2      	bne.n	8006836 <_dtoa_r+0x36e>
 8006890:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006894:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 8087 	beq.w	80069ae <_dtoa_r+0x4e6>
 80068a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068a4:	2200      	movs	r2, #0
 80068a6:	4b6f      	ldr	r3, [pc, #444]	; (8006a64 <_dtoa_r+0x59c>)
 80068a8:	f7fa f888 	bl	80009bc <__aeabi_dcmplt>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d07e      	beq.n	80069ae <_dtoa_r+0x4e6>
 80068b0:	9b08      	ldr	r3, [sp, #32]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d07b      	beq.n	80069ae <_dtoa_r+0x4e6>
 80068b6:	9b06      	ldr	r3, [sp, #24]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	dd38      	ble.n	800692e <_dtoa_r+0x466>
 80068bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068c0:	2200      	movs	r2, #0
 80068c2:	4b69      	ldr	r3, [pc, #420]	; (8006a68 <_dtoa_r+0x5a0>)
 80068c4:	f7f9 fe08 	bl	80004d8 <__aeabi_dmul>
 80068c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068cc:	9c06      	ldr	r4, [sp, #24]
 80068ce:	f10b 38ff 	add.w	r8, fp, #4294967295
 80068d2:	3701      	adds	r7, #1
 80068d4:	4638      	mov	r0, r7
 80068d6:	f7f9 fd95 	bl	8000404 <__aeabi_i2d>
 80068da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068de:	f7f9 fdfb 	bl	80004d8 <__aeabi_dmul>
 80068e2:	2200      	movs	r2, #0
 80068e4:	4b61      	ldr	r3, [pc, #388]	; (8006a6c <_dtoa_r+0x5a4>)
 80068e6:	f7f9 fc41 	bl	800016c <__adddf3>
 80068ea:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80068ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068f2:	9611      	str	r6, [sp, #68]	; 0x44
 80068f4:	2c00      	cmp	r4, #0
 80068f6:	d15d      	bne.n	80069b4 <_dtoa_r+0x4ec>
 80068f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068fc:	2200      	movs	r2, #0
 80068fe:	4b5c      	ldr	r3, [pc, #368]	; (8006a70 <_dtoa_r+0x5a8>)
 8006900:	f7f9 fc32 	bl	8000168 <__aeabi_dsub>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800690c:	4633      	mov	r3, r6
 800690e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006910:	f7fa f872 	bl	80009f8 <__aeabi_dcmpgt>
 8006914:	2800      	cmp	r0, #0
 8006916:	f040 8295 	bne.w	8006e44 <_dtoa_r+0x97c>
 800691a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800691e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006920:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006924:	f7fa f84a 	bl	80009bc <__aeabi_dcmplt>
 8006928:	2800      	cmp	r0, #0
 800692a:	f040 8289 	bne.w	8006e40 <_dtoa_r+0x978>
 800692e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006932:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006936:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006938:	2b00      	cmp	r3, #0
 800693a:	f2c0 8151 	blt.w	8006be0 <_dtoa_r+0x718>
 800693e:	f1bb 0f0e 	cmp.w	fp, #14
 8006942:	f300 814d 	bgt.w	8006be0 <_dtoa_r+0x718>
 8006946:	4b45      	ldr	r3, [pc, #276]	; (8006a5c <_dtoa_r+0x594>)
 8006948:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800694c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006950:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006954:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006956:	2b00      	cmp	r3, #0
 8006958:	f280 80da 	bge.w	8006b10 <_dtoa_r+0x648>
 800695c:	9b08      	ldr	r3, [sp, #32]
 800695e:	2b00      	cmp	r3, #0
 8006960:	f300 80d6 	bgt.w	8006b10 <_dtoa_r+0x648>
 8006964:	f040 826b 	bne.w	8006e3e <_dtoa_r+0x976>
 8006968:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800696c:	2200      	movs	r2, #0
 800696e:	4b40      	ldr	r3, [pc, #256]	; (8006a70 <_dtoa_r+0x5a8>)
 8006970:	f7f9 fdb2 	bl	80004d8 <__aeabi_dmul>
 8006974:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006978:	f7fa f834 	bl	80009e4 <__aeabi_dcmpge>
 800697c:	9c08      	ldr	r4, [sp, #32]
 800697e:	4626      	mov	r6, r4
 8006980:	2800      	cmp	r0, #0
 8006982:	f040 8241 	bne.w	8006e08 <_dtoa_r+0x940>
 8006986:	2331      	movs	r3, #49	; 0x31
 8006988:	9f03      	ldr	r7, [sp, #12]
 800698a:	f10b 0b01 	add.w	fp, fp, #1
 800698e:	f807 3b01 	strb.w	r3, [r7], #1
 8006992:	e23d      	b.n	8006e10 <_dtoa_r+0x948>
 8006994:	07e2      	lsls	r2, r4, #31
 8006996:	d505      	bpl.n	80069a4 <_dtoa_r+0x4dc>
 8006998:	e9d6 2300 	ldrd	r2, r3, [r6]
 800699c:	f7f9 fd9c 	bl	80004d8 <__aeabi_dmul>
 80069a0:	2301      	movs	r3, #1
 80069a2:	3701      	adds	r7, #1
 80069a4:	1064      	asrs	r4, r4, #1
 80069a6:	3608      	adds	r6, #8
 80069a8:	e76d      	b.n	8006886 <_dtoa_r+0x3be>
 80069aa:	2702      	movs	r7, #2
 80069ac:	e770      	b.n	8006890 <_dtoa_r+0x3c8>
 80069ae:	46d8      	mov	r8, fp
 80069b0:	9c08      	ldr	r4, [sp, #32]
 80069b2:	e78f      	b.n	80068d4 <_dtoa_r+0x40c>
 80069b4:	9903      	ldr	r1, [sp, #12]
 80069b6:	4b29      	ldr	r3, [pc, #164]	; (8006a5c <_dtoa_r+0x594>)
 80069b8:	4421      	add	r1, r4
 80069ba:	9112      	str	r1, [sp, #72]	; 0x48
 80069bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069c2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80069c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069ca:	2900      	cmp	r1, #0
 80069cc:	d054      	beq.n	8006a78 <_dtoa_r+0x5b0>
 80069ce:	2000      	movs	r0, #0
 80069d0:	4928      	ldr	r1, [pc, #160]	; (8006a74 <_dtoa_r+0x5ac>)
 80069d2:	f7f9 feab 	bl	800072c <__aeabi_ddiv>
 80069d6:	463b      	mov	r3, r7
 80069d8:	4632      	mov	r2, r6
 80069da:	f7f9 fbc5 	bl	8000168 <__aeabi_dsub>
 80069de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069e2:	9f03      	ldr	r7, [sp, #12]
 80069e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069e8:	f7fa f826 	bl	8000a38 <__aeabi_d2iz>
 80069ec:	4604      	mov	r4, r0
 80069ee:	f7f9 fd09 	bl	8000404 <__aeabi_i2d>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069fa:	f7f9 fbb5 	bl	8000168 <__aeabi_dsub>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	3430      	adds	r4, #48	; 0x30
 8006a04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a0c:	f807 4b01 	strb.w	r4, [r7], #1
 8006a10:	f7f9 ffd4 	bl	80009bc <__aeabi_dcmplt>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d173      	bne.n	8006b00 <_dtoa_r+0x638>
 8006a18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	4911      	ldr	r1, [pc, #68]	; (8006a64 <_dtoa_r+0x59c>)
 8006a20:	f7f9 fba2 	bl	8000168 <__aeabi_dsub>
 8006a24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a28:	f7f9 ffc8 	bl	80009bc <__aeabi_dcmplt>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	f040 80b6 	bne.w	8006b9e <_dtoa_r+0x6d6>
 8006a32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a34:	429f      	cmp	r7, r3
 8006a36:	f43f af7a 	beq.w	800692e <_dtoa_r+0x466>
 8006a3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a3e:	2200      	movs	r2, #0
 8006a40:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <_dtoa_r+0x5a0>)
 8006a42:	f7f9 fd49 	bl	80004d8 <__aeabi_dmul>
 8006a46:	2200      	movs	r2, #0
 8006a48:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a50:	4b05      	ldr	r3, [pc, #20]	; (8006a68 <_dtoa_r+0x5a0>)
 8006a52:	f7f9 fd41 	bl	80004d8 <__aeabi_dmul>
 8006a56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a5a:	e7c3      	b.n	80069e4 <_dtoa_r+0x51c>
 8006a5c:	08009188 	.word	0x08009188
 8006a60:	08009160 	.word	0x08009160
 8006a64:	3ff00000 	.word	0x3ff00000
 8006a68:	40240000 	.word	0x40240000
 8006a6c:	401c0000 	.word	0x401c0000
 8006a70:	40140000 	.word	0x40140000
 8006a74:	3fe00000 	.word	0x3fe00000
 8006a78:	4630      	mov	r0, r6
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	f7f9 fd2c 	bl	80004d8 <__aeabi_dmul>
 8006a80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a82:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a86:	9c03      	ldr	r4, [sp, #12]
 8006a88:	9314      	str	r3, [sp, #80]	; 0x50
 8006a8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a8e:	f7f9 ffd3 	bl	8000a38 <__aeabi_d2iz>
 8006a92:	9015      	str	r0, [sp, #84]	; 0x54
 8006a94:	f7f9 fcb6 	bl	8000404 <__aeabi_i2d>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aa0:	f7f9 fb62 	bl	8000168 <__aeabi_dsub>
 8006aa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	3330      	adds	r3, #48	; 0x30
 8006aaa:	f804 3b01 	strb.w	r3, [r4], #1
 8006aae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ab0:	460f      	mov	r7, r1
 8006ab2:	429c      	cmp	r4, r3
 8006ab4:	f04f 0200 	mov.w	r2, #0
 8006ab8:	d124      	bne.n	8006b04 <_dtoa_r+0x63c>
 8006aba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006abe:	4baf      	ldr	r3, [pc, #700]	; (8006d7c <_dtoa_r+0x8b4>)
 8006ac0:	f7f9 fb54 	bl	800016c <__adddf3>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4630      	mov	r0, r6
 8006aca:	4639      	mov	r1, r7
 8006acc:	f7f9 ff94 	bl	80009f8 <__aeabi_dcmpgt>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d163      	bne.n	8006b9c <_dtoa_r+0x6d4>
 8006ad4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ad8:	2000      	movs	r0, #0
 8006ada:	49a8      	ldr	r1, [pc, #672]	; (8006d7c <_dtoa_r+0x8b4>)
 8006adc:	f7f9 fb44 	bl	8000168 <__aeabi_dsub>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	4639      	mov	r1, r7
 8006ae8:	f7f9 ff68 	bl	80009bc <__aeabi_dcmplt>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	f43f af1e 	beq.w	800692e <_dtoa_r+0x466>
 8006af2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006af4:	1e7b      	subs	r3, r7, #1
 8006af6:	9314      	str	r3, [sp, #80]	; 0x50
 8006af8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006afc:	2b30      	cmp	r3, #48	; 0x30
 8006afe:	d0f8      	beq.n	8006af2 <_dtoa_r+0x62a>
 8006b00:	46c3      	mov	fp, r8
 8006b02:	e03b      	b.n	8006b7c <_dtoa_r+0x6b4>
 8006b04:	4b9e      	ldr	r3, [pc, #632]	; (8006d80 <_dtoa_r+0x8b8>)
 8006b06:	f7f9 fce7 	bl	80004d8 <__aeabi_dmul>
 8006b0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b0e:	e7bc      	b.n	8006a8a <_dtoa_r+0x5c2>
 8006b10:	9f03      	ldr	r7, [sp, #12]
 8006b12:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006b16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b1a:	4640      	mov	r0, r8
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	f7f9 fe05 	bl	800072c <__aeabi_ddiv>
 8006b22:	f7f9 ff89 	bl	8000a38 <__aeabi_d2iz>
 8006b26:	4604      	mov	r4, r0
 8006b28:	f7f9 fc6c 	bl	8000404 <__aeabi_i2d>
 8006b2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b30:	f7f9 fcd2 	bl	80004d8 <__aeabi_dmul>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4640      	mov	r0, r8
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	f7f9 fb14 	bl	8000168 <__aeabi_dsub>
 8006b40:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006b44:	f807 6b01 	strb.w	r6, [r7], #1
 8006b48:	9e03      	ldr	r6, [sp, #12]
 8006b4a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006b4e:	1bbe      	subs	r6, r7, r6
 8006b50:	45b4      	cmp	ip, r6
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	d136      	bne.n	8006bc6 <_dtoa_r+0x6fe>
 8006b58:	f7f9 fb08 	bl	800016c <__adddf3>
 8006b5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b60:	4680      	mov	r8, r0
 8006b62:	4689      	mov	r9, r1
 8006b64:	f7f9 ff48 	bl	80009f8 <__aeabi_dcmpgt>
 8006b68:	bb58      	cbnz	r0, 8006bc2 <_dtoa_r+0x6fa>
 8006b6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b6e:	4640      	mov	r0, r8
 8006b70:	4649      	mov	r1, r9
 8006b72:	f7f9 ff19 	bl	80009a8 <__aeabi_dcmpeq>
 8006b76:	b108      	cbz	r0, 8006b7c <_dtoa_r+0x6b4>
 8006b78:	07e3      	lsls	r3, r4, #31
 8006b7a:	d422      	bmi.n	8006bc2 <_dtoa_r+0x6fa>
 8006b7c:	4651      	mov	r1, sl
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f000 fbc2 	bl	8007308 <_Bfree>
 8006b84:	2300      	movs	r3, #0
 8006b86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b88:	703b      	strb	r3, [r7, #0]
 8006b8a:	f10b 0301 	add.w	r3, fp, #1
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f43f ace6 	beq.w	8006564 <_dtoa_r+0x9c>
 8006b98:	601f      	str	r7, [r3, #0]
 8006b9a:	e4e3      	b.n	8006564 <_dtoa_r+0x9c>
 8006b9c:	4627      	mov	r7, r4
 8006b9e:	463b      	mov	r3, r7
 8006ba0:	461f      	mov	r7, r3
 8006ba2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ba6:	2a39      	cmp	r2, #57	; 0x39
 8006ba8:	d107      	bne.n	8006bba <_dtoa_r+0x6f2>
 8006baa:	9a03      	ldr	r2, [sp, #12]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d1f7      	bne.n	8006ba0 <_dtoa_r+0x6d8>
 8006bb0:	2230      	movs	r2, #48	; 0x30
 8006bb2:	9903      	ldr	r1, [sp, #12]
 8006bb4:	f108 0801 	add.w	r8, r8, #1
 8006bb8:	700a      	strb	r2, [r1, #0]
 8006bba:	781a      	ldrb	r2, [r3, #0]
 8006bbc:	3201      	adds	r2, #1
 8006bbe:	701a      	strb	r2, [r3, #0]
 8006bc0:	e79e      	b.n	8006b00 <_dtoa_r+0x638>
 8006bc2:	46d8      	mov	r8, fp
 8006bc4:	e7eb      	b.n	8006b9e <_dtoa_r+0x6d6>
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	4b6d      	ldr	r3, [pc, #436]	; (8006d80 <_dtoa_r+0x8b8>)
 8006bca:	f7f9 fc85 	bl	80004d8 <__aeabi_dmul>
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	4680      	mov	r8, r0
 8006bd4:	4689      	mov	r9, r1
 8006bd6:	f7f9 fee7 	bl	80009a8 <__aeabi_dcmpeq>
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d09b      	beq.n	8006b16 <_dtoa_r+0x64e>
 8006bde:	e7cd      	b.n	8006b7c <_dtoa_r+0x6b4>
 8006be0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006be2:	2a00      	cmp	r2, #0
 8006be4:	f000 80c4 	beq.w	8006d70 <_dtoa_r+0x8a8>
 8006be8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006bea:	2a01      	cmp	r2, #1
 8006bec:	f300 80a8 	bgt.w	8006d40 <_dtoa_r+0x878>
 8006bf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006bf2:	2a00      	cmp	r2, #0
 8006bf4:	f000 80a0 	beq.w	8006d38 <_dtoa_r+0x870>
 8006bf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bfc:	464f      	mov	r7, r9
 8006bfe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006c00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c02:	2101      	movs	r1, #1
 8006c04:	441a      	add	r2, r3
 8006c06:	4628      	mov	r0, r5
 8006c08:	4499      	add	r9, r3
 8006c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c0c:	f000 fc32 	bl	8007474 <__i2b>
 8006c10:	4606      	mov	r6, r0
 8006c12:	b15f      	cbz	r7, 8006c2c <_dtoa_r+0x764>
 8006c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	dd08      	ble.n	8006c2c <_dtoa_r+0x764>
 8006c1a:	42bb      	cmp	r3, r7
 8006c1c:	bfa8      	it	ge
 8006c1e:	463b      	movge	r3, r7
 8006c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c22:	eba9 0903 	sub.w	r9, r9, r3
 8006c26:	1aff      	subs	r7, r7, r3
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c2e:	b1f3      	cbz	r3, 8006c6e <_dtoa_r+0x7a6>
 8006c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 80a0 	beq.w	8006d78 <_dtoa_r+0x8b0>
 8006c38:	2c00      	cmp	r4, #0
 8006c3a:	dd10      	ble.n	8006c5e <_dtoa_r+0x796>
 8006c3c:	4631      	mov	r1, r6
 8006c3e:	4622      	mov	r2, r4
 8006c40:	4628      	mov	r0, r5
 8006c42:	f000 fcd5 	bl	80075f0 <__pow5mult>
 8006c46:	4652      	mov	r2, sl
 8006c48:	4601      	mov	r1, r0
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f000 fc27 	bl	80074a0 <__multiply>
 8006c52:	4680      	mov	r8, r0
 8006c54:	4651      	mov	r1, sl
 8006c56:	4628      	mov	r0, r5
 8006c58:	f000 fb56 	bl	8007308 <_Bfree>
 8006c5c:	46c2      	mov	sl, r8
 8006c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c60:	1b1a      	subs	r2, r3, r4
 8006c62:	d004      	beq.n	8006c6e <_dtoa_r+0x7a6>
 8006c64:	4651      	mov	r1, sl
 8006c66:	4628      	mov	r0, r5
 8006c68:	f000 fcc2 	bl	80075f0 <__pow5mult>
 8006c6c:	4682      	mov	sl, r0
 8006c6e:	2101      	movs	r1, #1
 8006c70:	4628      	mov	r0, r5
 8006c72:	f000 fbff 	bl	8007474 <__i2b>
 8006c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c78:	4604      	mov	r4, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f340 8082 	ble.w	8006d84 <_dtoa_r+0x8bc>
 8006c80:	461a      	mov	r2, r3
 8006c82:	4601      	mov	r1, r0
 8006c84:	4628      	mov	r0, r5
 8006c86:	f000 fcb3 	bl	80075f0 <__pow5mult>
 8006c8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	dd7b      	ble.n	8006d8a <_dtoa_r+0x8c2>
 8006c92:	f04f 0800 	mov.w	r8, #0
 8006c96:	6923      	ldr	r3, [r4, #16]
 8006c98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c9c:	6918      	ldr	r0, [r3, #16]
 8006c9e:	f000 fb9b 	bl	80073d8 <__hi0bits>
 8006ca2:	f1c0 0020 	rsb	r0, r0, #32
 8006ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca8:	4418      	add	r0, r3
 8006caa:	f010 001f 	ands.w	r0, r0, #31
 8006cae:	f000 8092 	beq.w	8006dd6 <_dtoa_r+0x90e>
 8006cb2:	f1c0 0320 	rsb	r3, r0, #32
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	f340 8085 	ble.w	8006dc6 <_dtoa_r+0x8fe>
 8006cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cbe:	f1c0 001c 	rsb	r0, r0, #28
 8006cc2:	4403      	add	r3, r0
 8006cc4:	4481      	add	r9, r0
 8006cc6:	4407      	add	r7, r0
 8006cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cca:	f1b9 0f00 	cmp.w	r9, #0
 8006cce:	dd05      	ble.n	8006cdc <_dtoa_r+0x814>
 8006cd0:	4651      	mov	r1, sl
 8006cd2:	464a      	mov	r2, r9
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	f000 fce5 	bl	80076a4 <__lshift>
 8006cda:	4682      	mov	sl, r0
 8006cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	dd05      	ble.n	8006cee <_dtoa_r+0x826>
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	f000 fcdc 	bl	80076a4 <__lshift>
 8006cec:	4604      	mov	r4, r0
 8006cee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d072      	beq.n	8006dda <_dtoa_r+0x912>
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4650      	mov	r0, sl
 8006cf8:	f000 fd40 	bl	800777c <__mcmp>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	da6c      	bge.n	8006dda <_dtoa_r+0x912>
 8006d00:	2300      	movs	r3, #0
 8006d02:	4651      	mov	r1, sl
 8006d04:	220a      	movs	r2, #10
 8006d06:	4628      	mov	r0, r5
 8006d08:	f000 fb20 	bl	800734c <__multadd>
 8006d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d0e:	4682      	mov	sl, r0
 8006d10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 81ac 	beq.w	8007072 <_dtoa_r+0xbaa>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	4631      	mov	r1, r6
 8006d1e:	220a      	movs	r2, #10
 8006d20:	4628      	mov	r0, r5
 8006d22:	f000 fb13 	bl	800734c <__multadd>
 8006d26:	9b06      	ldr	r3, [sp, #24]
 8006d28:	4606      	mov	r6, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f300 8093 	bgt.w	8006e56 <_dtoa_r+0x98e>
 8006d30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	dc59      	bgt.n	8006dea <_dtoa_r+0x922>
 8006d36:	e08e      	b.n	8006e56 <_dtoa_r+0x98e>
 8006d38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006d3a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d3e:	e75d      	b.n	8006bfc <_dtoa_r+0x734>
 8006d40:	9b08      	ldr	r3, [sp, #32]
 8006d42:	1e5c      	subs	r4, r3, #1
 8006d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d46:	42a3      	cmp	r3, r4
 8006d48:	bfbf      	itttt	lt
 8006d4a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d4c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006d4e:	1ae3      	sublt	r3, r4, r3
 8006d50:	18d2      	addlt	r2, r2, r3
 8006d52:	bfa8      	it	ge
 8006d54:	1b1c      	subge	r4, r3, r4
 8006d56:	9b08      	ldr	r3, [sp, #32]
 8006d58:	bfbe      	ittt	lt
 8006d5a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006d5c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006d5e:	2400      	movlt	r4, #0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	bfb5      	itete	lt
 8006d64:	eba9 0703 	sublt.w	r7, r9, r3
 8006d68:	464f      	movge	r7, r9
 8006d6a:	2300      	movlt	r3, #0
 8006d6c:	9b08      	ldrge	r3, [sp, #32]
 8006d6e:	e747      	b.n	8006c00 <_dtoa_r+0x738>
 8006d70:	464f      	mov	r7, r9
 8006d72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d74:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006d76:	e74c      	b.n	8006c12 <_dtoa_r+0x74a>
 8006d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d7a:	e773      	b.n	8006c64 <_dtoa_r+0x79c>
 8006d7c:	3fe00000 	.word	0x3fe00000
 8006d80:	40240000 	.word	0x40240000
 8006d84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	dc18      	bgt.n	8006dbc <_dtoa_r+0x8f4>
 8006d8a:	9b04      	ldr	r3, [sp, #16]
 8006d8c:	b9b3      	cbnz	r3, 8006dbc <_dtoa_r+0x8f4>
 8006d8e:	9b05      	ldr	r3, [sp, #20]
 8006d90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d94:	b993      	cbnz	r3, 8006dbc <_dtoa_r+0x8f4>
 8006d96:	9b05      	ldr	r3, [sp, #20]
 8006d98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d9c:	0d1b      	lsrs	r3, r3, #20
 8006d9e:	051b      	lsls	r3, r3, #20
 8006da0:	b17b      	cbz	r3, 8006dc2 <_dtoa_r+0x8fa>
 8006da2:	f04f 0801 	mov.w	r8, #1
 8006da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da8:	f109 0901 	add.w	r9, r9, #1
 8006dac:	3301      	adds	r3, #1
 8006dae:	9309      	str	r3, [sp, #36]	; 0x24
 8006db0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f47f af6f 	bne.w	8006c96 <_dtoa_r+0x7ce>
 8006db8:	2001      	movs	r0, #1
 8006dba:	e774      	b.n	8006ca6 <_dtoa_r+0x7de>
 8006dbc:	f04f 0800 	mov.w	r8, #0
 8006dc0:	e7f6      	b.n	8006db0 <_dtoa_r+0x8e8>
 8006dc2:	4698      	mov	r8, r3
 8006dc4:	e7f4      	b.n	8006db0 <_dtoa_r+0x8e8>
 8006dc6:	d080      	beq.n	8006cca <_dtoa_r+0x802>
 8006dc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dca:	331c      	adds	r3, #28
 8006dcc:	441a      	add	r2, r3
 8006dce:	4499      	add	r9, r3
 8006dd0:	441f      	add	r7, r3
 8006dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8006dd4:	e779      	b.n	8006cca <_dtoa_r+0x802>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	e7f6      	b.n	8006dc8 <_dtoa_r+0x900>
 8006dda:	9b08      	ldr	r3, [sp, #32]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	dc34      	bgt.n	8006e4a <_dtoa_r+0x982>
 8006de0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	dd31      	ble.n	8006e4a <_dtoa_r+0x982>
 8006de6:	9b08      	ldr	r3, [sp, #32]
 8006de8:	9306      	str	r3, [sp, #24]
 8006dea:	9b06      	ldr	r3, [sp, #24]
 8006dec:	b963      	cbnz	r3, 8006e08 <_dtoa_r+0x940>
 8006dee:	4621      	mov	r1, r4
 8006df0:	2205      	movs	r2, #5
 8006df2:	4628      	mov	r0, r5
 8006df4:	f000 faaa 	bl	800734c <__multadd>
 8006df8:	4601      	mov	r1, r0
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	4650      	mov	r0, sl
 8006dfe:	f000 fcbd 	bl	800777c <__mcmp>
 8006e02:	2800      	cmp	r0, #0
 8006e04:	f73f adbf 	bgt.w	8006986 <_dtoa_r+0x4be>
 8006e08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e0a:	9f03      	ldr	r7, [sp, #12]
 8006e0c:	ea6f 0b03 	mvn.w	fp, r3
 8006e10:	f04f 0800 	mov.w	r8, #0
 8006e14:	4621      	mov	r1, r4
 8006e16:	4628      	mov	r0, r5
 8006e18:	f000 fa76 	bl	8007308 <_Bfree>
 8006e1c:	2e00      	cmp	r6, #0
 8006e1e:	f43f aead 	beq.w	8006b7c <_dtoa_r+0x6b4>
 8006e22:	f1b8 0f00 	cmp.w	r8, #0
 8006e26:	d005      	beq.n	8006e34 <_dtoa_r+0x96c>
 8006e28:	45b0      	cmp	r8, r6
 8006e2a:	d003      	beq.n	8006e34 <_dtoa_r+0x96c>
 8006e2c:	4641      	mov	r1, r8
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f000 fa6a 	bl	8007308 <_Bfree>
 8006e34:	4631      	mov	r1, r6
 8006e36:	4628      	mov	r0, r5
 8006e38:	f000 fa66 	bl	8007308 <_Bfree>
 8006e3c:	e69e      	b.n	8006b7c <_dtoa_r+0x6b4>
 8006e3e:	2400      	movs	r4, #0
 8006e40:	4626      	mov	r6, r4
 8006e42:	e7e1      	b.n	8006e08 <_dtoa_r+0x940>
 8006e44:	46c3      	mov	fp, r8
 8006e46:	4626      	mov	r6, r4
 8006e48:	e59d      	b.n	8006986 <_dtoa_r+0x4be>
 8006e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 80c8 	beq.w	8006fe2 <_dtoa_r+0xb1a>
 8006e52:	9b08      	ldr	r3, [sp, #32]
 8006e54:	9306      	str	r3, [sp, #24]
 8006e56:	2f00      	cmp	r7, #0
 8006e58:	dd05      	ble.n	8006e66 <_dtoa_r+0x99e>
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	463a      	mov	r2, r7
 8006e5e:	4628      	mov	r0, r5
 8006e60:	f000 fc20 	bl	80076a4 <__lshift>
 8006e64:	4606      	mov	r6, r0
 8006e66:	f1b8 0f00 	cmp.w	r8, #0
 8006e6a:	d05b      	beq.n	8006f24 <_dtoa_r+0xa5c>
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	6871      	ldr	r1, [r6, #4]
 8006e70:	f000 fa0a 	bl	8007288 <_Balloc>
 8006e74:	4607      	mov	r7, r0
 8006e76:	b928      	cbnz	r0, 8006e84 <_dtoa_r+0x9bc>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006e7e:	4b81      	ldr	r3, [pc, #516]	; (8007084 <_dtoa_r+0xbbc>)
 8006e80:	f7ff bb36 	b.w	80064f0 <_dtoa_r+0x28>
 8006e84:	6932      	ldr	r2, [r6, #16]
 8006e86:	f106 010c 	add.w	r1, r6, #12
 8006e8a:	3202      	adds	r2, #2
 8006e8c:	0092      	lsls	r2, r2, #2
 8006e8e:	300c      	adds	r0, #12
 8006e90:	f7ff fa81 	bl	8006396 <memcpy>
 8006e94:	2201      	movs	r2, #1
 8006e96:	4639      	mov	r1, r7
 8006e98:	4628      	mov	r0, r5
 8006e9a:	f000 fc03 	bl	80076a4 <__lshift>
 8006e9e:	46b0      	mov	r8, r6
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	9b03      	ldr	r3, [sp, #12]
 8006ea4:	9a03      	ldr	r2, [sp, #12]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	9308      	str	r3, [sp, #32]
 8006eaa:	9b06      	ldr	r3, [sp, #24]
 8006eac:	4413      	add	r3, r2
 8006eae:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eb0:	9b04      	ldr	r3, [sp, #16]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8006eb8:	9b08      	ldr	r3, [sp, #32]
 8006eba:	4621      	mov	r1, r4
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	4650      	mov	r0, sl
 8006ec0:	9304      	str	r3, [sp, #16]
 8006ec2:	f7ff fa76 	bl	80063b2 <quorem>
 8006ec6:	4641      	mov	r1, r8
 8006ec8:	9006      	str	r0, [sp, #24]
 8006eca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ece:	4650      	mov	r0, sl
 8006ed0:	f000 fc54 	bl	800777c <__mcmp>
 8006ed4:	4632      	mov	r2, r6
 8006ed6:	9009      	str	r0, [sp, #36]	; 0x24
 8006ed8:	4621      	mov	r1, r4
 8006eda:	4628      	mov	r0, r5
 8006edc:	f000 fc6a 	bl	80077b4 <__mdiff>
 8006ee0:	68c2      	ldr	r2, [r0, #12]
 8006ee2:	4607      	mov	r7, r0
 8006ee4:	bb02      	cbnz	r2, 8006f28 <_dtoa_r+0xa60>
 8006ee6:	4601      	mov	r1, r0
 8006ee8:	4650      	mov	r0, sl
 8006eea:	f000 fc47 	bl	800777c <__mcmp>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	4639      	mov	r1, r7
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	920c      	str	r2, [sp, #48]	; 0x30
 8006ef6:	f000 fa07 	bl	8007308 <_Bfree>
 8006efa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006efc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006efe:	9f08      	ldr	r7, [sp, #32]
 8006f00:	ea43 0102 	orr.w	r1, r3, r2
 8006f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f06:	4319      	orrs	r1, r3
 8006f08:	d110      	bne.n	8006f2c <_dtoa_r+0xa64>
 8006f0a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f0e:	d029      	beq.n	8006f64 <_dtoa_r+0xa9c>
 8006f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	dd02      	ble.n	8006f1c <_dtoa_r+0xa54>
 8006f16:	9b06      	ldr	r3, [sp, #24]
 8006f18:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006f1c:	9b04      	ldr	r3, [sp, #16]
 8006f1e:	f883 9000 	strb.w	r9, [r3]
 8006f22:	e777      	b.n	8006e14 <_dtoa_r+0x94c>
 8006f24:	4630      	mov	r0, r6
 8006f26:	e7ba      	b.n	8006e9e <_dtoa_r+0x9d6>
 8006f28:	2201      	movs	r2, #1
 8006f2a:	e7e1      	b.n	8006ef0 <_dtoa_r+0xa28>
 8006f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	db04      	blt.n	8006f3c <_dtoa_r+0xa74>
 8006f32:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006f34:	430b      	orrs	r3, r1
 8006f36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	d120      	bne.n	8006f7e <_dtoa_r+0xab6>
 8006f3c:	2a00      	cmp	r2, #0
 8006f3e:	dded      	ble.n	8006f1c <_dtoa_r+0xa54>
 8006f40:	4651      	mov	r1, sl
 8006f42:	2201      	movs	r2, #1
 8006f44:	4628      	mov	r0, r5
 8006f46:	f000 fbad 	bl	80076a4 <__lshift>
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4682      	mov	sl, r0
 8006f4e:	f000 fc15 	bl	800777c <__mcmp>
 8006f52:	2800      	cmp	r0, #0
 8006f54:	dc03      	bgt.n	8006f5e <_dtoa_r+0xa96>
 8006f56:	d1e1      	bne.n	8006f1c <_dtoa_r+0xa54>
 8006f58:	f019 0f01 	tst.w	r9, #1
 8006f5c:	d0de      	beq.n	8006f1c <_dtoa_r+0xa54>
 8006f5e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f62:	d1d8      	bne.n	8006f16 <_dtoa_r+0xa4e>
 8006f64:	2339      	movs	r3, #57	; 0x39
 8006f66:	9a04      	ldr	r2, [sp, #16]
 8006f68:	7013      	strb	r3, [r2, #0]
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	461f      	mov	r7, r3
 8006f6e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	2a39      	cmp	r2, #57	; 0x39
 8006f76:	d06b      	beq.n	8007050 <_dtoa_r+0xb88>
 8006f78:	3201      	adds	r2, #1
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	e74a      	b.n	8006e14 <_dtoa_r+0x94c>
 8006f7e:	2a00      	cmp	r2, #0
 8006f80:	dd07      	ble.n	8006f92 <_dtoa_r+0xaca>
 8006f82:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f86:	d0ed      	beq.n	8006f64 <_dtoa_r+0xa9c>
 8006f88:	9a04      	ldr	r2, [sp, #16]
 8006f8a:	f109 0301 	add.w	r3, r9, #1
 8006f8e:	7013      	strb	r3, [r2, #0]
 8006f90:	e740      	b.n	8006e14 <_dtoa_r+0x94c>
 8006f92:	9b08      	ldr	r3, [sp, #32]
 8006f94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f96:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d042      	beq.n	8007024 <_dtoa_r+0xb5c>
 8006f9e:	4651      	mov	r1, sl
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	220a      	movs	r2, #10
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	f000 f9d1 	bl	800734c <__multadd>
 8006faa:	45b0      	cmp	r8, r6
 8006fac:	4682      	mov	sl, r0
 8006fae:	f04f 0300 	mov.w	r3, #0
 8006fb2:	f04f 020a 	mov.w	r2, #10
 8006fb6:	4641      	mov	r1, r8
 8006fb8:	4628      	mov	r0, r5
 8006fba:	d107      	bne.n	8006fcc <_dtoa_r+0xb04>
 8006fbc:	f000 f9c6 	bl	800734c <__multadd>
 8006fc0:	4680      	mov	r8, r0
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	9b08      	ldr	r3, [sp, #32]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	9308      	str	r3, [sp, #32]
 8006fca:	e775      	b.n	8006eb8 <_dtoa_r+0x9f0>
 8006fcc:	f000 f9be 	bl	800734c <__multadd>
 8006fd0:	4631      	mov	r1, r6
 8006fd2:	4680      	mov	r8, r0
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	220a      	movs	r2, #10
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f000 f9b7 	bl	800734c <__multadd>
 8006fde:	4606      	mov	r6, r0
 8006fe0:	e7f0      	b.n	8006fc4 <_dtoa_r+0xafc>
 8006fe2:	9b08      	ldr	r3, [sp, #32]
 8006fe4:	9306      	str	r3, [sp, #24]
 8006fe6:	9f03      	ldr	r7, [sp, #12]
 8006fe8:	4621      	mov	r1, r4
 8006fea:	4650      	mov	r0, sl
 8006fec:	f7ff f9e1 	bl	80063b2 <quorem>
 8006ff0:	9b03      	ldr	r3, [sp, #12]
 8006ff2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ff6:	f807 9b01 	strb.w	r9, [r7], #1
 8006ffa:	1afa      	subs	r2, r7, r3
 8006ffc:	9b06      	ldr	r3, [sp, #24]
 8006ffe:	4293      	cmp	r3, r2
 8007000:	dd07      	ble.n	8007012 <_dtoa_r+0xb4a>
 8007002:	4651      	mov	r1, sl
 8007004:	2300      	movs	r3, #0
 8007006:	220a      	movs	r2, #10
 8007008:	4628      	mov	r0, r5
 800700a:	f000 f99f 	bl	800734c <__multadd>
 800700e:	4682      	mov	sl, r0
 8007010:	e7ea      	b.n	8006fe8 <_dtoa_r+0xb20>
 8007012:	9b06      	ldr	r3, [sp, #24]
 8007014:	f04f 0800 	mov.w	r8, #0
 8007018:	2b00      	cmp	r3, #0
 800701a:	bfcc      	ite	gt
 800701c:	461f      	movgt	r7, r3
 800701e:	2701      	movle	r7, #1
 8007020:	9b03      	ldr	r3, [sp, #12]
 8007022:	441f      	add	r7, r3
 8007024:	4651      	mov	r1, sl
 8007026:	2201      	movs	r2, #1
 8007028:	4628      	mov	r0, r5
 800702a:	f000 fb3b 	bl	80076a4 <__lshift>
 800702e:	4621      	mov	r1, r4
 8007030:	4682      	mov	sl, r0
 8007032:	f000 fba3 	bl	800777c <__mcmp>
 8007036:	2800      	cmp	r0, #0
 8007038:	dc97      	bgt.n	8006f6a <_dtoa_r+0xaa2>
 800703a:	d102      	bne.n	8007042 <_dtoa_r+0xb7a>
 800703c:	f019 0f01 	tst.w	r9, #1
 8007040:	d193      	bne.n	8006f6a <_dtoa_r+0xaa2>
 8007042:	463b      	mov	r3, r7
 8007044:	461f      	mov	r7, r3
 8007046:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800704a:	2a30      	cmp	r2, #48	; 0x30
 800704c:	d0fa      	beq.n	8007044 <_dtoa_r+0xb7c>
 800704e:	e6e1      	b.n	8006e14 <_dtoa_r+0x94c>
 8007050:	9a03      	ldr	r2, [sp, #12]
 8007052:	429a      	cmp	r2, r3
 8007054:	d18a      	bne.n	8006f6c <_dtoa_r+0xaa4>
 8007056:	2331      	movs	r3, #49	; 0x31
 8007058:	f10b 0b01 	add.w	fp, fp, #1
 800705c:	e797      	b.n	8006f8e <_dtoa_r+0xac6>
 800705e:	4b0a      	ldr	r3, [pc, #40]	; (8007088 <_dtoa_r+0xbc0>)
 8007060:	f7ff ba9f 	b.w	80065a2 <_dtoa_r+0xda>
 8007064:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007066:	2b00      	cmp	r3, #0
 8007068:	f47f aa77 	bne.w	800655a <_dtoa_r+0x92>
 800706c:	4b07      	ldr	r3, [pc, #28]	; (800708c <_dtoa_r+0xbc4>)
 800706e:	f7ff ba98 	b.w	80065a2 <_dtoa_r+0xda>
 8007072:	9b06      	ldr	r3, [sp, #24]
 8007074:	2b00      	cmp	r3, #0
 8007076:	dcb6      	bgt.n	8006fe6 <_dtoa_r+0xb1e>
 8007078:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800707a:	2b02      	cmp	r3, #2
 800707c:	f73f aeb5 	bgt.w	8006dea <_dtoa_r+0x922>
 8007080:	e7b1      	b.n	8006fe6 <_dtoa_r+0xb1e>
 8007082:	bf00      	nop
 8007084:	080090f2 	.word	0x080090f2
 8007088:	08009052 	.word	0x08009052
 800708c:	08009076 	.word	0x08009076

08007090 <_free_r>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	4605      	mov	r5, r0
 8007094:	2900      	cmp	r1, #0
 8007096:	d040      	beq.n	800711a <_free_r+0x8a>
 8007098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800709c:	1f0c      	subs	r4, r1, #4
 800709e:	2b00      	cmp	r3, #0
 80070a0:	bfb8      	it	lt
 80070a2:	18e4      	addlt	r4, r4, r3
 80070a4:	f000 f8e4 	bl	8007270 <__malloc_lock>
 80070a8:	4a1c      	ldr	r2, [pc, #112]	; (800711c <_free_r+0x8c>)
 80070aa:	6813      	ldr	r3, [r2, #0]
 80070ac:	b933      	cbnz	r3, 80070bc <_free_r+0x2c>
 80070ae:	6063      	str	r3, [r4, #4]
 80070b0:	6014      	str	r4, [r2, #0]
 80070b2:	4628      	mov	r0, r5
 80070b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070b8:	f000 b8e0 	b.w	800727c <__malloc_unlock>
 80070bc:	42a3      	cmp	r3, r4
 80070be:	d908      	bls.n	80070d2 <_free_r+0x42>
 80070c0:	6820      	ldr	r0, [r4, #0]
 80070c2:	1821      	adds	r1, r4, r0
 80070c4:	428b      	cmp	r3, r1
 80070c6:	bf01      	itttt	eq
 80070c8:	6819      	ldreq	r1, [r3, #0]
 80070ca:	685b      	ldreq	r3, [r3, #4]
 80070cc:	1809      	addeq	r1, r1, r0
 80070ce:	6021      	streq	r1, [r4, #0]
 80070d0:	e7ed      	b.n	80070ae <_free_r+0x1e>
 80070d2:	461a      	mov	r2, r3
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	b10b      	cbz	r3, 80070dc <_free_r+0x4c>
 80070d8:	42a3      	cmp	r3, r4
 80070da:	d9fa      	bls.n	80070d2 <_free_r+0x42>
 80070dc:	6811      	ldr	r1, [r2, #0]
 80070de:	1850      	adds	r0, r2, r1
 80070e0:	42a0      	cmp	r0, r4
 80070e2:	d10b      	bne.n	80070fc <_free_r+0x6c>
 80070e4:	6820      	ldr	r0, [r4, #0]
 80070e6:	4401      	add	r1, r0
 80070e8:	1850      	adds	r0, r2, r1
 80070ea:	4283      	cmp	r3, r0
 80070ec:	6011      	str	r1, [r2, #0]
 80070ee:	d1e0      	bne.n	80070b2 <_free_r+0x22>
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	4408      	add	r0, r1
 80070f6:	6010      	str	r0, [r2, #0]
 80070f8:	6053      	str	r3, [r2, #4]
 80070fa:	e7da      	b.n	80070b2 <_free_r+0x22>
 80070fc:	d902      	bls.n	8007104 <_free_r+0x74>
 80070fe:	230c      	movs	r3, #12
 8007100:	602b      	str	r3, [r5, #0]
 8007102:	e7d6      	b.n	80070b2 <_free_r+0x22>
 8007104:	6820      	ldr	r0, [r4, #0]
 8007106:	1821      	adds	r1, r4, r0
 8007108:	428b      	cmp	r3, r1
 800710a:	bf01      	itttt	eq
 800710c:	6819      	ldreq	r1, [r3, #0]
 800710e:	685b      	ldreq	r3, [r3, #4]
 8007110:	1809      	addeq	r1, r1, r0
 8007112:	6021      	streq	r1, [r4, #0]
 8007114:	6063      	str	r3, [r4, #4]
 8007116:	6054      	str	r4, [r2, #4]
 8007118:	e7cb      	b.n	80070b2 <_free_r+0x22>
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	200007a0 	.word	0x200007a0

08007120 <malloc>:
 8007120:	4b02      	ldr	r3, [pc, #8]	; (800712c <malloc+0xc>)
 8007122:	4601      	mov	r1, r0
 8007124:	6818      	ldr	r0, [r3, #0]
 8007126:	f000 b823 	b.w	8007170 <_malloc_r>
 800712a:	bf00      	nop
 800712c:	2000006c 	.word	0x2000006c

08007130 <sbrk_aligned>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	4e0e      	ldr	r6, [pc, #56]	; (800716c <sbrk_aligned+0x3c>)
 8007134:	460c      	mov	r4, r1
 8007136:	6831      	ldr	r1, [r6, #0]
 8007138:	4605      	mov	r5, r0
 800713a:	b911      	cbnz	r1, 8007142 <sbrk_aligned+0x12>
 800713c:	f000 fe38 	bl	8007db0 <_sbrk_r>
 8007140:	6030      	str	r0, [r6, #0]
 8007142:	4621      	mov	r1, r4
 8007144:	4628      	mov	r0, r5
 8007146:	f000 fe33 	bl	8007db0 <_sbrk_r>
 800714a:	1c43      	adds	r3, r0, #1
 800714c:	d00a      	beq.n	8007164 <sbrk_aligned+0x34>
 800714e:	1cc4      	adds	r4, r0, #3
 8007150:	f024 0403 	bic.w	r4, r4, #3
 8007154:	42a0      	cmp	r0, r4
 8007156:	d007      	beq.n	8007168 <sbrk_aligned+0x38>
 8007158:	1a21      	subs	r1, r4, r0
 800715a:	4628      	mov	r0, r5
 800715c:	f000 fe28 	bl	8007db0 <_sbrk_r>
 8007160:	3001      	adds	r0, #1
 8007162:	d101      	bne.n	8007168 <sbrk_aligned+0x38>
 8007164:	f04f 34ff 	mov.w	r4, #4294967295
 8007168:	4620      	mov	r0, r4
 800716a:	bd70      	pop	{r4, r5, r6, pc}
 800716c:	200007a4 	.word	0x200007a4

08007170 <_malloc_r>:
 8007170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007174:	1ccd      	adds	r5, r1, #3
 8007176:	f025 0503 	bic.w	r5, r5, #3
 800717a:	3508      	adds	r5, #8
 800717c:	2d0c      	cmp	r5, #12
 800717e:	bf38      	it	cc
 8007180:	250c      	movcc	r5, #12
 8007182:	2d00      	cmp	r5, #0
 8007184:	4607      	mov	r7, r0
 8007186:	db01      	blt.n	800718c <_malloc_r+0x1c>
 8007188:	42a9      	cmp	r1, r5
 800718a:	d905      	bls.n	8007198 <_malloc_r+0x28>
 800718c:	230c      	movs	r3, #12
 800718e:	2600      	movs	r6, #0
 8007190:	603b      	str	r3, [r7, #0]
 8007192:	4630      	mov	r0, r6
 8007194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007198:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800726c <_malloc_r+0xfc>
 800719c:	f000 f868 	bl	8007270 <__malloc_lock>
 80071a0:	f8d8 3000 	ldr.w	r3, [r8]
 80071a4:	461c      	mov	r4, r3
 80071a6:	bb5c      	cbnz	r4, 8007200 <_malloc_r+0x90>
 80071a8:	4629      	mov	r1, r5
 80071aa:	4638      	mov	r0, r7
 80071ac:	f7ff ffc0 	bl	8007130 <sbrk_aligned>
 80071b0:	1c43      	adds	r3, r0, #1
 80071b2:	4604      	mov	r4, r0
 80071b4:	d155      	bne.n	8007262 <_malloc_r+0xf2>
 80071b6:	f8d8 4000 	ldr.w	r4, [r8]
 80071ba:	4626      	mov	r6, r4
 80071bc:	2e00      	cmp	r6, #0
 80071be:	d145      	bne.n	800724c <_malloc_r+0xdc>
 80071c0:	2c00      	cmp	r4, #0
 80071c2:	d048      	beq.n	8007256 <_malloc_r+0xe6>
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	4631      	mov	r1, r6
 80071c8:	4638      	mov	r0, r7
 80071ca:	eb04 0903 	add.w	r9, r4, r3
 80071ce:	f000 fdef 	bl	8007db0 <_sbrk_r>
 80071d2:	4581      	cmp	r9, r0
 80071d4:	d13f      	bne.n	8007256 <_malloc_r+0xe6>
 80071d6:	6821      	ldr	r1, [r4, #0]
 80071d8:	4638      	mov	r0, r7
 80071da:	1a6d      	subs	r5, r5, r1
 80071dc:	4629      	mov	r1, r5
 80071de:	f7ff ffa7 	bl	8007130 <sbrk_aligned>
 80071e2:	3001      	adds	r0, #1
 80071e4:	d037      	beq.n	8007256 <_malloc_r+0xe6>
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	442b      	add	r3, r5
 80071ea:	6023      	str	r3, [r4, #0]
 80071ec:	f8d8 3000 	ldr.w	r3, [r8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d038      	beq.n	8007266 <_malloc_r+0xf6>
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	42a2      	cmp	r2, r4
 80071f8:	d12b      	bne.n	8007252 <_malloc_r+0xe2>
 80071fa:	2200      	movs	r2, #0
 80071fc:	605a      	str	r2, [r3, #4]
 80071fe:	e00f      	b.n	8007220 <_malloc_r+0xb0>
 8007200:	6822      	ldr	r2, [r4, #0]
 8007202:	1b52      	subs	r2, r2, r5
 8007204:	d41f      	bmi.n	8007246 <_malloc_r+0xd6>
 8007206:	2a0b      	cmp	r2, #11
 8007208:	d917      	bls.n	800723a <_malloc_r+0xca>
 800720a:	1961      	adds	r1, r4, r5
 800720c:	42a3      	cmp	r3, r4
 800720e:	6025      	str	r5, [r4, #0]
 8007210:	bf18      	it	ne
 8007212:	6059      	strne	r1, [r3, #4]
 8007214:	6863      	ldr	r3, [r4, #4]
 8007216:	bf08      	it	eq
 8007218:	f8c8 1000 	streq.w	r1, [r8]
 800721c:	5162      	str	r2, [r4, r5]
 800721e:	604b      	str	r3, [r1, #4]
 8007220:	4638      	mov	r0, r7
 8007222:	f104 060b 	add.w	r6, r4, #11
 8007226:	f000 f829 	bl	800727c <__malloc_unlock>
 800722a:	f026 0607 	bic.w	r6, r6, #7
 800722e:	1d23      	adds	r3, r4, #4
 8007230:	1af2      	subs	r2, r6, r3
 8007232:	d0ae      	beq.n	8007192 <_malloc_r+0x22>
 8007234:	1b9b      	subs	r3, r3, r6
 8007236:	50a3      	str	r3, [r4, r2]
 8007238:	e7ab      	b.n	8007192 <_malloc_r+0x22>
 800723a:	42a3      	cmp	r3, r4
 800723c:	6862      	ldr	r2, [r4, #4]
 800723e:	d1dd      	bne.n	80071fc <_malloc_r+0x8c>
 8007240:	f8c8 2000 	str.w	r2, [r8]
 8007244:	e7ec      	b.n	8007220 <_malloc_r+0xb0>
 8007246:	4623      	mov	r3, r4
 8007248:	6864      	ldr	r4, [r4, #4]
 800724a:	e7ac      	b.n	80071a6 <_malloc_r+0x36>
 800724c:	4634      	mov	r4, r6
 800724e:	6876      	ldr	r6, [r6, #4]
 8007250:	e7b4      	b.n	80071bc <_malloc_r+0x4c>
 8007252:	4613      	mov	r3, r2
 8007254:	e7cc      	b.n	80071f0 <_malloc_r+0x80>
 8007256:	230c      	movs	r3, #12
 8007258:	4638      	mov	r0, r7
 800725a:	603b      	str	r3, [r7, #0]
 800725c:	f000 f80e 	bl	800727c <__malloc_unlock>
 8007260:	e797      	b.n	8007192 <_malloc_r+0x22>
 8007262:	6025      	str	r5, [r4, #0]
 8007264:	e7dc      	b.n	8007220 <_malloc_r+0xb0>
 8007266:	605b      	str	r3, [r3, #4]
 8007268:	deff      	udf	#255	; 0xff
 800726a:	bf00      	nop
 800726c:	200007a0 	.word	0x200007a0

08007270 <__malloc_lock>:
 8007270:	4801      	ldr	r0, [pc, #4]	; (8007278 <__malloc_lock+0x8>)
 8007272:	f7ff b880 	b.w	8006376 <__retarget_lock_acquire_recursive>
 8007276:	bf00      	nop
 8007278:	2000079c 	.word	0x2000079c

0800727c <__malloc_unlock>:
 800727c:	4801      	ldr	r0, [pc, #4]	; (8007284 <__malloc_unlock+0x8>)
 800727e:	f7ff b87b 	b.w	8006378 <__retarget_lock_release_recursive>
 8007282:	bf00      	nop
 8007284:	2000079c 	.word	0x2000079c

08007288 <_Balloc>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	69c6      	ldr	r6, [r0, #28]
 800728c:	4604      	mov	r4, r0
 800728e:	460d      	mov	r5, r1
 8007290:	b976      	cbnz	r6, 80072b0 <_Balloc+0x28>
 8007292:	2010      	movs	r0, #16
 8007294:	f7ff ff44 	bl	8007120 <malloc>
 8007298:	4602      	mov	r2, r0
 800729a:	61e0      	str	r0, [r4, #28]
 800729c:	b920      	cbnz	r0, 80072a8 <_Balloc+0x20>
 800729e:	216b      	movs	r1, #107	; 0x6b
 80072a0:	4b17      	ldr	r3, [pc, #92]	; (8007300 <_Balloc+0x78>)
 80072a2:	4818      	ldr	r0, [pc, #96]	; (8007304 <_Balloc+0x7c>)
 80072a4:	f000 fd94 	bl	8007dd0 <__assert_func>
 80072a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072ac:	6006      	str	r6, [r0, #0]
 80072ae:	60c6      	str	r6, [r0, #12]
 80072b0:	69e6      	ldr	r6, [r4, #28]
 80072b2:	68f3      	ldr	r3, [r6, #12]
 80072b4:	b183      	cbz	r3, 80072d8 <_Balloc+0x50>
 80072b6:	69e3      	ldr	r3, [r4, #28]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072be:	b9b8      	cbnz	r0, 80072f0 <_Balloc+0x68>
 80072c0:	2101      	movs	r1, #1
 80072c2:	fa01 f605 	lsl.w	r6, r1, r5
 80072c6:	1d72      	adds	r2, r6, #5
 80072c8:	4620      	mov	r0, r4
 80072ca:	0092      	lsls	r2, r2, #2
 80072cc:	f000 fd9e 	bl	8007e0c <_calloc_r>
 80072d0:	b160      	cbz	r0, 80072ec <_Balloc+0x64>
 80072d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072d6:	e00e      	b.n	80072f6 <_Balloc+0x6e>
 80072d8:	2221      	movs	r2, #33	; 0x21
 80072da:	2104      	movs	r1, #4
 80072dc:	4620      	mov	r0, r4
 80072de:	f000 fd95 	bl	8007e0c <_calloc_r>
 80072e2:	69e3      	ldr	r3, [r4, #28]
 80072e4:	60f0      	str	r0, [r6, #12]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1e4      	bne.n	80072b6 <_Balloc+0x2e>
 80072ec:	2000      	movs	r0, #0
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	6802      	ldr	r2, [r0, #0]
 80072f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072f6:	2300      	movs	r3, #0
 80072f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072fc:	e7f7      	b.n	80072ee <_Balloc+0x66>
 80072fe:	bf00      	nop
 8007300:	08009083 	.word	0x08009083
 8007304:	08009103 	.word	0x08009103

08007308 <_Bfree>:
 8007308:	b570      	push	{r4, r5, r6, lr}
 800730a:	69c6      	ldr	r6, [r0, #28]
 800730c:	4605      	mov	r5, r0
 800730e:	460c      	mov	r4, r1
 8007310:	b976      	cbnz	r6, 8007330 <_Bfree+0x28>
 8007312:	2010      	movs	r0, #16
 8007314:	f7ff ff04 	bl	8007120 <malloc>
 8007318:	4602      	mov	r2, r0
 800731a:	61e8      	str	r0, [r5, #28]
 800731c:	b920      	cbnz	r0, 8007328 <_Bfree+0x20>
 800731e:	218f      	movs	r1, #143	; 0x8f
 8007320:	4b08      	ldr	r3, [pc, #32]	; (8007344 <_Bfree+0x3c>)
 8007322:	4809      	ldr	r0, [pc, #36]	; (8007348 <_Bfree+0x40>)
 8007324:	f000 fd54 	bl	8007dd0 <__assert_func>
 8007328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800732c:	6006      	str	r6, [r0, #0]
 800732e:	60c6      	str	r6, [r0, #12]
 8007330:	b13c      	cbz	r4, 8007342 <_Bfree+0x3a>
 8007332:	69eb      	ldr	r3, [r5, #28]
 8007334:	6862      	ldr	r2, [r4, #4]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800733c:	6021      	str	r1, [r4, #0]
 800733e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007342:	bd70      	pop	{r4, r5, r6, pc}
 8007344:	08009083 	.word	0x08009083
 8007348:	08009103 	.word	0x08009103

0800734c <__multadd>:
 800734c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007350:	4607      	mov	r7, r0
 8007352:	460c      	mov	r4, r1
 8007354:	461e      	mov	r6, r3
 8007356:	2000      	movs	r0, #0
 8007358:	690d      	ldr	r5, [r1, #16]
 800735a:	f101 0c14 	add.w	ip, r1, #20
 800735e:	f8dc 3000 	ldr.w	r3, [ip]
 8007362:	3001      	adds	r0, #1
 8007364:	b299      	uxth	r1, r3
 8007366:	fb02 6101 	mla	r1, r2, r1, r6
 800736a:	0c1e      	lsrs	r6, r3, #16
 800736c:	0c0b      	lsrs	r3, r1, #16
 800736e:	fb02 3306 	mla	r3, r2, r6, r3
 8007372:	b289      	uxth	r1, r1
 8007374:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007378:	4285      	cmp	r5, r0
 800737a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800737e:	f84c 1b04 	str.w	r1, [ip], #4
 8007382:	dcec      	bgt.n	800735e <__multadd+0x12>
 8007384:	b30e      	cbz	r6, 80073ca <__multadd+0x7e>
 8007386:	68a3      	ldr	r3, [r4, #8]
 8007388:	42ab      	cmp	r3, r5
 800738a:	dc19      	bgt.n	80073c0 <__multadd+0x74>
 800738c:	6861      	ldr	r1, [r4, #4]
 800738e:	4638      	mov	r0, r7
 8007390:	3101      	adds	r1, #1
 8007392:	f7ff ff79 	bl	8007288 <_Balloc>
 8007396:	4680      	mov	r8, r0
 8007398:	b928      	cbnz	r0, 80073a6 <__multadd+0x5a>
 800739a:	4602      	mov	r2, r0
 800739c:	21ba      	movs	r1, #186	; 0xba
 800739e:	4b0c      	ldr	r3, [pc, #48]	; (80073d0 <__multadd+0x84>)
 80073a0:	480c      	ldr	r0, [pc, #48]	; (80073d4 <__multadd+0x88>)
 80073a2:	f000 fd15 	bl	8007dd0 <__assert_func>
 80073a6:	6922      	ldr	r2, [r4, #16]
 80073a8:	f104 010c 	add.w	r1, r4, #12
 80073ac:	3202      	adds	r2, #2
 80073ae:	0092      	lsls	r2, r2, #2
 80073b0:	300c      	adds	r0, #12
 80073b2:	f7fe fff0 	bl	8006396 <memcpy>
 80073b6:	4621      	mov	r1, r4
 80073b8:	4638      	mov	r0, r7
 80073ba:	f7ff ffa5 	bl	8007308 <_Bfree>
 80073be:	4644      	mov	r4, r8
 80073c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073c4:	3501      	adds	r5, #1
 80073c6:	615e      	str	r6, [r3, #20]
 80073c8:	6125      	str	r5, [r4, #16]
 80073ca:	4620      	mov	r0, r4
 80073cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d0:	080090f2 	.word	0x080090f2
 80073d4:	08009103 	.word	0x08009103

080073d8 <__hi0bits>:
 80073d8:	0c02      	lsrs	r2, r0, #16
 80073da:	0412      	lsls	r2, r2, #16
 80073dc:	4603      	mov	r3, r0
 80073de:	b9ca      	cbnz	r2, 8007414 <__hi0bits+0x3c>
 80073e0:	0403      	lsls	r3, r0, #16
 80073e2:	2010      	movs	r0, #16
 80073e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80073e8:	bf04      	itt	eq
 80073ea:	021b      	lsleq	r3, r3, #8
 80073ec:	3008      	addeq	r0, #8
 80073ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80073f2:	bf04      	itt	eq
 80073f4:	011b      	lsleq	r3, r3, #4
 80073f6:	3004      	addeq	r0, #4
 80073f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80073fc:	bf04      	itt	eq
 80073fe:	009b      	lsleq	r3, r3, #2
 8007400:	3002      	addeq	r0, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	db05      	blt.n	8007412 <__hi0bits+0x3a>
 8007406:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800740a:	f100 0001 	add.w	r0, r0, #1
 800740e:	bf08      	it	eq
 8007410:	2020      	moveq	r0, #32
 8007412:	4770      	bx	lr
 8007414:	2000      	movs	r0, #0
 8007416:	e7e5      	b.n	80073e4 <__hi0bits+0xc>

08007418 <__lo0bits>:
 8007418:	6803      	ldr	r3, [r0, #0]
 800741a:	4602      	mov	r2, r0
 800741c:	f013 0007 	ands.w	r0, r3, #7
 8007420:	d00b      	beq.n	800743a <__lo0bits+0x22>
 8007422:	07d9      	lsls	r1, r3, #31
 8007424:	d421      	bmi.n	800746a <__lo0bits+0x52>
 8007426:	0798      	lsls	r0, r3, #30
 8007428:	bf49      	itett	mi
 800742a:	085b      	lsrmi	r3, r3, #1
 800742c:	089b      	lsrpl	r3, r3, #2
 800742e:	2001      	movmi	r0, #1
 8007430:	6013      	strmi	r3, [r2, #0]
 8007432:	bf5c      	itt	pl
 8007434:	2002      	movpl	r0, #2
 8007436:	6013      	strpl	r3, [r2, #0]
 8007438:	4770      	bx	lr
 800743a:	b299      	uxth	r1, r3
 800743c:	b909      	cbnz	r1, 8007442 <__lo0bits+0x2a>
 800743e:	2010      	movs	r0, #16
 8007440:	0c1b      	lsrs	r3, r3, #16
 8007442:	b2d9      	uxtb	r1, r3
 8007444:	b909      	cbnz	r1, 800744a <__lo0bits+0x32>
 8007446:	3008      	adds	r0, #8
 8007448:	0a1b      	lsrs	r3, r3, #8
 800744a:	0719      	lsls	r1, r3, #28
 800744c:	bf04      	itt	eq
 800744e:	091b      	lsreq	r3, r3, #4
 8007450:	3004      	addeq	r0, #4
 8007452:	0799      	lsls	r1, r3, #30
 8007454:	bf04      	itt	eq
 8007456:	089b      	lsreq	r3, r3, #2
 8007458:	3002      	addeq	r0, #2
 800745a:	07d9      	lsls	r1, r3, #31
 800745c:	d403      	bmi.n	8007466 <__lo0bits+0x4e>
 800745e:	085b      	lsrs	r3, r3, #1
 8007460:	f100 0001 	add.w	r0, r0, #1
 8007464:	d003      	beq.n	800746e <__lo0bits+0x56>
 8007466:	6013      	str	r3, [r2, #0]
 8007468:	4770      	bx	lr
 800746a:	2000      	movs	r0, #0
 800746c:	4770      	bx	lr
 800746e:	2020      	movs	r0, #32
 8007470:	4770      	bx	lr
	...

08007474 <__i2b>:
 8007474:	b510      	push	{r4, lr}
 8007476:	460c      	mov	r4, r1
 8007478:	2101      	movs	r1, #1
 800747a:	f7ff ff05 	bl	8007288 <_Balloc>
 800747e:	4602      	mov	r2, r0
 8007480:	b928      	cbnz	r0, 800748e <__i2b+0x1a>
 8007482:	f240 1145 	movw	r1, #325	; 0x145
 8007486:	4b04      	ldr	r3, [pc, #16]	; (8007498 <__i2b+0x24>)
 8007488:	4804      	ldr	r0, [pc, #16]	; (800749c <__i2b+0x28>)
 800748a:	f000 fca1 	bl	8007dd0 <__assert_func>
 800748e:	2301      	movs	r3, #1
 8007490:	6144      	str	r4, [r0, #20]
 8007492:	6103      	str	r3, [r0, #16]
 8007494:	bd10      	pop	{r4, pc}
 8007496:	bf00      	nop
 8007498:	080090f2 	.word	0x080090f2
 800749c:	08009103 	.word	0x08009103

080074a0 <__multiply>:
 80074a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	4691      	mov	r9, r2
 80074a6:	690a      	ldr	r2, [r1, #16]
 80074a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074ac:	460c      	mov	r4, r1
 80074ae:	429a      	cmp	r2, r3
 80074b0:	bfbe      	ittt	lt
 80074b2:	460b      	movlt	r3, r1
 80074b4:	464c      	movlt	r4, r9
 80074b6:	4699      	movlt	r9, r3
 80074b8:	6927      	ldr	r7, [r4, #16]
 80074ba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074be:	68a3      	ldr	r3, [r4, #8]
 80074c0:	6861      	ldr	r1, [r4, #4]
 80074c2:	eb07 060a 	add.w	r6, r7, sl
 80074c6:	42b3      	cmp	r3, r6
 80074c8:	b085      	sub	sp, #20
 80074ca:	bfb8      	it	lt
 80074cc:	3101      	addlt	r1, #1
 80074ce:	f7ff fedb 	bl	8007288 <_Balloc>
 80074d2:	b930      	cbnz	r0, 80074e2 <__multiply+0x42>
 80074d4:	4602      	mov	r2, r0
 80074d6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80074da:	4b43      	ldr	r3, [pc, #268]	; (80075e8 <__multiply+0x148>)
 80074dc:	4843      	ldr	r0, [pc, #268]	; (80075ec <__multiply+0x14c>)
 80074de:	f000 fc77 	bl	8007dd0 <__assert_func>
 80074e2:	f100 0514 	add.w	r5, r0, #20
 80074e6:	462b      	mov	r3, r5
 80074e8:	2200      	movs	r2, #0
 80074ea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074ee:	4543      	cmp	r3, r8
 80074f0:	d321      	bcc.n	8007536 <__multiply+0x96>
 80074f2:	f104 0314 	add.w	r3, r4, #20
 80074f6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80074fa:	f109 0314 	add.w	r3, r9, #20
 80074fe:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007502:	9202      	str	r2, [sp, #8]
 8007504:	1b3a      	subs	r2, r7, r4
 8007506:	3a15      	subs	r2, #21
 8007508:	f022 0203 	bic.w	r2, r2, #3
 800750c:	3204      	adds	r2, #4
 800750e:	f104 0115 	add.w	r1, r4, #21
 8007512:	428f      	cmp	r7, r1
 8007514:	bf38      	it	cc
 8007516:	2204      	movcc	r2, #4
 8007518:	9201      	str	r2, [sp, #4]
 800751a:	9a02      	ldr	r2, [sp, #8]
 800751c:	9303      	str	r3, [sp, #12]
 800751e:	429a      	cmp	r2, r3
 8007520:	d80c      	bhi.n	800753c <__multiply+0x9c>
 8007522:	2e00      	cmp	r6, #0
 8007524:	dd03      	ble.n	800752e <__multiply+0x8e>
 8007526:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800752a:	2b00      	cmp	r3, #0
 800752c:	d05a      	beq.n	80075e4 <__multiply+0x144>
 800752e:	6106      	str	r6, [r0, #16]
 8007530:	b005      	add	sp, #20
 8007532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007536:	f843 2b04 	str.w	r2, [r3], #4
 800753a:	e7d8      	b.n	80074ee <__multiply+0x4e>
 800753c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007540:	f1ba 0f00 	cmp.w	sl, #0
 8007544:	d023      	beq.n	800758e <__multiply+0xee>
 8007546:	46a9      	mov	r9, r5
 8007548:	f04f 0c00 	mov.w	ip, #0
 800754c:	f104 0e14 	add.w	lr, r4, #20
 8007550:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007554:	f8d9 1000 	ldr.w	r1, [r9]
 8007558:	fa1f fb82 	uxth.w	fp, r2
 800755c:	b289      	uxth	r1, r1
 800755e:	fb0a 110b 	mla	r1, sl, fp, r1
 8007562:	4461      	add	r1, ip
 8007564:	f8d9 c000 	ldr.w	ip, [r9]
 8007568:	0c12      	lsrs	r2, r2, #16
 800756a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800756e:	fb0a c202 	mla	r2, sl, r2, ip
 8007572:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007576:	b289      	uxth	r1, r1
 8007578:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800757c:	4577      	cmp	r7, lr
 800757e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007582:	f849 1b04 	str.w	r1, [r9], #4
 8007586:	d8e3      	bhi.n	8007550 <__multiply+0xb0>
 8007588:	9a01      	ldr	r2, [sp, #4]
 800758a:	f845 c002 	str.w	ip, [r5, r2]
 800758e:	9a03      	ldr	r2, [sp, #12]
 8007590:	3304      	adds	r3, #4
 8007592:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007596:	f1b9 0f00 	cmp.w	r9, #0
 800759a:	d021      	beq.n	80075e0 <__multiply+0x140>
 800759c:	46ae      	mov	lr, r5
 800759e:	f04f 0a00 	mov.w	sl, #0
 80075a2:	6829      	ldr	r1, [r5, #0]
 80075a4:	f104 0c14 	add.w	ip, r4, #20
 80075a8:	f8bc b000 	ldrh.w	fp, [ip]
 80075ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80075b0:	b289      	uxth	r1, r1
 80075b2:	fb09 220b 	mla	r2, r9, fp, r2
 80075b6:	4452      	add	r2, sl
 80075b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075bc:	f84e 1b04 	str.w	r1, [lr], #4
 80075c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80075c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80075c8:	f8be 1000 	ldrh.w	r1, [lr]
 80075cc:	4567      	cmp	r7, ip
 80075ce:	fb09 110a 	mla	r1, r9, sl, r1
 80075d2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80075d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80075da:	d8e5      	bhi.n	80075a8 <__multiply+0x108>
 80075dc:	9a01      	ldr	r2, [sp, #4]
 80075de:	50a9      	str	r1, [r5, r2]
 80075e0:	3504      	adds	r5, #4
 80075e2:	e79a      	b.n	800751a <__multiply+0x7a>
 80075e4:	3e01      	subs	r6, #1
 80075e6:	e79c      	b.n	8007522 <__multiply+0x82>
 80075e8:	080090f2 	.word	0x080090f2
 80075ec:	08009103 	.word	0x08009103

080075f0 <__pow5mult>:
 80075f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075f4:	4615      	mov	r5, r2
 80075f6:	f012 0203 	ands.w	r2, r2, #3
 80075fa:	4606      	mov	r6, r0
 80075fc:	460f      	mov	r7, r1
 80075fe:	d007      	beq.n	8007610 <__pow5mult+0x20>
 8007600:	4c25      	ldr	r4, [pc, #148]	; (8007698 <__pow5mult+0xa8>)
 8007602:	3a01      	subs	r2, #1
 8007604:	2300      	movs	r3, #0
 8007606:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800760a:	f7ff fe9f 	bl	800734c <__multadd>
 800760e:	4607      	mov	r7, r0
 8007610:	10ad      	asrs	r5, r5, #2
 8007612:	d03d      	beq.n	8007690 <__pow5mult+0xa0>
 8007614:	69f4      	ldr	r4, [r6, #28]
 8007616:	b97c      	cbnz	r4, 8007638 <__pow5mult+0x48>
 8007618:	2010      	movs	r0, #16
 800761a:	f7ff fd81 	bl	8007120 <malloc>
 800761e:	4602      	mov	r2, r0
 8007620:	61f0      	str	r0, [r6, #28]
 8007622:	b928      	cbnz	r0, 8007630 <__pow5mult+0x40>
 8007624:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007628:	4b1c      	ldr	r3, [pc, #112]	; (800769c <__pow5mult+0xac>)
 800762a:	481d      	ldr	r0, [pc, #116]	; (80076a0 <__pow5mult+0xb0>)
 800762c:	f000 fbd0 	bl	8007dd0 <__assert_func>
 8007630:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007634:	6004      	str	r4, [r0, #0]
 8007636:	60c4      	str	r4, [r0, #12]
 8007638:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800763c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007640:	b94c      	cbnz	r4, 8007656 <__pow5mult+0x66>
 8007642:	f240 2171 	movw	r1, #625	; 0x271
 8007646:	4630      	mov	r0, r6
 8007648:	f7ff ff14 	bl	8007474 <__i2b>
 800764c:	2300      	movs	r3, #0
 800764e:	4604      	mov	r4, r0
 8007650:	f8c8 0008 	str.w	r0, [r8, #8]
 8007654:	6003      	str	r3, [r0, #0]
 8007656:	f04f 0900 	mov.w	r9, #0
 800765a:	07eb      	lsls	r3, r5, #31
 800765c:	d50a      	bpl.n	8007674 <__pow5mult+0x84>
 800765e:	4639      	mov	r1, r7
 8007660:	4622      	mov	r2, r4
 8007662:	4630      	mov	r0, r6
 8007664:	f7ff ff1c 	bl	80074a0 <__multiply>
 8007668:	4680      	mov	r8, r0
 800766a:	4639      	mov	r1, r7
 800766c:	4630      	mov	r0, r6
 800766e:	f7ff fe4b 	bl	8007308 <_Bfree>
 8007672:	4647      	mov	r7, r8
 8007674:	106d      	asrs	r5, r5, #1
 8007676:	d00b      	beq.n	8007690 <__pow5mult+0xa0>
 8007678:	6820      	ldr	r0, [r4, #0]
 800767a:	b938      	cbnz	r0, 800768c <__pow5mult+0x9c>
 800767c:	4622      	mov	r2, r4
 800767e:	4621      	mov	r1, r4
 8007680:	4630      	mov	r0, r6
 8007682:	f7ff ff0d 	bl	80074a0 <__multiply>
 8007686:	6020      	str	r0, [r4, #0]
 8007688:	f8c0 9000 	str.w	r9, [r0]
 800768c:	4604      	mov	r4, r0
 800768e:	e7e4      	b.n	800765a <__pow5mult+0x6a>
 8007690:	4638      	mov	r0, r7
 8007692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007696:	bf00      	nop
 8007698:	08009250 	.word	0x08009250
 800769c:	08009083 	.word	0x08009083
 80076a0:	08009103 	.word	0x08009103

080076a4 <__lshift>:
 80076a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a8:	460c      	mov	r4, r1
 80076aa:	4607      	mov	r7, r0
 80076ac:	4691      	mov	r9, r2
 80076ae:	6923      	ldr	r3, [r4, #16]
 80076b0:	6849      	ldr	r1, [r1, #4]
 80076b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076b6:	68a3      	ldr	r3, [r4, #8]
 80076b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076bc:	f108 0601 	add.w	r6, r8, #1
 80076c0:	42b3      	cmp	r3, r6
 80076c2:	db0b      	blt.n	80076dc <__lshift+0x38>
 80076c4:	4638      	mov	r0, r7
 80076c6:	f7ff fddf 	bl	8007288 <_Balloc>
 80076ca:	4605      	mov	r5, r0
 80076cc:	b948      	cbnz	r0, 80076e2 <__lshift+0x3e>
 80076ce:	4602      	mov	r2, r0
 80076d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80076d4:	4b27      	ldr	r3, [pc, #156]	; (8007774 <__lshift+0xd0>)
 80076d6:	4828      	ldr	r0, [pc, #160]	; (8007778 <__lshift+0xd4>)
 80076d8:	f000 fb7a 	bl	8007dd0 <__assert_func>
 80076dc:	3101      	adds	r1, #1
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	e7ee      	b.n	80076c0 <__lshift+0x1c>
 80076e2:	2300      	movs	r3, #0
 80076e4:	f100 0114 	add.w	r1, r0, #20
 80076e8:	f100 0210 	add.w	r2, r0, #16
 80076ec:	4618      	mov	r0, r3
 80076ee:	4553      	cmp	r3, sl
 80076f0:	db33      	blt.n	800775a <__lshift+0xb6>
 80076f2:	6920      	ldr	r0, [r4, #16]
 80076f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076f8:	f104 0314 	add.w	r3, r4, #20
 80076fc:	f019 091f 	ands.w	r9, r9, #31
 8007700:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007704:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007708:	d02b      	beq.n	8007762 <__lshift+0xbe>
 800770a:	468a      	mov	sl, r1
 800770c:	2200      	movs	r2, #0
 800770e:	f1c9 0e20 	rsb	lr, r9, #32
 8007712:	6818      	ldr	r0, [r3, #0]
 8007714:	fa00 f009 	lsl.w	r0, r0, r9
 8007718:	4310      	orrs	r0, r2
 800771a:	f84a 0b04 	str.w	r0, [sl], #4
 800771e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007722:	459c      	cmp	ip, r3
 8007724:	fa22 f20e 	lsr.w	r2, r2, lr
 8007728:	d8f3      	bhi.n	8007712 <__lshift+0x6e>
 800772a:	ebac 0304 	sub.w	r3, ip, r4
 800772e:	3b15      	subs	r3, #21
 8007730:	f023 0303 	bic.w	r3, r3, #3
 8007734:	3304      	adds	r3, #4
 8007736:	f104 0015 	add.w	r0, r4, #21
 800773a:	4584      	cmp	ip, r0
 800773c:	bf38      	it	cc
 800773e:	2304      	movcc	r3, #4
 8007740:	50ca      	str	r2, [r1, r3]
 8007742:	b10a      	cbz	r2, 8007748 <__lshift+0xa4>
 8007744:	f108 0602 	add.w	r6, r8, #2
 8007748:	3e01      	subs	r6, #1
 800774a:	4638      	mov	r0, r7
 800774c:	4621      	mov	r1, r4
 800774e:	612e      	str	r6, [r5, #16]
 8007750:	f7ff fdda 	bl	8007308 <_Bfree>
 8007754:	4628      	mov	r0, r5
 8007756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800775a:	f842 0f04 	str.w	r0, [r2, #4]!
 800775e:	3301      	adds	r3, #1
 8007760:	e7c5      	b.n	80076ee <__lshift+0x4a>
 8007762:	3904      	subs	r1, #4
 8007764:	f853 2b04 	ldr.w	r2, [r3], #4
 8007768:	459c      	cmp	ip, r3
 800776a:	f841 2f04 	str.w	r2, [r1, #4]!
 800776e:	d8f9      	bhi.n	8007764 <__lshift+0xc0>
 8007770:	e7ea      	b.n	8007748 <__lshift+0xa4>
 8007772:	bf00      	nop
 8007774:	080090f2 	.word	0x080090f2
 8007778:	08009103 	.word	0x08009103

0800777c <__mcmp>:
 800777c:	4603      	mov	r3, r0
 800777e:	690a      	ldr	r2, [r1, #16]
 8007780:	6900      	ldr	r0, [r0, #16]
 8007782:	b530      	push	{r4, r5, lr}
 8007784:	1a80      	subs	r0, r0, r2
 8007786:	d10d      	bne.n	80077a4 <__mcmp+0x28>
 8007788:	3314      	adds	r3, #20
 800778a:	3114      	adds	r1, #20
 800778c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007790:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007794:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007798:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800779c:	4295      	cmp	r5, r2
 800779e:	d002      	beq.n	80077a6 <__mcmp+0x2a>
 80077a0:	d304      	bcc.n	80077ac <__mcmp+0x30>
 80077a2:	2001      	movs	r0, #1
 80077a4:	bd30      	pop	{r4, r5, pc}
 80077a6:	42a3      	cmp	r3, r4
 80077a8:	d3f4      	bcc.n	8007794 <__mcmp+0x18>
 80077aa:	e7fb      	b.n	80077a4 <__mcmp+0x28>
 80077ac:	f04f 30ff 	mov.w	r0, #4294967295
 80077b0:	e7f8      	b.n	80077a4 <__mcmp+0x28>
	...

080077b4 <__mdiff>:
 80077b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b8:	460d      	mov	r5, r1
 80077ba:	4607      	mov	r7, r0
 80077bc:	4611      	mov	r1, r2
 80077be:	4628      	mov	r0, r5
 80077c0:	4614      	mov	r4, r2
 80077c2:	f7ff ffdb 	bl	800777c <__mcmp>
 80077c6:	1e06      	subs	r6, r0, #0
 80077c8:	d111      	bne.n	80077ee <__mdiff+0x3a>
 80077ca:	4631      	mov	r1, r6
 80077cc:	4638      	mov	r0, r7
 80077ce:	f7ff fd5b 	bl	8007288 <_Balloc>
 80077d2:	4602      	mov	r2, r0
 80077d4:	b928      	cbnz	r0, 80077e2 <__mdiff+0x2e>
 80077d6:	f240 2137 	movw	r1, #567	; 0x237
 80077da:	4b3a      	ldr	r3, [pc, #232]	; (80078c4 <__mdiff+0x110>)
 80077dc:	483a      	ldr	r0, [pc, #232]	; (80078c8 <__mdiff+0x114>)
 80077de:	f000 faf7 	bl	8007dd0 <__assert_func>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80077e8:	4610      	mov	r0, r2
 80077ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ee:	bfa4      	itt	ge
 80077f0:	4623      	movge	r3, r4
 80077f2:	462c      	movge	r4, r5
 80077f4:	4638      	mov	r0, r7
 80077f6:	6861      	ldr	r1, [r4, #4]
 80077f8:	bfa6      	itte	ge
 80077fa:	461d      	movge	r5, r3
 80077fc:	2600      	movge	r6, #0
 80077fe:	2601      	movlt	r6, #1
 8007800:	f7ff fd42 	bl	8007288 <_Balloc>
 8007804:	4602      	mov	r2, r0
 8007806:	b918      	cbnz	r0, 8007810 <__mdiff+0x5c>
 8007808:	f240 2145 	movw	r1, #581	; 0x245
 800780c:	4b2d      	ldr	r3, [pc, #180]	; (80078c4 <__mdiff+0x110>)
 800780e:	e7e5      	b.n	80077dc <__mdiff+0x28>
 8007810:	f102 0814 	add.w	r8, r2, #20
 8007814:	46c2      	mov	sl, r8
 8007816:	f04f 0c00 	mov.w	ip, #0
 800781a:	6927      	ldr	r7, [r4, #16]
 800781c:	60c6      	str	r6, [r0, #12]
 800781e:	692e      	ldr	r6, [r5, #16]
 8007820:	f104 0014 	add.w	r0, r4, #20
 8007824:	f105 0914 	add.w	r9, r5, #20
 8007828:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800782c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007830:	3410      	adds	r4, #16
 8007832:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007836:	f859 3b04 	ldr.w	r3, [r9], #4
 800783a:	fa1f f18b 	uxth.w	r1, fp
 800783e:	4461      	add	r1, ip
 8007840:	fa1f fc83 	uxth.w	ip, r3
 8007844:	0c1b      	lsrs	r3, r3, #16
 8007846:	eba1 010c 	sub.w	r1, r1, ip
 800784a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800784e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007852:	b289      	uxth	r1, r1
 8007854:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007858:	454e      	cmp	r6, r9
 800785a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800785e:	f84a 1b04 	str.w	r1, [sl], #4
 8007862:	d8e6      	bhi.n	8007832 <__mdiff+0x7e>
 8007864:	1b73      	subs	r3, r6, r5
 8007866:	3b15      	subs	r3, #21
 8007868:	f023 0303 	bic.w	r3, r3, #3
 800786c:	3515      	adds	r5, #21
 800786e:	3304      	adds	r3, #4
 8007870:	42ae      	cmp	r6, r5
 8007872:	bf38      	it	cc
 8007874:	2304      	movcc	r3, #4
 8007876:	4418      	add	r0, r3
 8007878:	4443      	add	r3, r8
 800787a:	461e      	mov	r6, r3
 800787c:	4605      	mov	r5, r0
 800787e:	4575      	cmp	r5, lr
 8007880:	d30e      	bcc.n	80078a0 <__mdiff+0xec>
 8007882:	f10e 0103 	add.w	r1, lr, #3
 8007886:	1a09      	subs	r1, r1, r0
 8007888:	f021 0103 	bic.w	r1, r1, #3
 800788c:	3803      	subs	r0, #3
 800788e:	4586      	cmp	lr, r0
 8007890:	bf38      	it	cc
 8007892:	2100      	movcc	r1, #0
 8007894:	440b      	add	r3, r1
 8007896:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800789a:	b189      	cbz	r1, 80078c0 <__mdiff+0x10c>
 800789c:	6117      	str	r7, [r2, #16]
 800789e:	e7a3      	b.n	80077e8 <__mdiff+0x34>
 80078a0:	f855 8b04 	ldr.w	r8, [r5], #4
 80078a4:	fa1f f188 	uxth.w	r1, r8
 80078a8:	4461      	add	r1, ip
 80078aa:	140c      	asrs	r4, r1, #16
 80078ac:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80078b0:	b289      	uxth	r1, r1
 80078b2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80078b6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80078ba:	f846 1b04 	str.w	r1, [r6], #4
 80078be:	e7de      	b.n	800787e <__mdiff+0xca>
 80078c0:	3f01      	subs	r7, #1
 80078c2:	e7e8      	b.n	8007896 <__mdiff+0xe2>
 80078c4:	080090f2 	.word	0x080090f2
 80078c8:	08009103 	.word	0x08009103

080078cc <__d2b>:
 80078cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078ce:	2101      	movs	r1, #1
 80078d0:	4617      	mov	r7, r2
 80078d2:	461c      	mov	r4, r3
 80078d4:	9e08      	ldr	r6, [sp, #32]
 80078d6:	f7ff fcd7 	bl	8007288 <_Balloc>
 80078da:	4605      	mov	r5, r0
 80078dc:	b930      	cbnz	r0, 80078ec <__d2b+0x20>
 80078de:	4602      	mov	r2, r0
 80078e0:	f240 310f 	movw	r1, #783	; 0x30f
 80078e4:	4b22      	ldr	r3, [pc, #136]	; (8007970 <__d2b+0xa4>)
 80078e6:	4823      	ldr	r0, [pc, #140]	; (8007974 <__d2b+0xa8>)
 80078e8:	f000 fa72 	bl	8007dd0 <__assert_func>
 80078ec:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80078f0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80078f4:	bb24      	cbnz	r4, 8007940 <__d2b+0x74>
 80078f6:	2f00      	cmp	r7, #0
 80078f8:	9301      	str	r3, [sp, #4]
 80078fa:	d026      	beq.n	800794a <__d2b+0x7e>
 80078fc:	4668      	mov	r0, sp
 80078fe:	9700      	str	r7, [sp, #0]
 8007900:	f7ff fd8a 	bl	8007418 <__lo0bits>
 8007904:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007908:	b1e8      	cbz	r0, 8007946 <__d2b+0x7a>
 800790a:	f1c0 0320 	rsb	r3, r0, #32
 800790e:	fa02 f303 	lsl.w	r3, r2, r3
 8007912:	430b      	orrs	r3, r1
 8007914:	40c2      	lsrs	r2, r0
 8007916:	616b      	str	r3, [r5, #20]
 8007918:	9201      	str	r2, [sp, #4]
 800791a:	9b01      	ldr	r3, [sp, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	bf14      	ite	ne
 8007920:	2102      	movne	r1, #2
 8007922:	2101      	moveq	r1, #1
 8007924:	61ab      	str	r3, [r5, #24]
 8007926:	6129      	str	r1, [r5, #16]
 8007928:	b1bc      	cbz	r4, 800795a <__d2b+0x8e>
 800792a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800792e:	4404      	add	r4, r0
 8007930:	6034      	str	r4, [r6, #0]
 8007932:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007938:	6018      	str	r0, [r3, #0]
 800793a:	4628      	mov	r0, r5
 800793c:	b003      	add	sp, #12
 800793e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007940:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007944:	e7d7      	b.n	80078f6 <__d2b+0x2a>
 8007946:	6169      	str	r1, [r5, #20]
 8007948:	e7e7      	b.n	800791a <__d2b+0x4e>
 800794a:	a801      	add	r0, sp, #4
 800794c:	f7ff fd64 	bl	8007418 <__lo0bits>
 8007950:	9b01      	ldr	r3, [sp, #4]
 8007952:	2101      	movs	r1, #1
 8007954:	616b      	str	r3, [r5, #20]
 8007956:	3020      	adds	r0, #32
 8007958:	e7e5      	b.n	8007926 <__d2b+0x5a>
 800795a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800795e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007962:	6030      	str	r0, [r6, #0]
 8007964:	6918      	ldr	r0, [r3, #16]
 8007966:	f7ff fd37 	bl	80073d8 <__hi0bits>
 800796a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800796e:	e7e2      	b.n	8007936 <__d2b+0x6a>
 8007970:	080090f2 	.word	0x080090f2
 8007974:	08009103 	.word	0x08009103

08007978 <__ssputs_r>:
 8007978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800797c:	461f      	mov	r7, r3
 800797e:	688e      	ldr	r6, [r1, #8]
 8007980:	4682      	mov	sl, r0
 8007982:	42be      	cmp	r6, r7
 8007984:	460c      	mov	r4, r1
 8007986:	4690      	mov	r8, r2
 8007988:	680b      	ldr	r3, [r1, #0]
 800798a:	d82c      	bhi.n	80079e6 <__ssputs_r+0x6e>
 800798c:	898a      	ldrh	r2, [r1, #12]
 800798e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007992:	d026      	beq.n	80079e2 <__ssputs_r+0x6a>
 8007994:	6965      	ldr	r5, [r4, #20]
 8007996:	6909      	ldr	r1, [r1, #16]
 8007998:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800799c:	eba3 0901 	sub.w	r9, r3, r1
 80079a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079a4:	1c7b      	adds	r3, r7, #1
 80079a6:	444b      	add	r3, r9
 80079a8:	106d      	asrs	r5, r5, #1
 80079aa:	429d      	cmp	r5, r3
 80079ac:	bf38      	it	cc
 80079ae:	461d      	movcc	r5, r3
 80079b0:	0553      	lsls	r3, r2, #21
 80079b2:	d527      	bpl.n	8007a04 <__ssputs_r+0x8c>
 80079b4:	4629      	mov	r1, r5
 80079b6:	f7ff fbdb 	bl	8007170 <_malloc_r>
 80079ba:	4606      	mov	r6, r0
 80079bc:	b360      	cbz	r0, 8007a18 <__ssputs_r+0xa0>
 80079be:	464a      	mov	r2, r9
 80079c0:	6921      	ldr	r1, [r4, #16]
 80079c2:	f7fe fce8 	bl	8006396 <memcpy>
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d0:	81a3      	strh	r3, [r4, #12]
 80079d2:	6126      	str	r6, [r4, #16]
 80079d4:	444e      	add	r6, r9
 80079d6:	6026      	str	r6, [r4, #0]
 80079d8:	463e      	mov	r6, r7
 80079da:	6165      	str	r5, [r4, #20]
 80079dc:	eba5 0509 	sub.w	r5, r5, r9
 80079e0:	60a5      	str	r5, [r4, #8]
 80079e2:	42be      	cmp	r6, r7
 80079e4:	d900      	bls.n	80079e8 <__ssputs_r+0x70>
 80079e6:	463e      	mov	r6, r7
 80079e8:	4632      	mov	r2, r6
 80079ea:	4641      	mov	r1, r8
 80079ec:	6820      	ldr	r0, [r4, #0]
 80079ee:	f000 f9c5 	bl	8007d7c <memmove>
 80079f2:	2000      	movs	r0, #0
 80079f4:	68a3      	ldr	r3, [r4, #8]
 80079f6:	1b9b      	subs	r3, r3, r6
 80079f8:	60a3      	str	r3, [r4, #8]
 80079fa:	6823      	ldr	r3, [r4, #0]
 80079fc:	4433      	add	r3, r6
 80079fe:	6023      	str	r3, [r4, #0]
 8007a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a04:	462a      	mov	r2, r5
 8007a06:	f000 fa27 	bl	8007e58 <_realloc_r>
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	d1e0      	bne.n	80079d2 <__ssputs_r+0x5a>
 8007a10:	4650      	mov	r0, sl
 8007a12:	6921      	ldr	r1, [r4, #16]
 8007a14:	f7ff fb3c 	bl	8007090 <_free_r>
 8007a18:	230c      	movs	r3, #12
 8007a1a:	f8ca 3000 	str.w	r3, [sl]
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	f04f 30ff 	mov.w	r0, #4294967295
 8007a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a28:	81a3      	strh	r3, [r4, #12]
 8007a2a:	e7e9      	b.n	8007a00 <__ssputs_r+0x88>

08007a2c <_svfiprintf_r>:
 8007a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a30:	4698      	mov	r8, r3
 8007a32:	898b      	ldrh	r3, [r1, #12]
 8007a34:	4607      	mov	r7, r0
 8007a36:	061b      	lsls	r3, r3, #24
 8007a38:	460d      	mov	r5, r1
 8007a3a:	4614      	mov	r4, r2
 8007a3c:	b09d      	sub	sp, #116	; 0x74
 8007a3e:	d50e      	bpl.n	8007a5e <_svfiprintf_r+0x32>
 8007a40:	690b      	ldr	r3, [r1, #16]
 8007a42:	b963      	cbnz	r3, 8007a5e <_svfiprintf_r+0x32>
 8007a44:	2140      	movs	r1, #64	; 0x40
 8007a46:	f7ff fb93 	bl	8007170 <_malloc_r>
 8007a4a:	6028      	str	r0, [r5, #0]
 8007a4c:	6128      	str	r0, [r5, #16]
 8007a4e:	b920      	cbnz	r0, 8007a5a <_svfiprintf_r+0x2e>
 8007a50:	230c      	movs	r3, #12
 8007a52:	603b      	str	r3, [r7, #0]
 8007a54:	f04f 30ff 	mov.w	r0, #4294967295
 8007a58:	e0d0      	b.n	8007bfc <_svfiprintf_r+0x1d0>
 8007a5a:	2340      	movs	r3, #64	; 0x40
 8007a5c:	616b      	str	r3, [r5, #20]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	9309      	str	r3, [sp, #36]	; 0x24
 8007a62:	2320      	movs	r3, #32
 8007a64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a68:	2330      	movs	r3, #48	; 0x30
 8007a6a:	f04f 0901 	mov.w	r9, #1
 8007a6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a72:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007c14 <_svfiprintf_r+0x1e8>
 8007a76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a7a:	4623      	mov	r3, r4
 8007a7c:	469a      	mov	sl, r3
 8007a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a82:	b10a      	cbz	r2, 8007a88 <_svfiprintf_r+0x5c>
 8007a84:	2a25      	cmp	r2, #37	; 0x25
 8007a86:	d1f9      	bne.n	8007a7c <_svfiprintf_r+0x50>
 8007a88:	ebba 0b04 	subs.w	fp, sl, r4
 8007a8c:	d00b      	beq.n	8007aa6 <_svfiprintf_r+0x7a>
 8007a8e:	465b      	mov	r3, fp
 8007a90:	4622      	mov	r2, r4
 8007a92:	4629      	mov	r1, r5
 8007a94:	4638      	mov	r0, r7
 8007a96:	f7ff ff6f 	bl	8007978 <__ssputs_r>
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	f000 80a9 	beq.w	8007bf2 <_svfiprintf_r+0x1c6>
 8007aa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aa2:	445a      	add	r2, fp
 8007aa4:	9209      	str	r2, [sp, #36]	; 0x24
 8007aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 80a1 	beq.w	8007bf2 <_svfiprintf_r+0x1c6>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007aba:	f10a 0a01 	add.w	sl, sl, #1
 8007abe:	9304      	str	r3, [sp, #16]
 8007ac0:	9307      	str	r3, [sp, #28]
 8007ac2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ac6:	931a      	str	r3, [sp, #104]	; 0x68
 8007ac8:	4654      	mov	r4, sl
 8007aca:	2205      	movs	r2, #5
 8007acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad0:	4850      	ldr	r0, [pc, #320]	; (8007c14 <_svfiprintf_r+0x1e8>)
 8007ad2:	f7fe fc52 	bl	800637a <memchr>
 8007ad6:	9a04      	ldr	r2, [sp, #16]
 8007ad8:	b9d8      	cbnz	r0, 8007b12 <_svfiprintf_r+0xe6>
 8007ada:	06d0      	lsls	r0, r2, #27
 8007adc:	bf44      	itt	mi
 8007ade:	2320      	movmi	r3, #32
 8007ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ae4:	0711      	lsls	r1, r2, #28
 8007ae6:	bf44      	itt	mi
 8007ae8:	232b      	movmi	r3, #43	; 0x2b
 8007aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aee:	f89a 3000 	ldrb.w	r3, [sl]
 8007af2:	2b2a      	cmp	r3, #42	; 0x2a
 8007af4:	d015      	beq.n	8007b22 <_svfiprintf_r+0xf6>
 8007af6:	4654      	mov	r4, sl
 8007af8:	2000      	movs	r0, #0
 8007afa:	f04f 0c0a 	mov.w	ip, #10
 8007afe:	9a07      	ldr	r2, [sp, #28]
 8007b00:	4621      	mov	r1, r4
 8007b02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b06:	3b30      	subs	r3, #48	; 0x30
 8007b08:	2b09      	cmp	r3, #9
 8007b0a:	d94d      	bls.n	8007ba8 <_svfiprintf_r+0x17c>
 8007b0c:	b1b0      	cbz	r0, 8007b3c <_svfiprintf_r+0x110>
 8007b0e:	9207      	str	r2, [sp, #28]
 8007b10:	e014      	b.n	8007b3c <_svfiprintf_r+0x110>
 8007b12:	eba0 0308 	sub.w	r3, r0, r8
 8007b16:	fa09 f303 	lsl.w	r3, r9, r3
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	46a2      	mov	sl, r4
 8007b1e:	9304      	str	r3, [sp, #16]
 8007b20:	e7d2      	b.n	8007ac8 <_svfiprintf_r+0x9c>
 8007b22:	9b03      	ldr	r3, [sp, #12]
 8007b24:	1d19      	adds	r1, r3, #4
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	9103      	str	r1, [sp, #12]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	bfbb      	ittet	lt
 8007b2e:	425b      	neglt	r3, r3
 8007b30:	f042 0202 	orrlt.w	r2, r2, #2
 8007b34:	9307      	strge	r3, [sp, #28]
 8007b36:	9307      	strlt	r3, [sp, #28]
 8007b38:	bfb8      	it	lt
 8007b3a:	9204      	strlt	r2, [sp, #16]
 8007b3c:	7823      	ldrb	r3, [r4, #0]
 8007b3e:	2b2e      	cmp	r3, #46	; 0x2e
 8007b40:	d10c      	bne.n	8007b5c <_svfiprintf_r+0x130>
 8007b42:	7863      	ldrb	r3, [r4, #1]
 8007b44:	2b2a      	cmp	r3, #42	; 0x2a
 8007b46:	d134      	bne.n	8007bb2 <_svfiprintf_r+0x186>
 8007b48:	9b03      	ldr	r3, [sp, #12]
 8007b4a:	3402      	adds	r4, #2
 8007b4c:	1d1a      	adds	r2, r3, #4
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	9203      	str	r2, [sp, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	bfb8      	it	lt
 8007b56:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b5a:	9305      	str	r3, [sp, #20]
 8007b5c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007c18 <_svfiprintf_r+0x1ec>
 8007b60:	2203      	movs	r2, #3
 8007b62:	4650      	mov	r0, sl
 8007b64:	7821      	ldrb	r1, [r4, #0]
 8007b66:	f7fe fc08 	bl	800637a <memchr>
 8007b6a:	b138      	cbz	r0, 8007b7c <_svfiprintf_r+0x150>
 8007b6c:	2240      	movs	r2, #64	; 0x40
 8007b6e:	9b04      	ldr	r3, [sp, #16]
 8007b70:	eba0 000a 	sub.w	r0, r0, sl
 8007b74:	4082      	lsls	r2, r0
 8007b76:	4313      	orrs	r3, r2
 8007b78:	3401      	adds	r4, #1
 8007b7a:	9304      	str	r3, [sp, #16]
 8007b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b80:	2206      	movs	r2, #6
 8007b82:	4826      	ldr	r0, [pc, #152]	; (8007c1c <_svfiprintf_r+0x1f0>)
 8007b84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b88:	f7fe fbf7 	bl	800637a <memchr>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d038      	beq.n	8007c02 <_svfiprintf_r+0x1d6>
 8007b90:	4b23      	ldr	r3, [pc, #140]	; (8007c20 <_svfiprintf_r+0x1f4>)
 8007b92:	bb1b      	cbnz	r3, 8007bdc <_svfiprintf_r+0x1b0>
 8007b94:	9b03      	ldr	r3, [sp, #12]
 8007b96:	3307      	adds	r3, #7
 8007b98:	f023 0307 	bic.w	r3, r3, #7
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	9303      	str	r3, [sp, #12]
 8007ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba2:	4433      	add	r3, r6
 8007ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ba6:	e768      	b.n	8007a7a <_svfiprintf_r+0x4e>
 8007ba8:	460c      	mov	r4, r1
 8007baa:	2001      	movs	r0, #1
 8007bac:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bb0:	e7a6      	b.n	8007b00 <_svfiprintf_r+0xd4>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f04f 0c0a 	mov.w	ip, #10
 8007bb8:	4619      	mov	r1, r3
 8007bba:	3401      	adds	r4, #1
 8007bbc:	9305      	str	r3, [sp, #20]
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bc4:	3a30      	subs	r2, #48	; 0x30
 8007bc6:	2a09      	cmp	r2, #9
 8007bc8:	d903      	bls.n	8007bd2 <_svfiprintf_r+0x1a6>
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0c6      	beq.n	8007b5c <_svfiprintf_r+0x130>
 8007bce:	9105      	str	r1, [sp, #20]
 8007bd0:	e7c4      	b.n	8007b5c <_svfiprintf_r+0x130>
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bda:	e7f0      	b.n	8007bbe <_svfiprintf_r+0x192>
 8007bdc:	ab03      	add	r3, sp, #12
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	462a      	mov	r2, r5
 8007be2:	4638      	mov	r0, r7
 8007be4:	4b0f      	ldr	r3, [pc, #60]	; (8007c24 <_svfiprintf_r+0x1f8>)
 8007be6:	a904      	add	r1, sp, #16
 8007be8:	f7fd fe60 	bl	80058ac <_printf_float>
 8007bec:	1c42      	adds	r2, r0, #1
 8007bee:	4606      	mov	r6, r0
 8007bf0:	d1d6      	bne.n	8007ba0 <_svfiprintf_r+0x174>
 8007bf2:	89ab      	ldrh	r3, [r5, #12]
 8007bf4:	065b      	lsls	r3, r3, #25
 8007bf6:	f53f af2d 	bmi.w	8007a54 <_svfiprintf_r+0x28>
 8007bfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bfc:	b01d      	add	sp, #116	; 0x74
 8007bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c02:	ab03      	add	r3, sp, #12
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	462a      	mov	r2, r5
 8007c08:	4638      	mov	r0, r7
 8007c0a:	4b06      	ldr	r3, [pc, #24]	; (8007c24 <_svfiprintf_r+0x1f8>)
 8007c0c:	a904      	add	r1, sp, #16
 8007c0e:	f7fe f8ed 	bl	8005dec <_printf_i>
 8007c12:	e7eb      	b.n	8007bec <_svfiprintf_r+0x1c0>
 8007c14:	0800925c 	.word	0x0800925c
 8007c18:	08009262 	.word	0x08009262
 8007c1c:	08009266 	.word	0x08009266
 8007c20:	080058ad 	.word	0x080058ad
 8007c24:	08007979 	.word	0x08007979

08007c28 <__sflush_r>:
 8007c28:	898a      	ldrh	r2, [r1, #12]
 8007c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2c:	4605      	mov	r5, r0
 8007c2e:	0710      	lsls	r0, r2, #28
 8007c30:	460c      	mov	r4, r1
 8007c32:	d457      	bmi.n	8007ce4 <__sflush_r+0xbc>
 8007c34:	684b      	ldr	r3, [r1, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	dc04      	bgt.n	8007c44 <__sflush_r+0x1c>
 8007c3a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	dc01      	bgt.n	8007c44 <__sflush_r+0x1c>
 8007c40:	2000      	movs	r0, #0
 8007c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c46:	2e00      	cmp	r6, #0
 8007c48:	d0fa      	beq.n	8007c40 <__sflush_r+0x18>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c50:	682f      	ldr	r7, [r5, #0]
 8007c52:	6a21      	ldr	r1, [r4, #32]
 8007c54:	602b      	str	r3, [r5, #0]
 8007c56:	d032      	beq.n	8007cbe <__sflush_r+0x96>
 8007c58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	075a      	lsls	r2, r3, #29
 8007c5e:	d505      	bpl.n	8007c6c <__sflush_r+0x44>
 8007c60:	6863      	ldr	r3, [r4, #4]
 8007c62:	1ac0      	subs	r0, r0, r3
 8007c64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c66:	b10b      	cbz	r3, 8007c6c <__sflush_r+0x44>
 8007c68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c6a:	1ac0      	subs	r0, r0, r3
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	4602      	mov	r2, r0
 8007c70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c72:	4628      	mov	r0, r5
 8007c74:	6a21      	ldr	r1, [r4, #32]
 8007c76:	47b0      	blx	r6
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	d106      	bne.n	8007c8c <__sflush_r+0x64>
 8007c7e:	6829      	ldr	r1, [r5, #0]
 8007c80:	291d      	cmp	r1, #29
 8007c82:	d82b      	bhi.n	8007cdc <__sflush_r+0xb4>
 8007c84:	4a28      	ldr	r2, [pc, #160]	; (8007d28 <__sflush_r+0x100>)
 8007c86:	410a      	asrs	r2, r1
 8007c88:	07d6      	lsls	r6, r2, #31
 8007c8a:	d427      	bmi.n	8007cdc <__sflush_r+0xb4>
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	6062      	str	r2, [r4, #4]
 8007c90:	6922      	ldr	r2, [r4, #16]
 8007c92:	04d9      	lsls	r1, r3, #19
 8007c94:	6022      	str	r2, [r4, #0]
 8007c96:	d504      	bpl.n	8007ca2 <__sflush_r+0x7a>
 8007c98:	1c42      	adds	r2, r0, #1
 8007c9a:	d101      	bne.n	8007ca0 <__sflush_r+0x78>
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	b903      	cbnz	r3, 8007ca2 <__sflush_r+0x7a>
 8007ca0:	6560      	str	r0, [r4, #84]	; 0x54
 8007ca2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ca4:	602f      	str	r7, [r5, #0]
 8007ca6:	2900      	cmp	r1, #0
 8007ca8:	d0ca      	beq.n	8007c40 <__sflush_r+0x18>
 8007caa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cae:	4299      	cmp	r1, r3
 8007cb0:	d002      	beq.n	8007cb8 <__sflush_r+0x90>
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f7ff f9ec 	bl	8007090 <_free_r>
 8007cb8:	2000      	movs	r0, #0
 8007cba:	6360      	str	r0, [r4, #52]	; 0x34
 8007cbc:	e7c1      	b.n	8007c42 <__sflush_r+0x1a>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	47b0      	blx	r6
 8007cc4:	1c41      	adds	r1, r0, #1
 8007cc6:	d1c8      	bne.n	8007c5a <__sflush_r+0x32>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d0c5      	beq.n	8007c5a <__sflush_r+0x32>
 8007cce:	2b1d      	cmp	r3, #29
 8007cd0:	d001      	beq.n	8007cd6 <__sflush_r+0xae>
 8007cd2:	2b16      	cmp	r3, #22
 8007cd4:	d101      	bne.n	8007cda <__sflush_r+0xb2>
 8007cd6:	602f      	str	r7, [r5, #0]
 8007cd8:	e7b2      	b.n	8007c40 <__sflush_r+0x18>
 8007cda:	89a3      	ldrh	r3, [r4, #12]
 8007cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ce0:	81a3      	strh	r3, [r4, #12]
 8007ce2:	e7ae      	b.n	8007c42 <__sflush_r+0x1a>
 8007ce4:	690f      	ldr	r7, [r1, #16]
 8007ce6:	2f00      	cmp	r7, #0
 8007ce8:	d0aa      	beq.n	8007c40 <__sflush_r+0x18>
 8007cea:	0793      	lsls	r3, r2, #30
 8007cec:	bf18      	it	ne
 8007cee:	2300      	movne	r3, #0
 8007cf0:	680e      	ldr	r6, [r1, #0]
 8007cf2:	bf08      	it	eq
 8007cf4:	694b      	ldreq	r3, [r1, #20]
 8007cf6:	1bf6      	subs	r6, r6, r7
 8007cf8:	600f      	str	r7, [r1, #0]
 8007cfa:	608b      	str	r3, [r1, #8]
 8007cfc:	2e00      	cmp	r6, #0
 8007cfe:	dd9f      	ble.n	8007c40 <__sflush_r+0x18>
 8007d00:	4633      	mov	r3, r6
 8007d02:	463a      	mov	r2, r7
 8007d04:	4628      	mov	r0, r5
 8007d06:	6a21      	ldr	r1, [r4, #32]
 8007d08:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007d0c:	47e0      	blx	ip
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	dc06      	bgt.n	8007d20 <__sflush_r+0xf8>
 8007d12:	89a3      	ldrh	r3, [r4, #12]
 8007d14:	f04f 30ff 	mov.w	r0, #4294967295
 8007d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d1c:	81a3      	strh	r3, [r4, #12]
 8007d1e:	e790      	b.n	8007c42 <__sflush_r+0x1a>
 8007d20:	4407      	add	r7, r0
 8007d22:	1a36      	subs	r6, r6, r0
 8007d24:	e7ea      	b.n	8007cfc <__sflush_r+0xd4>
 8007d26:	bf00      	nop
 8007d28:	dfbffffe 	.word	0xdfbffffe

08007d2c <_fflush_r>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	690b      	ldr	r3, [r1, #16]
 8007d30:	4605      	mov	r5, r0
 8007d32:	460c      	mov	r4, r1
 8007d34:	b913      	cbnz	r3, 8007d3c <_fflush_r+0x10>
 8007d36:	2500      	movs	r5, #0
 8007d38:	4628      	mov	r0, r5
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	b118      	cbz	r0, 8007d46 <_fflush_r+0x1a>
 8007d3e:	6a03      	ldr	r3, [r0, #32]
 8007d40:	b90b      	cbnz	r3, 8007d46 <_fflush_r+0x1a>
 8007d42:	f7fe fa01 	bl	8006148 <__sinit>
 8007d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0f3      	beq.n	8007d36 <_fflush_r+0xa>
 8007d4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d50:	07d0      	lsls	r0, r2, #31
 8007d52:	d404      	bmi.n	8007d5e <_fflush_r+0x32>
 8007d54:	0599      	lsls	r1, r3, #22
 8007d56:	d402      	bmi.n	8007d5e <_fflush_r+0x32>
 8007d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d5a:	f7fe fb0c 	bl	8006376 <__retarget_lock_acquire_recursive>
 8007d5e:	4628      	mov	r0, r5
 8007d60:	4621      	mov	r1, r4
 8007d62:	f7ff ff61 	bl	8007c28 <__sflush_r>
 8007d66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d68:	4605      	mov	r5, r0
 8007d6a:	07da      	lsls	r2, r3, #31
 8007d6c:	d4e4      	bmi.n	8007d38 <_fflush_r+0xc>
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	059b      	lsls	r3, r3, #22
 8007d72:	d4e1      	bmi.n	8007d38 <_fflush_r+0xc>
 8007d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d76:	f7fe faff 	bl	8006378 <__retarget_lock_release_recursive>
 8007d7a:	e7dd      	b.n	8007d38 <_fflush_r+0xc>

08007d7c <memmove>:
 8007d7c:	4288      	cmp	r0, r1
 8007d7e:	b510      	push	{r4, lr}
 8007d80:	eb01 0402 	add.w	r4, r1, r2
 8007d84:	d902      	bls.n	8007d8c <memmove+0x10>
 8007d86:	4284      	cmp	r4, r0
 8007d88:	4623      	mov	r3, r4
 8007d8a:	d807      	bhi.n	8007d9c <memmove+0x20>
 8007d8c:	1e43      	subs	r3, r0, #1
 8007d8e:	42a1      	cmp	r1, r4
 8007d90:	d008      	beq.n	8007da4 <memmove+0x28>
 8007d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d9a:	e7f8      	b.n	8007d8e <memmove+0x12>
 8007d9c:	4601      	mov	r1, r0
 8007d9e:	4402      	add	r2, r0
 8007da0:	428a      	cmp	r2, r1
 8007da2:	d100      	bne.n	8007da6 <memmove+0x2a>
 8007da4:	bd10      	pop	{r4, pc}
 8007da6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007daa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dae:	e7f7      	b.n	8007da0 <memmove+0x24>

08007db0 <_sbrk_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	2300      	movs	r3, #0
 8007db4:	4d05      	ldr	r5, [pc, #20]	; (8007dcc <_sbrk_r+0x1c>)
 8007db6:	4604      	mov	r4, r0
 8007db8:	4608      	mov	r0, r1
 8007dba:	602b      	str	r3, [r5, #0]
 8007dbc:	f7fb f8ea 	bl	8002f94 <_sbrk>
 8007dc0:	1c43      	adds	r3, r0, #1
 8007dc2:	d102      	bne.n	8007dca <_sbrk_r+0x1a>
 8007dc4:	682b      	ldr	r3, [r5, #0]
 8007dc6:	b103      	cbz	r3, 8007dca <_sbrk_r+0x1a>
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	bd38      	pop	{r3, r4, r5, pc}
 8007dcc:	20000798 	.word	0x20000798

08007dd0 <__assert_func>:
 8007dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dd2:	4614      	mov	r4, r2
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	4b09      	ldr	r3, [pc, #36]	; (8007dfc <__assert_func+0x2c>)
 8007dd8:	4605      	mov	r5, r0
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68d8      	ldr	r0, [r3, #12]
 8007dde:	b14c      	cbz	r4, 8007df4 <__assert_func+0x24>
 8007de0:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <__assert_func+0x30>)
 8007de2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007de6:	9100      	str	r1, [sp, #0]
 8007de8:	462b      	mov	r3, r5
 8007dea:	4906      	ldr	r1, [pc, #24]	; (8007e04 <__assert_func+0x34>)
 8007dec:	f000 f870 	bl	8007ed0 <fiprintf>
 8007df0:	f000 f880 	bl	8007ef4 <abort>
 8007df4:	4b04      	ldr	r3, [pc, #16]	; (8007e08 <__assert_func+0x38>)
 8007df6:	461c      	mov	r4, r3
 8007df8:	e7f3      	b.n	8007de2 <__assert_func+0x12>
 8007dfa:	bf00      	nop
 8007dfc:	2000006c 	.word	0x2000006c
 8007e00:	08009277 	.word	0x08009277
 8007e04:	08009284 	.word	0x08009284
 8007e08:	080092b2 	.word	0x080092b2

08007e0c <_calloc_r>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	fba1 5402 	umull	r5, r4, r1, r2
 8007e12:	b934      	cbnz	r4, 8007e22 <_calloc_r+0x16>
 8007e14:	4629      	mov	r1, r5
 8007e16:	f7ff f9ab 	bl	8007170 <_malloc_r>
 8007e1a:	4606      	mov	r6, r0
 8007e1c:	b928      	cbnz	r0, 8007e2a <_calloc_r+0x1e>
 8007e1e:	4630      	mov	r0, r6
 8007e20:	bd70      	pop	{r4, r5, r6, pc}
 8007e22:	220c      	movs	r2, #12
 8007e24:	2600      	movs	r6, #0
 8007e26:	6002      	str	r2, [r0, #0]
 8007e28:	e7f9      	b.n	8007e1e <_calloc_r+0x12>
 8007e2a:	462a      	mov	r2, r5
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	f7fe fa24 	bl	800627a <memset>
 8007e32:	e7f4      	b.n	8007e1e <_calloc_r+0x12>

08007e34 <__ascii_mbtowc>:
 8007e34:	b082      	sub	sp, #8
 8007e36:	b901      	cbnz	r1, 8007e3a <__ascii_mbtowc+0x6>
 8007e38:	a901      	add	r1, sp, #4
 8007e3a:	b142      	cbz	r2, 8007e4e <__ascii_mbtowc+0x1a>
 8007e3c:	b14b      	cbz	r3, 8007e52 <__ascii_mbtowc+0x1e>
 8007e3e:	7813      	ldrb	r3, [r2, #0]
 8007e40:	600b      	str	r3, [r1, #0]
 8007e42:	7812      	ldrb	r2, [r2, #0]
 8007e44:	1e10      	subs	r0, r2, #0
 8007e46:	bf18      	it	ne
 8007e48:	2001      	movne	r0, #1
 8007e4a:	b002      	add	sp, #8
 8007e4c:	4770      	bx	lr
 8007e4e:	4610      	mov	r0, r2
 8007e50:	e7fb      	b.n	8007e4a <__ascii_mbtowc+0x16>
 8007e52:	f06f 0001 	mvn.w	r0, #1
 8007e56:	e7f8      	b.n	8007e4a <__ascii_mbtowc+0x16>

08007e58 <_realloc_r>:
 8007e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5c:	4680      	mov	r8, r0
 8007e5e:	4614      	mov	r4, r2
 8007e60:	460e      	mov	r6, r1
 8007e62:	b921      	cbnz	r1, 8007e6e <_realloc_r+0x16>
 8007e64:	4611      	mov	r1, r2
 8007e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6a:	f7ff b981 	b.w	8007170 <_malloc_r>
 8007e6e:	b92a      	cbnz	r2, 8007e7c <_realloc_r+0x24>
 8007e70:	f7ff f90e 	bl	8007090 <_free_r>
 8007e74:	4625      	mov	r5, r4
 8007e76:	4628      	mov	r0, r5
 8007e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e7c:	f000 f841 	bl	8007f02 <_malloc_usable_size_r>
 8007e80:	4284      	cmp	r4, r0
 8007e82:	4607      	mov	r7, r0
 8007e84:	d802      	bhi.n	8007e8c <_realloc_r+0x34>
 8007e86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e8a:	d812      	bhi.n	8007eb2 <_realloc_r+0x5a>
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	4640      	mov	r0, r8
 8007e90:	f7ff f96e 	bl	8007170 <_malloc_r>
 8007e94:	4605      	mov	r5, r0
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d0ed      	beq.n	8007e76 <_realloc_r+0x1e>
 8007e9a:	42bc      	cmp	r4, r7
 8007e9c:	4622      	mov	r2, r4
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	bf28      	it	cs
 8007ea2:	463a      	movcs	r2, r7
 8007ea4:	f7fe fa77 	bl	8006396 <memcpy>
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	4640      	mov	r0, r8
 8007eac:	f7ff f8f0 	bl	8007090 <_free_r>
 8007eb0:	e7e1      	b.n	8007e76 <_realloc_r+0x1e>
 8007eb2:	4635      	mov	r5, r6
 8007eb4:	e7df      	b.n	8007e76 <_realloc_r+0x1e>

08007eb6 <__ascii_wctomb>:
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	4608      	mov	r0, r1
 8007eba:	b141      	cbz	r1, 8007ece <__ascii_wctomb+0x18>
 8007ebc:	2aff      	cmp	r2, #255	; 0xff
 8007ebe:	d904      	bls.n	8007eca <__ascii_wctomb+0x14>
 8007ec0:	228a      	movs	r2, #138	; 0x8a
 8007ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec6:	601a      	str	r2, [r3, #0]
 8007ec8:	4770      	bx	lr
 8007eca:	2001      	movs	r0, #1
 8007ecc:	700a      	strb	r2, [r1, #0]
 8007ece:	4770      	bx	lr

08007ed0 <fiprintf>:
 8007ed0:	b40e      	push	{r1, r2, r3}
 8007ed2:	b503      	push	{r0, r1, lr}
 8007ed4:	4601      	mov	r1, r0
 8007ed6:	ab03      	add	r3, sp, #12
 8007ed8:	4805      	ldr	r0, [pc, #20]	; (8007ef0 <fiprintf+0x20>)
 8007eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ede:	6800      	ldr	r0, [r0, #0]
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	f000 f83d 	bl	8007f60 <_vfiprintf_r>
 8007ee6:	b002      	add	sp, #8
 8007ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007eec:	b003      	add	sp, #12
 8007eee:	4770      	bx	lr
 8007ef0:	2000006c 	.word	0x2000006c

08007ef4 <abort>:
 8007ef4:	2006      	movs	r0, #6
 8007ef6:	b508      	push	{r3, lr}
 8007ef8:	f000 fa0a 	bl	8008310 <raise>
 8007efc:	2001      	movs	r0, #1
 8007efe:	f7fa ffd6 	bl	8002eae <_exit>

08007f02 <_malloc_usable_size_r>:
 8007f02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f06:	1f18      	subs	r0, r3, #4
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bfbc      	itt	lt
 8007f0c:	580b      	ldrlt	r3, [r1, r0]
 8007f0e:	18c0      	addlt	r0, r0, r3
 8007f10:	4770      	bx	lr

08007f12 <__sfputc_r>:
 8007f12:	6893      	ldr	r3, [r2, #8]
 8007f14:	b410      	push	{r4}
 8007f16:	3b01      	subs	r3, #1
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	6093      	str	r3, [r2, #8]
 8007f1c:	da07      	bge.n	8007f2e <__sfputc_r+0x1c>
 8007f1e:	6994      	ldr	r4, [r2, #24]
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	db01      	blt.n	8007f28 <__sfputc_r+0x16>
 8007f24:	290a      	cmp	r1, #10
 8007f26:	d102      	bne.n	8007f2e <__sfputc_r+0x1c>
 8007f28:	bc10      	pop	{r4}
 8007f2a:	f000 b933 	b.w	8008194 <__swbuf_r>
 8007f2e:	6813      	ldr	r3, [r2, #0]
 8007f30:	1c58      	adds	r0, r3, #1
 8007f32:	6010      	str	r0, [r2, #0]
 8007f34:	7019      	strb	r1, [r3, #0]
 8007f36:	4608      	mov	r0, r1
 8007f38:	bc10      	pop	{r4}
 8007f3a:	4770      	bx	lr

08007f3c <__sfputs_r>:
 8007f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3e:	4606      	mov	r6, r0
 8007f40:	460f      	mov	r7, r1
 8007f42:	4614      	mov	r4, r2
 8007f44:	18d5      	adds	r5, r2, r3
 8007f46:	42ac      	cmp	r4, r5
 8007f48:	d101      	bne.n	8007f4e <__sfputs_r+0x12>
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	e007      	b.n	8007f5e <__sfputs_r+0x22>
 8007f4e:	463a      	mov	r2, r7
 8007f50:	4630      	mov	r0, r6
 8007f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f56:	f7ff ffdc 	bl	8007f12 <__sfputc_r>
 8007f5a:	1c43      	adds	r3, r0, #1
 8007f5c:	d1f3      	bne.n	8007f46 <__sfputs_r+0xa>
 8007f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f60 <_vfiprintf_r>:
 8007f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f64:	460d      	mov	r5, r1
 8007f66:	4614      	mov	r4, r2
 8007f68:	4698      	mov	r8, r3
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	b09d      	sub	sp, #116	; 0x74
 8007f6e:	b118      	cbz	r0, 8007f78 <_vfiprintf_r+0x18>
 8007f70:	6a03      	ldr	r3, [r0, #32]
 8007f72:	b90b      	cbnz	r3, 8007f78 <_vfiprintf_r+0x18>
 8007f74:	f7fe f8e8 	bl	8006148 <__sinit>
 8007f78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f7a:	07d9      	lsls	r1, r3, #31
 8007f7c:	d405      	bmi.n	8007f8a <_vfiprintf_r+0x2a>
 8007f7e:	89ab      	ldrh	r3, [r5, #12]
 8007f80:	059a      	lsls	r2, r3, #22
 8007f82:	d402      	bmi.n	8007f8a <_vfiprintf_r+0x2a>
 8007f84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f86:	f7fe f9f6 	bl	8006376 <__retarget_lock_acquire_recursive>
 8007f8a:	89ab      	ldrh	r3, [r5, #12]
 8007f8c:	071b      	lsls	r3, r3, #28
 8007f8e:	d501      	bpl.n	8007f94 <_vfiprintf_r+0x34>
 8007f90:	692b      	ldr	r3, [r5, #16]
 8007f92:	b99b      	cbnz	r3, 8007fbc <_vfiprintf_r+0x5c>
 8007f94:	4629      	mov	r1, r5
 8007f96:	4630      	mov	r0, r6
 8007f98:	f000 f93a 	bl	8008210 <__swsetup_r>
 8007f9c:	b170      	cbz	r0, 8007fbc <_vfiprintf_r+0x5c>
 8007f9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fa0:	07dc      	lsls	r4, r3, #31
 8007fa2:	d504      	bpl.n	8007fae <_vfiprintf_r+0x4e>
 8007fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa8:	b01d      	add	sp, #116	; 0x74
 8007faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fae:	89ab      	ldrh	r3, [r5, #12]
 8007fb0:	0598      	lsls	r0, r3, #22
 8007fb2:	d4f7      	bmi.n	8007fa4 <_vfiprintf_r+0x44>
 8007fb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fb6:	f7fe f9df 	bl	8006378 <__retarget_lock_release_recursive>
 8007fba:	e7f3      	b.n	8007fa4 <_vfiprintf_r+0x44>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc0:	2320      	movs	r3, #32
 8007fc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fc6:	2330      	movs	r3, #48	; 0x30
 8007fc8:	f04f 0901 	mov.w	r9, #1
 8007fcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008180 <_vfiprintf_r+0x220>
 8007fd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fd8:	4623      	mov	r3, r4
 8007fda:	469a      	mov	sl, r3
 8007fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fe0:	b10a      	cbz	r2, 8007fe6 <_vfiprintf_r+0x86>
 8007fe2:	2a25      	cmp	r2, #37	; 0x25
 8007fe4:	d1f9      	bne.n	8007fda <_vfiprintf_r+0x7a>
 8007fe6:	ebba 0b04 	subs.w	fp, sl, r4
 8007fea:	d00b      	beq.n	8008004 <_vfiprintf_r+0xa4>
 8007fec:	465b      	mov	r3, fp
 8007fee:	4622      	mov	r2, r4
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	f7ff ffa2 	bl	8007f3c <__sfputs_r>
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	f000 80a9 	beq.w	8008150 <_vfiprintf_r+0x1f0>
 8007ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008000:	445a      	add	r2, fp
 8008002:	9209      	str	r2, [sp, #36]	; 0x24
 8008004:	f89a 3000 	ldrb.w	r3, [sl]
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 80a1 	beq.w	8008150 <_vfiprintf_r+0x1f0>
 800800e:	2300      	movs	r3, #0
 8008010:	f04f 32ff 	mov.w	r2, #4294967295
 8008014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008018:	f10a 0a01 	add.w	sl, sl, #1
 800801c:	9304      	str	r3, [sp, #16]
 800801e:	9307      	str	r3, [sp, #28]
 8008020:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008024:	931a      	str	r3, [sp, #104]	; 0x68
 8008026:	4654      	mov	r4, sl
 8008028:	2205      	movs	r2, #5
 800802a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800802e:	4854      	ldr	r0, [pc, #336]	; (8008180 <_vfiprintf_r+0x220>)
 8008030:	f7fe f9a3 	bl	800637a <memchr>
 8008034:	9a04      	ldr	r2, [sp, #16]
 8008036:	b9d8      	cbnz	r0, 8008070 <_vfiprintf_r+0x110>
 8008038:	06d1      	lsls	r1, r2, #27
 800803a:	bf44      	itt	mi
 800803c:	2320      	movmi	r3, #32
 800803e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008042:	0713      	lsls	r3, r2, #28
 8008044:	bf44      	itt	mi
 8008046:	232b      	movmi	r3, #43	; 0x2b
 8008048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800804c:	f89a 3000 	ldrb.w	r3, [sl]
 8008050:	2b2a      	cmp	r3, #42	; 0x2a
 8008052:	d015      	beq.n	8008080 <_vfiprintf_r+0x120>
 8008054:	4654      	mov	r4, sl
 8008056:	2000      	movs	r0, #0
 8008058:	f04f 0c0a 	mov.w	ip, #10
 800805c:	9a07      	ldr	r2, [sp, #28]
 800805e:	4621      	mov	r1, r4
 8008060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008064:	3b30      	subs	r3, #48	; 0x30
 8008066:	2b09      	cmp	r3, #9
 8008068:	d94d      	bls.n	8008106 <_vfiprintf_r+0x1a6>
 800806a:	b1b0      	cbz	r0, 800809a <_vfiprintf_r+0x13a>
 800806c:	9207      	str	r2, [sp, #28]
 800806e:	e014      	b.n	800809a <_vfiprintf_r+0x13a>
 8008070:	eba0 0308 	sub.w	r3, r0, r8
 8008074:	fa09 f303 	lsl.w	r3, r9, r3
 8008078:	4313      	orrs	r3, r2
 800807a:	46a2      	mov	sl, r4
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	e7d2      	b.n	8008026 <_vfiprintf_r+0xc6>
 8008080:	9b03      	ldr	r3, [sp, #12]
 8008082:	1d19      	adds	r1, r3, #4
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	9103      	str	r1, [sp, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	bfbb      	ittet	lt
 800808c:	425b      	neglt	r3, r3
 800808e:	f042 0202 	orrlt.w	r2, r2, #2
 8008092:	9307      	strge	r3, [sp, #28]
 8008094:	9307      	strlt	r3, [sp, #28]
 8008096:	bfb8      	it	lt
 8008098:	9204      	strlt	r2, [sp, #16]
 800809a:	7823      	ldrb	r3, [r4, #0]
 800809c:	2b2e      	cmp	r3, #46	; 0x2e
 800809e:	d10c      	bne.n	80080ba <_vfiprintf_r+0x15a>
 80080a0:	7863      	ldrb	r3, [r4, #1]
 80080a2:	2b2a      	cmp	r3, #42	; 0x2a
 80080a4:	d134      	bne.n	8008110 <_vfiprintf_r+0x1b0>
 80080a6:	9b03      	ldr	r3, [sp, #12]
 80080a8:	3402      	adds	r4, #2
 80080aa:	1d1a      	adds	r2, r3, #4
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	9203      	str	r2, [sp, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	bfb8      	it	lt
 80080b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80080b8:	9305      	str	r3, [sp, #20]
 80080ba:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008184 <_vfiprintf_r+0x224>
 80080be:	2203      	movs	r2, #3
 80080c0:	4650      	mov	r0, sl
 80080c2:	7821      	ldrb	r1, [r4, #0]
 80080c4:	f7fe f959 	bl	800637a <memchr>
 80080c8:	b138      	cbz	r0, 80080da <_vfiprintf_r+0x17a>
 80080ca:	2240      	movs	r2, #64	; 0x40
 80080cc:	9b04      	ldr	r3, [sp, #16]
 80080ce:	eba0 000a 	sub.w	r0, r0, sl
 80080d2:	4082      	lsls	r2, r0
 80080d4:	4313      	orrs	r3, r2
 80080d6:	3401      	adds	r4, #1
 80080d8:	9304      	str	r3, [sp, #16]
 80080da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080de:	2206      	movs	r2, #6
 80080e0:	4829      	ldr	r0, [pc, #164]	; (8008188 <_vfiprintf_r+0x228>)
 80080e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080e6:	f7fe f948 	bl	800637a <memchr>
 80080ea:	2800      	cmp	r0, #0
 80080ec:	d03f      	beq.n	800816e <_vfiprintf_r+0x20e>
 80080ee:	4b27      	ldr	r3, [pc, #156]	; (800818c <_vfiprintf_r+0x22c>)
 80080f0:	bb1b      	cbnz	r3, 800813a <_vfiprintf_r+0x1da>
 80080f2:	9b03      	ldr	r3, [sp, #12]
 80080f4:	3307      	adds	r3, #7
 80080f6:	f023 0307 	bic.w	r3, r3, #7
 80080fa:	3308      	adds	r3, #8
 80080fc:	9303      	str	r3, [sp, #12]
 80080fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008100:	443b      	add	r3, r7
 8008102:	9309      	str	r3, [sp, #36]	; 0x24
 8008104:	e768      	b.n	8007fd8 <_vfiprintf_r+0x78>
 8008106:	460c      	mov	r4, r1
 8008108:	2001      	movs	r0, #1
 800810a:	fb0c 3202 	mla	r2, ip, r2, r3
 800810e:	e7a6      	b.n	800805e <_vfiprintf_r+0xfe>
 8008110:	2300      	movs	r3, #0
 8008112:	f04f 0c0a 	mov.w	ip, #10
 8008116:	4619      	mov	r1, r3
 8008118:	3401      	adds	r4, #1
 800811a:	9305      	str	r3, [sp, #20]
 800811c:	4620      	mov	r0, r4
 800811e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008122:	3a30      	subs	r2, #48	; 0x30
 8008124:	2a09      	cmp	r2, #9
 8008126:	d903      	bls.n	8008130 <_vfiprintf_r+0x1d0>
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0c6      	beq.n	80080ba <_vfiprintf_r+0x15a>
 800812c:	9105      	str	r1, [sp, #20]
 800812e:	e7c4      	b.n	80080ba <_vfiprintf_r+0x15a>
 8008130:	4604      	mov	r4, r0
 8008132:	2301      	movs	r3, #1
 8008134:	fb0c 2101 	mla	r1, ip, r1, r2
 8008138:	e7f0      	b.n	800811c <_vfiprintf_r+0x1bc>
 800813a:	ab03      	add	r3, sp, #12
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	462a      	mov	r2, r5
 8008140:	4630      	mov	r0, r6
 8008142:	4b13      	ldr	r3, [pc, #76]	; (8008190 <_vfiprintf_r+0x230>)
 8008144:	a904      	add	r1, sp, #16
 8008146:	f7fd fbb1 	bl	80058ac <_printf_float>
 800814a:	4607      	mov	r7, r0
 800814c:	1c78      	adds	r0, r7, #1
 800814e:	d1d6      	bne.n	80080fe <_vfiprintf_r+0x19e>
 8008150:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008152:	07d9      	lsls	r1, r3, #31
 8008154:	d405      	bmi.n	8008162 <_vfiprintf_r+0x202>
 8008156:	89ab      	ldrh	r3, [r5, #12]
 8008158:	059a      	lsls	r2, r3, #22
 800815a:	d402      	bmi.n	8008162 <_vfiprintf_r+0x202>
 800815c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800815e:	f7fe f90b 	bl	8006378 <__retarget_lock_release_recursive>
 8008162:	89ab      	ldrh	r3, [r5, #12]
 8008164:	065b      	lsls	r3, r3, #25
 8008166:	f53f af1d 	bmi.w	8007fa4 <_vfiprintf_r+0x44>
 800816a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800816c:	e71c      	b.n	8007fa8 <_vfiprintf_r+0x48>
 800816e:	ab03      	add	r3, sp, #12
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	462a      	mov	r2, r5
 8008174:	4630      	mov	r0, r6
 8008176:	4b06      	ldr	r3, [pc, #24]	; (8008190 <_vfiprintf_r+0x230>)
 8008178:	a904      	add	r1, sp, #16
 800817a:	f7fd fe37 	bl	8005dec <_printf_i>
 800817e:	e7e4      	b.n	800814a <_vfiprintf_r+0x1ea>
 8008180:	0800925c 	.word	0x0800925c
 8008184:	08009262 	.word	0x08009262
 8008188:	08009266 	.word	0x08009266
 800818c:	080058ad 	.word	0x080058ad
 8008190:	08007f3d 	.word	0x08007f3d

08008194 <__swbuf_r>:
 8008194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008196:	460e      	mov	r6, r1
 8008198:	4614      	mov	r4, r2
 800819a:	4605      	mov	r5, r0
 800819c:	b118      	cbz	r0, 80081a6 <__swbuf_r+0x12>
 800819e:	6a03      	ldr	r3, [r0, #32]
 80081a0:	b90b      	cbnz	r3, 80081a6 <__swbuf_r+0x12>
 80081a2:	f7fd ffd1 	bl	8006148 <__sinit>
 80081a6:	69a3      	ldr	r3, [r4, #24]
 80081a8:	60a3      	str	r3, [r4, #8]
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	071a      	lsls	r2, r3, #28
 80081ae:	d525      	bpl.n	80081fc <__swbuf_r+0x68>
 80081b0:	6923      	ldr	r3, [r4, #16]
 80081b2:	b31b      	cbz	r3, 80081fc <__swbuf_r+0x68>
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	6922      	ldr	r2, [r4, #16]
 80081b8:	b2f6      	uxtb	r6, r6
 80081ba:	1a98      	subs	r0, r3, r2
 80081bc:	6963      	ldr	r3, [r4, #20]
 80081be:	4637      	mov	r7, r6
 80081c0:	4283      	cmp	r3, r0
 80081c2:	dc04      	bgt.n	80081ce <__swbuf_r+0x3a>
 80081c4:	4621      	mov	r1, r4
 80081c6:	4628      	mov	r0, r5
 80081c8:	f7ff fdb0 	bl	8007d2c <_fflush_r>
 80081cc:	b9e0      	cbnz	r0, 8008208 <__swbuf_r+0x74>
 80081ce:	68a3      	ldr	r3, [r4, #8]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	60a3      	str	r3, [r4, #8]
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	6022      	str	r2, [r4, #0]
 80081da:	701e      	strb	r6, [r3, #0]
 80081dc:	6962      	ldr	r2, [r4, #20]
 80081de:	1c43      	adds	r3, r0, #1
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d004      	beq.n	80081ee <__swbuf_r+0x5a>
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	07db      	lsls	r3, r3, #31
 80081e8:	d506      	bpl.n	80081f8 <__swbuf_r+0x64>
 80081ea:	2e0a      	cmp	r6, #10
 80081ec:	d104      	bne.n	80081f8 <__swbuf_r+0x64>
 80081ee:	4621      	mov	r1, r4
 80081f0:	4628      	mov	r0, r5
 80081f2:	f7ff fd9b 	bl	8007d2c <_fflush_r>
 80081f6:	b938      	cbnz	r0, 8008208 <__swbuf_r+0x74>
 80081f8:	4638      	mov	r0, r7
 80081fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081fc:	4621      	mov	r1, r4
 80081fe:	4628      	mov	r0, r5
 8008200:	f000 f806 	bl	8008210 <__swsetup_r>
 8008204:	2800      	cmp	r0, #0
 8008206:	d0d5      	beq.n	80081b4 <__swbuf_r+0x20>
 8008208:	f04f 37ff 	mov.w	r7, #4294967295
 800820c:	e7f4      	b.n	80081f8 <__swbuf_r+0x64>
	...

08008210 <__swsetup_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	4b2a      	ldr	r3, [pc, #168]	; (80082bc <__swsetup_r+0xac>)
 8008214:	4605      	mov	r5, r0
 8008216:	6818      	ldr	r0, [r3, #0]
 8008218:	460c      	mov	r4, r1
 800821a:	b118      	cbz	r0, 8008224 <__swsetup_r+0x14>
 800821c:	6a03      	ldr	r3, [r0, #32]
 800821e:	b90b      	cbnz	r3, 8008224 <__swsetup_r+0x14>
 8008220:	f7fd ff92 	bl	8006148 <__sinit>
 8008224:	89a3      	ldrh	r3, [r4, #12]
 8008226:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800822a:	0718      	lsls	r0, r3, #28
 800822c:	d422      	bmi.n	8008274 <__swsetup_r+0x64>
 800822e:	06d9      	lsls	r1, r3, #27
 8008230:	d407      	bmi.n	8008242 <__swsetup_r+0x32>
 8008232:	2309      	movs	r3, #9
 8008234:	602b      	str	r3, [r5, #0]
 8008236:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800823a:	f04f 30ff 	mov.w	r0, #4294967295
 800823e:	81a3      	strh	r3, [r4, #12]
 8008240:	e034      	b.n	80082ac <__swsetup_r+0x9c>
 8008242:	0758      	lsls	r0, r3, #29
 8008244:	d512      	bpl.n	800826c <__swsetup_r+0x5c>
 8008246:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008248:	b141      	cbz	r1, 800825c <__swsetup_r+0x4c>
 800824a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800824e:	4299      	cmp	r1, r3
 8008250:	d002      	beq.n	8008258 <__swsetup_r+0x48>
 8008252:	4628      	mov	r0, r5
 8008254:	f7fe ff1c 	bl	8007090 <_free_r>
 8008258:	2300      	movs	r3, #0
 800825a:	6363      	str	r3, [r4, #52]	; 0x34
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008262:	81a3      	strh	r3, [r4, #12]
 8008264:	2300      	movs	r3, #0
 8008266:	6063      	str	r3, [r4, #4]
 8008268:	6923      	ldr	r3, [r4, #16]
 800826a:	6023      	str	r3, [r4, #0]
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	f043 0308 	orr.w	r3, r3, #8
 8008272:	81a3      	strh	r3, [r4, #12]
 8008274:	6923      	ldr	r3, [r4, #16]
 8008276:	b94b      	cbnz	r3, 800828c <__swsetup_r+0x7c>
 8008278:	89a3      	ldrh	r3, [r4, #12]
 800827a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800827e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008282:	d003      	beq.n	800828c <__swsetup_r+0x7c>
 8008284:	4621      	mov	r1, r4
 8008286:	4628      	mov	r0, r5
 8008288:	f000 f883 	bl	8008392 <__smakebuf_r>
 800828c:	89a0      	ldrh	r0, [r4, #12]
 800828e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008292:	f010 0301 	ands.w	r3, r0, #1
 8008296:	d00a      	beq.n	80082ae <__swsetup_r+0x9e>
 8008298:	2300      	movs	r3, #0
 800829a:	60a3      	str	r3, [r4, #8]
 800829c:	6963      	ldr	r3, [r4, #20]
 800829e:	425b      	negs	r3, r3
 80082a0:	61a3      	str	r3, [r4, #24]
 80082a2:	6923      	ldr	r3, [r4, #16]
 80082a4:	b943      	cbnz	r3, 80082b8 <__swsetup_r+0xa8>
 80082a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082aa:	d1c4      	bne.n	8008236 <__swsetup_r+0x26>
 80082ac:	bd38      	pop	{r3, r4, r5, pc}
 80082ae:	0781      	lsls	r1, r0, #30
 80082b0:	bf58      	it	pl
 80082b2:	6963      	ldrpl	r3, [r4, #20]
 80082b4:	60a3      	str	r3, [r4, #8]
 80082b6:	e7f4      	b.n	80082a2 <__swsetup_r+0x92>
 80082b8:	2000      	movs	r0, #0
 80082ba:	e7f7      	b.n	80082ac <__swsetup_r+0x9c>
 80082bc:	2000006c 	.word	0x2000006c

080082c0 <_raise_r>:
 80082c0:	291f      	cmp	r1, #31
 80082c2:	b538      	push	{r3, r4, r5, lr}
 80082c4:	4604      	mov	r4, r0
 80082c6:	460d      	mov	r5, r1
 80082c8:	d904      	bls.n	80082d4 <_raise_r+0x14>
 80082ca:	2316      	movs	r3, #22
 80082cc:	6003      	str	r3, [r0, #0]
 80082ce:	f04f 30ff 	mov.w	r0, #4294967295
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80082d6:	b112      	cbz	r2, 80082de <_raise_r+0x1e>
 80082d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082dc:	b94b      	cbnz	r3, 80082f2 <_raise_r+0x32>
 80082de:	4620      	mov	r0, r4
 80082e0:	f000 f830 	bl	8008344 <_getpid_r>
 80082e4:	462a      	mov	r2, r5
 80082e6:	4601      	mov	r1, r0
 80082e8:	4620      	mov	r0, r4
 80082ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082ee:	f000 b817 	b.w	8008320 <_kill_r>
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d00a      	beq.n	800830c <_raise_r+0x4c>
 80082f6:	1c59      	adds	r1, r3, #1
 80082f8:	d103      	bne.n	8008302 <_raise_r+0x42>
 80082fa:	2316      	movs	r3, #22
 80082fc:	6003      	str	r3, [r0, #0]
 80082fe:	2001      	movs	r0, #1
 8008300:	e7e7      	b.n	80082d2 <_raise_r+0x12>
 8008302:	2400      	movs	r4, #0
 8008304:	4628      	mov	r0, r5
 8008306:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800830a:	4798      	blx	r3
 800830c:	2000      	movs	r0, #0
 800830e:	e7e0      	b.n	80082d2 <_raise_r+0x12>

08008310 <raise>:
 8008310:	4b02      	ldr	r3, [pc, #8]	; (800831c <raise+0xc>)
 8008312:	4601      	mov	r1, r0
 8008314:	6818      	ldr	r0, [r3, #0]
 8008316:	f7ff bfd3 	b.w	80082c0 <_raise_r>
 800831a:	bf00      	nop
 800831c:	2000006c 	.word	0x2000006c

08008320 <_kill_r>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	2300      	movs	r3, #0
 8008324:	4d06      	ldr	r5, [pc, #24]	; (8008340 <_kill_r+0x20>)
 8008326:	4604      	mov	r4, r0
 8008328:	4608      	mov	r0, r1
 800832a:	4611      	mov	r1, r2
 800832c:	602b      	str	r3, [r5, #0]
 800832e:	f7fa fdae 	bl	8002e8e <_kill>
 8008332:	1c43      	adds	r3, r0, #1
 8008334:	d102      	bne.n	800833c <_kill_r+0x1c>
 8008336:	682b      	ldr	r3, [r5, #0]
 8008338:	b103      	cbz	r3, 800833c <_kill_r+0x1c>
 800833a:	6023      	str	r3, [r4, #0]
 800833c:	bd38      	pop	{r3, r4, r5, pc}
 800833e:	bf00      	nop
 8008340:	20000798 	.word	0x20000798

08008344 <_getpid_r>:
 8008344:	f7fa bd9c 	b.w	8002e80 <_getpid>

08008348 <__swhatbuf_r>:
 8008348:	b570      	push	{r4, r5, r6, lr}
 800834a:	460c      	mov	r4, r1
 800834c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008350:	4615      	mov	r5, r2
 8008352:	2900      	cmp	r1, #0
 8008354:	461e      	mov	r6, r3
 8008356:	b096      	sub	sp, #88	; 0x58
 8008358:	da0c      	bge.n	8008374 <__swhatbuf_r+0x2c>
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	2100      	movs	r1, #0
 800835e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008362:	bf0c      	ite	eq
 8008364:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008368:	2340      	movne	r3, #64	; 0x40
 800836a:	2000      	movs	r0, #0
 800836c:	6031      	str	r1, [r6, #0]
 800836e:	602b      	str	r3, [r5, #0]
 8008370:	b016      	add	sp, #88	; 0x58
 8008372:	bd70      	pop	{r4, r5, r6, pc}
 8008374:	466a      	mov	r2, sp
 8008376:	f000 f849 	bl	800840c <_fstat_r>
 800837a:	2800      	cmp	r0, #0
 800837c:	dbed      	blt.n	800835a <__swhatbuf_r+0x12>
 800837e:	9901      	ldr	r1, [sp, #4]
 8008380:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008384:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008388:	4259      	negs	r1, r3
 800838a:	4159      	adcs	r1, r3
 800838c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008390:	e7eb      	b.n	800836a <__swhatbuf_r+0x22>

08008392 <__smakebuf_r>:
 8008392:	898b      	ldrh	r3, [r1, #12]
 8008394:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008396:	079d      	lsls	r5, r3, #30
 8008398:	4606      	mov	r6, r0
 800839a:	460c      	mov	r4, r1
 800839c:	d507      	bpl.n	80083ae <__smakebuf_r+0x1c>
 800839e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083a2:	6023      	str	r3, [r4, #0]
 80083a4:	6123      	str	r3, [r4, #16]
 80083a6:	2301      	movs	r3, #1
 80083a8:	6163      	str	r3, [r4, #20]
 80083aa:	b002      	add	sp, #8
 80083ac:	bd70      	pop	{r4, r5, r6, pc}
 80083ae:	466a      	mov	r2, sp
 80083b0:	ab01      	add	r3, sp, #4
 80083b2:	f7ff ffc9 	bl	8008348 <__swhatbuf_r>
 80083b6:	9900      	ldr	r1, [sp, #0]
 80083b8:	4605      	mov	r5, r0
 80083ba:	4630      	mov	r0, r6
 80083bc:	f7fe fed8 	bl	8007170 <_malloc_r>
 80083c0:	b948      	cbnz	r0, 80083d6 <__smakebuf_r+0x44>
 80083c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083c6:	059a      	lsls	r2, r3, #22
 80083c8:	d4ef      	bmi.n	80083aa <__smakebuf_r+0x18>
 80083ca:	f023 0303 	bic.w	r3, r3, #3
 80083ce:	f043 0302 	orr.w	r3, r3, #2
 80083d2:	81a3      	strh	r3, [r4, #12]
 80083d4:	e7e3      	b.n	800839e <__smakebuf_r+0xc>
 80083d6:	89a3      	ldrh	r3, [r4, #12]
 80083d8:	6020      	str	r0, [r4, #0]
 80083da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083de:	81a3      	strh	r3, [r4, #12]
 80083e0:	9b00      	ldr	r3, [sp, #0]
 80083e2:	6120      	str	r0, [r4, #16]
 80083e4:	6163      	str	r3, [r4, #20]
 80083e6:	9b01      	ldr	r3, [sp, #4]
 80083e8:	b15b      	cbz	r3, 8008402 <__smakebuf_r+0x70>
 80083ea:	4630      	mov	r0, r6
 80083ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083f0:	f000 f81e 	bl	8008430 <_isatty_r>
 80083f4:	b128      	cbz	r0, 8008402 <__smakebuf_r+0x70>
 80083f6:	89a3      	ldrh	r3, [r4, #12]
 80083f8:	f023 0303 	bic.w	r3, r3, #3
 80083fc:	f043 0301 	orr.w	r3, r3, #1
 8008400:	81a3      	strh	r3, [r4, #12]
 8008402:	89a3      	ldrh	r3, [r4, #12]
 8008404:	431d      	orrs	r5, r3
 8008406:	81a5      	strh	r5, [r4, #12]
 8008408:	e7cf      	b.n	80083aa <__smakebuf_r+0x18>
	...

0800840c <_fstat_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	2300      	movs	r3, #0
 8008410:	4d06      	ldr	r5, [pc, #24]	; (800842c <_fstat_r+0x20>)
 8008412:	4604      	mov	r4, r0
 8008414:	4608      	mov	r0, r1
 8008416:	4611      	mov	r1, r2
 8008418:	602b      	str	r3, [r5, #0]
 800841a:	f7fa fd96 	bl	8002f4a <_fstat>
 800841e:	1c43      	adds	r3, r0, #1
 8008420:	d102      	bne.n	8008428 <_fstat_r+0x1c>
 8008422:	682b      	ldr	r3, [r5, #0]
 8008424:	b103      	cbz	r3, 8008428 <_fstat_r+0x1c>
 8008426:	6023      	str	r3, [r4, #0]
 8008428:	bd38      	pop	{r3, r4, r5, pc}
 800842a:	bf00      	nop
 800842c:	20000798 	.word	0x20000798

08008430 <_isatty_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	2300      	movs	r3, #0
 8008434:	4d05      	ldr	r5, [pc, #20]	; (800844c <_isatty_r+0x1c>)
 8008436:	4604      	mov	r4, r0
 8008438:	4608      	mov	r0, r1
 800843a:	602b      	str	r3, [r5, #0]
 800843c:	f7fa fd94 	bl	8002f68 <_isatty>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_isatty_r+0x1a>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	b103      	cbz	r3, 800844a <_isatty_r+0x1a>
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	20000798 	.word	0x20000798

08008450 <asin>:
 8008450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008452:	4604      	mov	r4, r0
 8008454:	460d      	mov	r5, r1
 8008456:	f000 f907 	bl	8008668 <__ieee754_asin>
 800845a:	4622      	mov	r2, r4
 800845c:	4606      	mov	r6, r0
 800845e:	460f      	mov	r7, r1
 8008460:	462b      	mov	r3, r5
 8008462:	4620      	mov	r0, r4
 8008464:	4629      	mov	r1, r5
 8008466:	f7f8 fad1 	bl	8000a0c <__aeabi_dcmpun>
 800846a:	b988      	cbnz	r0, 8008490 <asin+0x40>
 800846c:	4620      	mov	r0, r4
 800846e:	4629      	mov	r1, r5
 8008470:	f000 f818 	bl	80084a4 <fabs>
 8008474:	2200      	movs	r2, #0
 8008476:	4b08      	ldr	r3, [pc, #32]	; (8008498 <asin+0x48>)
 8008478:	f7f8 fabe 	bl	80009f8 <__aeabi_dcmpgt>
 800847c:	b140      	cbz	r0, 8008490 <asin+0x40>
 800847e:	f7fd ff4f 	bl	8006320 <__errno>
 8008482:	2321      	movs	r3, #33	; 0x21
 8008484:	6003      	str	r3, [r0, #0]
 8008486:	4805      	ldr	r0, [pc, #20]	; (800849c <asin+0x4c>)
 8008488:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800848c:	f000 b80e 	b.w	80084ac <nan>
 8008490:	4630      	mov	r0, r6
 8008492:	4639      	mov	r1, r7
 8008494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008496:	bf00      	nop
 8008498:	3ff00000 	.word	0x3ff00000
 800849c:	080092b2 	.word	0x080092b2

080084a0 <atan2>:
 80084a0:	f000 bade 	b.w	8008a60 <__ieee754_atan2>

080084a4 <fabs>:
 80084a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80084a8:	4619      	mov	r1, r3
 80084aa:	4770      	bx	lr

080084ac <nan>:
 80084ac:	2000      	movs	r0, #0
 80084ae:	4901      	ldr	r1, [pc, #4]	; (80084b4 <nan+0x8>)
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	7ff80000 	.word	0x7ff80000

080084b8 <__ieee754_sqrt>:
 80084b8:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800865c <__ieee754_sqrt+0x1a4>
 80084bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c0:	ea3c 0c01 	bics.w	ip, ip, r1
 80084c4:	460b      	mov	r3, r1
 80084c6:	4606      	mov	r6, r0
 80084c8:	460d      	mov	r5, r1
 80084ca:	460a      	mov	r2, r1
 80084cc:	4604      	mov	r4, r0
 80084ce:	d10e      	bne.n	80084ee <__ieee754_sqrt+0x36>
 80084d0:	4602      	mov	r2, r0
 80084d2:	f7f8 f801 	bl	80004d8 <__aeabi_dmul>
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	4630      	mov	r0, r6
 80084dc:	4629      	mov	r1, r5
 80084de:	f7f7 fe45 	bl	800016c <__adddf3>
 80084e2:	4606      	mov	r6, r0
 80084e4:	460d      	mov	r5, r1
 80084e6:	4630      	mov	r0, r6
 80084e8:	4629      	mov	r1, r5
 80084ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ee:	2900      	cmp	r1, #0
 80084f0:	dc0d      	bgt.n	800850e <__ieee754_sqrt+0x56>
 80084f2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80084f6:	ea5c 0c00 	orrs.w	ip, ip, r0
 80084fa:	d0f4      	beq.n	80084e6 <__ieee754_sqrt+0x2e>
 80084fc:	b139      	cbz	r1, 800850e <__ieee754_sqrt+0x56>
 80084fe:	4602      	mov	r2, r0
 8008500:	f7f7 fe32 	bl	8000168 <__aeabi_dsub>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	f7f8 f910 	bl	800072c <__aeabi_ddiv>
 800850c:	e7e9      	b.n	80084e2 <__ieee754_sqrt+0x2a>
 800850e:	1512      	asrs	r2, r2, #20
 8008510:	f000 8089 	beq.w	8008626 <__ieee754_sqrt+0x16e>
 8008514:	2500      	movs	r5, #0
 8008516:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800851a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800851e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008522:	07d2      	lsls	r2, r2, #31
 8008524:	bf5c      	itt	pl
 8008526:	005b      	lslpl	r3, r3, #1
 8008528:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800852c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008530:	bf58      	it	pl
 8008532:	0064      	lslpl	r4, r4, #1
 8008534:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008538:	0062      	lsls	r2, r4, #1
 800853a:	2016      	movs	r0, #22
 800853c:	4629      	mov	r1, r5
 800853e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8008542:	1076      	asrs	r6, r6, #1
 8008544:	190f      	adds	r7, r1, r4
 8008546:	429f      	cmp	r7, r3
 8008548:	bfde      	ittt	le
 800854a:	1bdb      	suble	r3, r3, r7
 800854c:	1939      	addle	r1, r7, r4
 800854e:	192d      	addle	r5, r5, r4
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	3801      	subs	r0, #1
 8008554:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008558:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800855c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008560:	d1f0      	bne.n	8008544 <__ieee754_sqrt+0x8c>
 8008562:	4604      	mov	r4, r0
 8008564:	2720      	movs	r7, #32
 8008566:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800856a:	428b      	cmp	r3, r1
 800856c:	eb0c 0e00 	add.w	lr, ip, r0
 8008570:	dc02      	bgt.n	8008578 <__ieee754_sqrt+0xc0>
 8008572:	d113      	bne.n	800859c <__ieee754_sqrt+0xe4>
 8008574:	4596      	cmp	lr, r2
 8008576:	d811      	bhi.n	800859c <__ieee754_sqrt+0xe4>
 8008578:	f1be 0f00 	cmp.w	lr, #0
 800857c:	eb0e 000c 	add.w	r0, lr, ip
 8008580:	da56      	bge.n	8008630 <__ieee754_sqrt+0x178>
 8008582:	2800      	cmp	r0, #0
 8008584:	db54      	blt.n	8008630 <__ieee754_sqrt+0x178>
 8008586:	f101 0801 	add.w	r8, r1, #1
 800858a:	1a5b      	subs	r3, r3, r1
 800858c:	4641      	mov	r1, r8
 800858e:	4596      	cmp	lr, r2
 8008590:	bf88      	it	hi
 8008592:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008596:	eba2 020e 	sub.w	r2, r2, lr
 800859a:	4464      	add	r4, ip
 800859c:	005b      	lsls	r3, r3, #1
 800859e:	3f01      	subs	r7, #1
 80085a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80085a4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80085a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80085ac:	d1dd      	bne.n	800856a <__ieee754_sqrt+0xb2>
 80085ae:	4313      	orrs	r3, r2
 80085b0:	d01b      	beq.n	80085ea <__ieee754_sqrt+0x132>
 80085b2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008660 <__ieee754_sqrt+0x1a8>
 80085b6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008664 <__ieee754_sqrt+0x1ac>
 80085ba:	e9da 0100 	ldrd	r0, r1, [sl]
 80085be:	e9db 2300 	ldrd	r2, r3, [fp]
 80085c2:	f7f7 fdd1 	bl	8000168 <__aeabi_dsub>
 80085c6:	e9da 8900 	ldrd	r8, r9, [sl]
 80085ca:	4602      	mov	r2, r0
 80085cc:	460b      	mov	r3, r1
 80085ce:	4640      	mov	r0, r8
 80085d0:	4649      	mov	r1, r9
 80085d2:	f7f8 f9fd 	bl	80009d0 <__aeabi_dcmple>
 80085d6:	b140      	cbz	r0, 80085ea <__ieee754_sqrt+0x132>
 80085d8:	e9da 0100 	ldrd	r0, r1, [sl]
 80085dc:	e9db 2300 	ldrd	r2, r3, [fp]
 80085e0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80085e4:	d126      	bne.n	8008634 <__ieee754_sqrt+0x17c>
 80085e6:	463c      	mov	r4, r7
 80085e8:	3501      	adds	r5, #1
 80085ea:	106b      	asrs	r3, r5, #1
 80085ec:	0864      	lsrs	r4, r4, #1
 80085ee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80085f2:	07ea      	lsls	r2, r5, #31
 80085f4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80085f8:	bf48      	it	mi
 80085fa:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80085fe:	4620      	mov	r0, r4
 8008600:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008604:	e76d      	b.n	80084e2 <__ieee754_sqrt+0x2a>
 8008606:	0ae3      	lsrs	r3, r4, #11
 8008608:	3915      	subs	r1, #21
 800860a:	0564      	lsls	r4, r4, #21
 800860c:	2b00      	cmp	r3, #0
 800860e:	d0fa      	beq.n	8008606 <__ieee754_sqrt+0x14e>
 8008610:	02d8      	lsls	r0, r3, #11
 8008612:	d50a      	bpl.n	800862a <__ieee754_sqrt+0x172>
 8008614:	f1c2 0020 	rsb	r0, r2, #32
 8008618:	fa24 f000 	lsr.w	r0, r4, r0
 800861c:	1e55      	subs	r5, r2, #1
 800861e:	4094      	lsls	r4, r2
 8008620:	4303      	orrs	r3, r0
 8008622:	1b4a      	subs	r2, r1, r5
 8008624:	e776      	b.n	8008514 <__ieee754_sqrt+0x5c>
 8008626:	4611      	mov	r1, r2
 8008628:	e7f0      	b.n	800860c <__ieee754_sqrt+0x154>
 800862a:	005b      	lsls	r3, r3, #1
 800862c:	3201      	adds	r2, #1
 800862e:	e7ef      	b.n	8008610 <__ieee754_sqrt+0x158>
 8008630:	4688      	mov	r8, r1
 8008632:	e7aa      	b.n	800858a <__ieee754_sqrt+0xd2>
 8008634:	f7f7 fd9a 	bl	800016c <__adddf3>
 8008638:	e9da 8900 	ldrd	r8, r9, [sl]
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	4640      	mov	r0, r8
 8008642:	4649      	mov	r1, r9
 8008644:	f7f8 f9ba 	bl	80009bc <__aeabi_dcmplt>
 8008648:	b120      	cbz	r0, 8008654 <__ieee754_sqrt+0x19c>
 800864a:	1ca1      	adds	r1, r4, #2
 800864c:	bf08      	it	eq
 800864e:	3501      	addeq	r5, #1
 8008650:	3402      	adds	r4, #2
 8008652:	e7ca      	b.n	80085ea <__ieee754_sqrt+0x132>
 8008654:	3401      	adds	r4, #1
 8008656:	f024 0401 	bic.w	r4, r4, #1
 800865a:	e7c6      	b.n	80085ea <__ieee754_sqrt+0x132>
 800865c:	7ff00000 	.word	0x7ff00000
 8008660:	200001e0 	.word	0x200001e0
 8008664:	200001e8 	.word	0x200001e8

08008668 <__ieee754_asin>:
 8008668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	4bc4      	ldr	r3, [pc, #784]	; (8008980 <__ieee754_asin+0x318>)
 800866e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008672:	b087      	sub	sp, #28
 8008674:	429e      	cmp	r6, r3
 8008676:	4602      	mov	r2, r0
 8008678:	4604      	mov	r4, r0
 800867a:	460d      	mov	r5, r1
 800867c:	9105      	str	r1, [sp, #20]
 800867e:	dd28      	ble.n	80086d2 <__ieee754_asin+0x6a>
 8008680:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 8008684:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8008688:	4306      	orrs	r6, r0
 800868a:	d114      	bne.n	80086b6 <__ieee754_asin+0x4e>
 800868c:	a3a2      	add	r3, pc, #648	; (adr r3, 8008918 <__ieee754_asin+0x2b0>)
 800868e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008692:	f7f7 ff21 	bl	80004d8 <__aeabi_dmul>
 8008696:	a3a2      	add	r3, pc, #648	; (adr r3, 8008920 <__ieee754_asin+0x2b8>)
 8008698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869c:	4606      	mov	r6, r0
 800869e:	460f      	mov	r7, r1
 80086a0:	4620      	mov	r0, r4
 80086a2:	4629      	mov	r1, r5
 80086a4:	f7f7 ff18 	bl	80004d8 <__aeabi_dmul>
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	4630      	mov	r0, r6
 80086ae:	4639      	mov	r1, r7
 80086b0:	f7f7 fd5c 	bl	800016c <__adddf3>
 80086b4:	e006      	b.n	80086c4 <__ieee754_asin+0x5c>
 80086b6:	460b      	mov	r3, r1
 80086b8:	f7f7 fd56 	bl	8000168 <__aeabi_dsub>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	f7f8 f834 	bl	800072c <__aeabi_ddiv>
 80086c4:	4604      	mov	r4, r0
 80086c6:	460d      	mov	r5, r1
 80086c8:	4620      	mov	r0, r4
 80086ca:	4629      	mov	r1, r5
 80086cc:	b007      	add	sp, #28
 80086ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d2:	4bac      	ldr	r3, [pc, #688]	; (8008984 <__ieee754_asin+0x31c>)
 80086d4:	429e      	cmp	r6, r3
 80086d6:	dc0e      	bgt.n	80086f6 <__ieee754_asin+0x8e>
 80086d8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80086dc:	f280 80ab 	bge.w	8008836 <__ieee754_asin+0x1ce>
 80086e0:	a391      	add	r3, pc, #580	; (adr r3, 8008928 <__ieee754_asin+0x2c0>)
 80086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e6:	f7f7 fd41 	bl	800016c <__adddf3>
 80086ea:	2200      	movs	r2, #0
 80086ec:	4ba6      	ldr	r3, [pc, #664]	; (8008988 <__ieee754_asin+0x320>)
 80086ee:	f7f8 f983 	bl	80009f8 <__aeabi_dcmpgt>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d1e8      	bne.n	80086c8 <__ieee754_asin+0x60>
 80086f6:	4620      	mov	r0, r4
 80086f8:	4629      	mov	r1, r5
 80086fa:	f7ff fed3 	bl	80084a4 <fabs>
 80086fe:	4602      	mov	r2, r0
 8008700:	460b      	mov	r3, r1
 8008702:	2000      	movs	r0, #0
 8008704:	49a0      	ldr	r1, [pc, #640]	; (8008988 <__ieee754_asin+0x320>)
 8008706:	f7f7 fd2f 	bl	8000168 <__aeabi_dsub>
 800870a:	2200      	movs	r2, #0
 800870c:	4b9f      	ldr	r3, [pc, #636]	; (800898c <__ieee754_asin+0x324>)
 800870e:	f7f7 fee3 	bl	80004d8 <__aeabi_dmul>
 8008712:	a387      	add	r3, pc, #540	; (adr r3, 8008930 <__ieee754_asin+0x2c8>)
 8008714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008718:	4604      	mov	r4, r0
 800871a:	460d      	mov	r5, r1
 800871c:	f7f7 fedc 	bl	80004d8 <__aeabi_dmul>
 8008720:	a385      	add	r3, pc, #532	; (adr r3, 8008938 <__ieee754_asin+0x2d0>)
 8008722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008726:	f7f7 fd21 	bl	800016c <__adddf3>
 800872a:	4622      	mov	r2, r4
 800872c:	462b      	mov	r3, r5
 800872e:	f7f7 fed3 	bl	80004d8 <__aeabi_dmul>
 8008732:	a383      	add	r3, pc, #524	; (adr r3, 8008940 <__ieee754_asin+0x2d8>)
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	f7f7 fd16 	bl	8000168 <__aeabi_dsub>
 800873c:	4622      	mov	r2, r4
 800873e:	462b      	mov	r3, r5
 8008740:	f7f7 feca 	bl	80004d8 <__aeabi_dmul>
 8008744:	a380      	add	r3, pc, #512	; (adr r3, 8008948 <__ieee754_asin+0x2e0>)
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	f7f7 fd0f 	bl	800016c <__adddf3>
 800874e:	4622      	mov	r2, r4
 8008750:	462b      	mov	r3, r5
 8008752:	f7f7 fec1 	bl	80004d8 <__aeabi_dmul>
 8008756:	a37e      	add	r3, pc, #504	; (adr r3, 8008950 <__ieee754_asin+0x2e8>)
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f7f7 fd04 	bl	8000168 <__aeabi_dsub>
 8008760:	4622      	mov	r2, r4
 8008762:	462b      	mov	r3, r5
 8008764:	f7f7 feb8 	bl	80004d8 <__aeabi_dmul>
 8008768:	a37b      	add	r3, pc, #492	; (adr r3, 8008958 <__ieee754_asin+0x2f0>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f7f7 fcfd 	bl	800016c <__adddf3>
 8008772:	4622      	mov	r2, r4
 8008774:	462b      	mov	r3, r5
 8008776:	f7f7 feaf 	bl	80004d8 <__aeabi_dmul>
 800877a:	a379      	add	r3, pc, #484	; (adr r3, 8008960 <__ieee754_asin+0x2f8>)
 800877c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008780:	e9cd 0100 	strd	r0, r1, [sp]
 8008784:	4620      	mov	r0, r4
 8008786:	4629      	mov	r1, r5
 8008788:	f7f7 fea6 	bl	80004d8 <__aeabi_dmul>
 800878c:	a376      	add	r3, pc, #472	; (adr r3, 8008968 <__ieee754_asin+0x300>)
 800878e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008792:	f7f7 fce9 	bl	8000168 <__aeabi_dsub>
 8008796:	4622      	mov	r2, r4
 8008798:	462b      	mov	r3, r5
 800879a:	f7f7 fe9d 	bl	80004d8 <__aeabi_dmul>
 800879e:	a374      	add	r3, pc, #464	; (adr r3, 8008970 <__ieee754_asin+0x308>)
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	f7f7 fce2 	bl	800016c <__adddf3>
 80087a8:	4622      	mov	r2, r4
 80087aa:	462b      	mov	r3, r5
 80087ac:	f7f7 fe94 	bl	80004d8 <__aeabi_dmul>
 80087b0:	a371      	add	r3, pc, #452	; (adr r3, 8008978 <__ieee754_asin+0x310>)
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	f7f7 fcd7 	bl	8000168 <__aeabi_dsub>
 80087ba:	4622      	mov	r2, r4
 80087bc:	462b      	mov	r3, r5
 80087be:	f7f7 fe8b 	bl	80004d8 <__aeabi_dmul>
 80087c2:	4b71      	ldr	r3, [pc, #452]	; (8008988 <__ieee754_asin+0x320>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	f7f7 fcd1 	bl	800016c <__adddf3>
 80087ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087ce:	4620      	mov	r0, r4
 80087d0:	4629      	mov	r1, r5
 80087d2:	f7ff fe71 	bl	80084b8 <__ieee754_sqrt>
 80087d6:	4b6e      	ldr	r3, [pc, #440]	; (8008990 <__ieee754_asin+0x328>)
 80087d8:	4682      	mov	sl, r0
 80087da:	429e      	cmp	r6, r3
 80087dc:	468b      	mov	fp, r1
 80087de:	f340 80d9 	ble.w	8008994 <__ieee754_asin+0x32c>
 80087e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087ea:	f7f7 ff9f 	bl	800072c <__aeabi_ddiv>
 80087ee:	4652      	mov	r2, sl
 80087f0:	465b      	mov	r3, fp
 80087f2:	f7f7 fe71 	bl	80004d8 <__aeabi_dmul>
 80087f6:	4652      	mov	r2, sl
 80087f8:	465b      	mov	r3, fp
 80087fa:	f7f7 fcb7 	bl	800016c <__adddf3>
 80087fe:	4602      	mov	r2, r0
 8008800:	460b      	mov	r3, r1
 8008802:	f7f7 fcb3 	bl	800016c <__adddf3>
 8008806:	a346      	add	r3, pc, #280	; (adr r3, 8008920 <__ieee754_asin+0x2b8>)
 8008808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880c:	f7f7 fcac 	bl	8000168 <__aeabi_dsub>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	a140      	add	r1, pc, #256	; (adr r1, 8008918 <__ieee754_asin+0x2b0>)
 8008816:	e9d1 0100 	ldrd	r0, r1, [r1]
 800881a:	f7f7 fca5 	bl	8000168 <__aeabi_dsub>
 800881e:	9b05      	ldr	r3, [sp, #20]
 8008820:	4604      	mov	r4, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	bfdc      	itt	le
 8008826:	4602      	movle	r2, r0
 8008828:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800882c:	460d      	mov	r5, r1
 800882e:	bfdc      	itt	le
 8008830:	4614      	movle	r4, r2
 8008832:	461d      	movle	r5, r3
 8008834:	e748      	b.n	80086c8 <__ieee754_asin+0x60>
 8008836:	460b      	mov	r3, r1
 8008838:	f7f7 fe4e 	bl	80004d8 <__aeabi_dmul>
 800883c:	a33c      	add	r3, pc, #240	; (adr r3, 8008930 <__ieee754_asin+0x2c8>)
 800883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008842:	4606      	mov	r6, r0
 8008844:	460f      	mov	r7, r1
 8008846:	f7f7 fe47 	bl	80004d8 <__aeabi_dmul>
 800884a:	a33b      	add	r3, pc, #236	; (adr r3, 8008938 <__ieee754_asin+0x2d0>)
 800884c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008850:	f7f7 fc8c 	bl	800016c <__adddf3>
 8008854:	4632      	mov	r2, r6
 8008856:	463b      	mov	r3, r7
 8008858:	f7f7 fe3e 	bl	80004d8 <__aeabi_dmul>
 800885c:	a338      	add	r3, pc, #224	; (adr r3, 8008940 <__ieee754_asin+0x2d8>)
 800885e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008862:	f7f7 fc81 	bl	8000168 <__aeabi_dsub>
 8008866:	4632      	mov	r2, r6
 8008868:	463b      	mov	r3, r7
 800886a:	f7f7 fe35 	bl	80004d8 <__aeabi_dmul>
 800886e:	a336      	add	r3, pc, #216	; (adr r3, 8008948 <__ieee754_asin+0x2e0>)
 8008870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008874:	f7f7 fc7a 	bl	800016c <__adddf3>
 8008878:	4632      	mov	r2, r6
 800887a:	463b      	mov	r3, r7
 800887c:	f7f7 fe2c 	bl	80004d8 <__aeabi_dmul>
 8008880:	a333      	add	r3, pc, #204	; (adr r3, 8008950 <__ieee754_asin+0x2e8>)
 8008882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008886:	f7f7 fc6f 	bl	8000168 <__aeabi_dsub>
 800888a:	4632      	mov	r2, r6
 800888c:	463b      	mov	r3, r7
 800888e:	f7f7 fe23 	bl	80004d8 <__aeabi_dmul>
 8008892:	a331      	add	r3, pc, #196	; (adr r3, 8008958 <__ieee754_asin+0x2f0>)
 8008894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008898:	f7f7 fc68 	bl	800016c <__adddf3>
 800889c:	4632      	mov	r2, r6
 800889e:	463b      	mov	r3, r7
 80088a0:	f7f7 fe1a 	bl	80004d8 <__aeabi_dmul>
 80088a4:	a32e      	add	r3, pc, #184	; (adr r3, 8008960 <__ieee754_asin+0x2f8>)
 80088a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088aa:	4680      	mov	r8, r0
 80088ac:	4689      	mov	r9, r1
 80088ae:	4630      	mov	r0, r6
 80088b0:	4639      	mov	r1, r7
 80088b2:	f7f7 fe11 	bl	80004d8 <__aeabi_dmul>
 80088b6:	a32c      	add	r3, pc, #176	; (adr r3, 8008968 <__ieee754_asin+0x300>)
 80088b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088bc:	f7f7 fc54 	bl	8000168 <__aeabi_dsub>
 80088c0:	4632      	mov	r2, r6
 80088c2:	463b      	mov	r3, r7
 80088c4:	f7f7 fe08 	bl	80004d8 <__aeabi_dmul>
 80088c8:	a329      	add	r3, pc, #164	; (adr r3, 8008970 <__ieee754_asin+0x308>)
 80088ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ce:	f7f7 fc4d 	bl	800016c <__adddf3>
 80088d2:	4632      	mov	r2, r6
 80088d4:	463b      	mov	r3, r7
 80088d6:	f7f7 fdff 	bl	80004d8 <__aeabi_dmul>
 80088da:	a327      	add	r3, pc, #156	; (adr r3, 8008978 <__ieee754_asin+0x310>)
 80088dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e0:	f7f7 fc42 	bl	8000168 <__aeabi_dsub>
 80088e4:	4632      	mov	r2, r6
 80088e6:	463b      	mov	r3, r7
 80088e8:	f7f7 fdf6 	bl	80004d8 <__aeabi_dmul>
 80088ec:	2200      	movs	r2, #0
 80088ee:	4b26      	ldr	r3, [pc, #152]	; (8008988 <__ieee754_asin+0x320>)
 80088f0:	f7f7 fc3c 	bl	800016c <__adddf3>
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	4640      	mov	r0, r8
 80088fa:	4649      	mov	r1, r9
 80088fc:	f7f7 ff16 	bl	800072c <__aeabi_ddiv>
 8008900:	4622      	mov	r2, r4
 8008902:	462b      	mov	r3, r5
 8008904:	f7f7 fde8 	bl	80004d8 <__aeabi_dmul>
 8008908:	4602      	mov	r2, r0
 800890a:	460b      	mov	r3, r1
 800890c:	4620      	mov	r0, r4
 800890e:	4629      	mov	r1, r5
 8008910:	e6ce      	b.n	80086b0 <__ieee754_asin+0x48>
 8008912:	bf00      	nop
 8008914:	f3af 8000 	nop.w
 8008918:	54442d18 	.word	0x54442d18
 800891c:	3ff921fb 	.word	0x3ff921fb
 8008920:	33145c07 	.word	0x33145c07
 8008924:	3c91a626 	.word	0x3c91a626
 8008928:	8800759c 	.word	0x8800759c
 800892c:	7e37e43c 	.word	0x7e37e43c
 8008930:	0dfdf709 	.word	0x0dfdf709
 8008934:	3f023de1 	.word	0x3f023de1
 8008938:	7501b288 	.word	0x7501b288
 800893c:	3f49efe0 	.word	0x3f49efe0
 8008940:	b5688f3b 	.word	0xb5688f3b
 8008944:	3fa48228 	.word	0x3fa48228
 8008948:	0e884455 	.word	0x0e884455
 800894c:	3fc9c155 	.word	0x3fc9c155
 8008950:	03eb6f7d 	.word	0x03eb6f7d
 8008954:	3fd4d612 	.word	0x3fd4d612
 8008958:	55555555 	.word	0x55555555
 800895c:	3fc55555 	.word	0x3fc55555
 8008960:	b12e9282 	.word	0xb12e9282
 8008964:	3fb3b8c5 	.word	0x3fb3b8c5
 8008968:	1b8d0159 	.word	0x1b8d0159
 800896c:	3fe6066c 	.word	0x3fe6066c
 8008970:	9c598ac8 	.word	0x9c598ac8
 8008974:	40002ae5 	.word	0x40002ae5
 8008978:	1c8a2d4b 	.word	0x1c8a2d4b
 800897c:	40033a27 	.word	0x40033a27
 8008980:	3fefffff 	.word	0x3fefffff
 8008984:	3fdfffff 	.word	0x3fdfffff
 8008988:	3ff00000 	.word	0x3ff00000
 800898c:	3fe00000 	.word	0x3fe00000
 8008990:	3fef3332 	.word	0x3fef3332
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	f7f7 fbe8 	bl	800016c <__adddf3>
 800899c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089a0:	4606      	mov	r6, r0
 80089a2:	460f      	mov	r7, r1
 80089a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089a8:	f7f7 fec0 	bl	800072c <__aeabi_ddiv>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	4630      	mov	r0, r6
 80089b2:	4639      	mov	r1, r7
 80089b4:	f7f7 fd90 	bl	80004d8 <__aeabi_dmul>
 80089b8:	f04f 0800 	mov.w	r8, #0
 80089bc:	4606      	mov	r6, r0
 80089be:	460f      	mov	r7, r1
 80089c0:	4642      	mov	r2, r8
 80089c2:	465b      	mov	r3, fp
 80089c4:	4640      	mov	r0, r8
 80089c6:	4659      	mov	r1, fp
 80089c8:	f7f7 fd86 	bl	80004d8 <__aeabi_dmul>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	4620      	mov	r0, r4
 80089d2:	4629      	mov	r1, r5
 80089d4:	f7f7 fbc8 	bl	8000168 <__aeabi_dsub>
 80089d8:	4642      	mov	r2, r8
 80089da:	4604      	mov	r4, r0
 80089dc:	460d      	mov	r5, r1
 80089de:	465b      	mov	r3, fp
 80089e0:	4650      	mov	r0, sl
 80089e2:	4659      	mov	r1, fp
 80089e4:	f7f7 fbc2 	bl	800016c <__adddf3>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4620      	mov	r0, r4
 80089ee:	4629      	mov	r1, r5
 80089f0:	f7f7 fe9c 	bl	800072c <__aeabi_ddiv>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	f7f7 fbb8 	bl	800016c <__adddf3>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	a113      	add	r1, pc, #76	; (adr r1, 8008a50 <__ieee754_asin+0x3e8>)
 8008a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a06:	f7f7 fbaf 	bl	8000168 <__aeabi_dsub>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4630      	mov	r0, r6
 8008a10:	4639      	mov	r1, r7
 8008a12:	f7f7 fba9 	bl	8000168 <__aeabi_dsub>
 8008a16:	4642      	mov	r2, r8
 8008a18:	4604      	mov	r4, r0
 8008a1a:	460d      	mov	r5, r1
 8008a1c:	465b      	mov	r3, fp
 8008a1e:	4640      	mov	r0, r8
 8008a20:	4659      	mov	r1, fp
 8008a22:	f7f7 fba3 	bl	800016c <__adddf3>
 8008a26:	4602      	mov	r2, r0
 8008a28:	460b      	mov	r3, r1
 8008a2a:	a10b      	add	r1, pc, #44	; (adr r1, 8008a58 <__ieee754_asin+0x3f0>)
 8008a2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a30:	f7f7 fb9a 	bl	8000168 <__aeabi_dsub>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4620      	mov	r0, r4
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	f7f7 fb94 	bl	8000168 <__aeabi_dsub>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	a104      	add	r1, pc, #16	; (adr r1, 8008a58 <__ieee754_asin+0x3f0>)
 8008a46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a4a:	e6e6      	b.n	800881a <__ieee754_asin+0x1b2>
 8008a4c:	f3af 8000 	nop.w
 8008a50:	33145c07 	.word	0x33145c07
 8008a54:	3c91a626 	.word	0x3c91a626
 8008a58:	54442d18 	.word	0x54442d18
 8008a5c:	3fe921fb 	.word	0x3fe921fb

08008a60 <__ieee754_atan2>:
 8008a60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a64:	4617      	mov	r7, r2
 8008a66:	4692      	mov	sl, r2
 8008a68:	4699      	mov	r9, r3
 8008a6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a6e:	427b      	negs	r3, r7
 8008a70:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8008bf0 <__ieee754_atan2+0x190>
 8008a74:	433b      	orrs	r3, r7
 8008a76:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008a7a:	4543      	cmp	r3, r8
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	460d      	mov	r5, r1
 8008a80:	d809      	bhi.n	8008a96 <__ieee754_atan2+0x36>
 8008a82:	4246      	negs	r6, r0
 8008a84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a88:	4306      	orrs	r6, r0
 8008a8a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8008a8e:	4546      	cmp	r6, r8
 8008a90:	468e      	mov	lr, r1
 8008a92:	4683      	mov	fp, r0
 8008a94:	d908      	bls.n	8008aa8 <__ieee754_atan2+0x48>
 8008a96:	4652      	mov	r2, sl
 8008a98:	464b      	mov	r3, r9
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	f7f7 fb65 	bl	800016c <__adddf3>
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	460d      	mov	r5, r1
 8008aa6:	e019      	b.n	8008adc <__ieee754_atan2+0x7c>
 8008aa8:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8008aac:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8008ab0:	433e      	orrs	r6, r7
 8008ab2:	d103      	bne.n	8008abc <__ieee754_atan2+0x5c>
 8008ab4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab8:	f000 b8a2 	b.w	8008c00 <atan>
 8008abc:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8008ac0:	f006 0602 	and.w	r6, r6, #2
 8008ac4:	ea53 0b0b 	orrs.w	fp, r3, fp
 8008ac8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8008acc:	d10a      	bne.n	8008ae4 <__ieee754_atan2+0x84>
 8008ace:	2e02      	cmp	r6, #2
 8008ad0:	d067      	beq.n	8008ba2 <__ieee754_atan2+0x142>
 8008ad2:	2e03      	cmp	r6, #3
 8008ad4:	d102      	bne.n	8008adc <__ieee754_atan2+0x7c>
 8008ad6:	a53a      	add	r5, pc, #232	; (adr r5, 8008bc0 <__ieee754_atan2+0x160>)
 8008ad8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008adc:	4620      	mov	r0, r4
 8008ade:	4629      	mov	r1, r5
 8008ae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae4:	4317      	orrs	r7, r2
 8008ae6:	d106      	bne.n	8008af6 <__ieee754_atan2+0x96>
 8008ae8:	f1be 0f00 	cmp.w	lr, #0
 8008aec:	da64      	bge.n	8008bb8 <__ieee754_atan2+0x158>
 8008aee:	a536      	add	r5, pc, #216	; (adr r5, 8008bc8 <__ieee754_atan2+0x168>)
 8008af0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008af4:	e7f2      	b.n	8008adc <__ieee754_atan2+0x7c>
 8008af6:	4542      	cmp	r2, r8
 8008af8:	d10f      	bne.n	8008b1a <__ieee754_atan2+0xba>
 8008afa:	4293      	cmp	r3, r2
 8008afc:	f106 36ff 	add.w	r6, r6, #4294967295
 8008b00:	d107      	bne.n	8008b12 <__ieee754_atan2+0xb2>
 8008b02:	2e02      	cmp	r6, #2
 8008b04:	d851      	bhi.n	8008baa <__ieee754_atan2+0x14a>
 8008b06:	4b3b      	ldr	r3, [pc, #236]	; (8008bf4 <__ieee754_atan2+0x194>)
 8008b08:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b0c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008b10:	e7e4      	b.n	8008adc <__ieee754_atan2+0x7c>
 8008b12:	2e02      	cmp	r6, #2
 8008b14:	d84d      	bhi.n	8008bb2 <__ieee754_atan2+0x152>
 8008b16:	4b38      	ldr	r3, [pc, #224]	; (8008bf8 <__ieee754_atan2+0x198>)
 8008b18:	e7f6      	b.n	8008b08 <__ieee754_atan2+0xa8>
 8008b1a:	4543      	cmp	r3, r8
 8008b1c:	d0e4      	beq.n	8008ae8 <__ieee754_atan2+0x88>
 8008b1e:	1a9b      	subs	r3, r3, r2
 8008b20:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008b24:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008b28:	da21      	bge.n	8008b6e <__ieee754_atan2+0x10e>
 8008b2a:	f1b9 0f00 	cmp.w	r9, #0
 8008b2e:	da01      	bge.n	8008b34 <__ieee754_atan2+0xd4>
 8008b30:	323c      	adds	r2, #60	; 0x3c
 8008b32:	db20      	blt.n	8008b76 <__ieee754_atan2+0x116>
 8008b34:	4652      	mov	r2, sl
 8008b36:	464b      	mov	r3, r9
 8008b38:	4620      	mov	r0, r4
 8008b3a:	4629      	mov	r1, r5
 8008b3c:	f7f7 fdf6 	bl	800072c <__aeabi_ddiv>
 8008b40:	f7ff fcb0 	bl	80084a4 <fabs>
 8008b44:	f000 f85c 	bl	8008c00 <atan>
 8008b48:	4604      	mov	r4, r0
 8008b4a:	460d      	mov	r5, r1
 8008b4c:	2e01      	cmp	r6, #1
 8008b4e:	d015      	beq.n	8008b7c <__ieee754_atan2+0x11c>
 8008b50:	2e02      	cmp	r6, #2
 8008b52:	d017      	beq.n	8008b84 <__ieee754_atan2+0x124>
 8008b54:	2e00      	cmp	r6, #0
 8008b56:	d0c1      	beq.n	8008adc <__ieee754_atan2+0x7c>
 8008b58:	a31d      	add	r3, pc, #116	; (adr r3, 8008bd0 <__ieee754_atan2+0x170>)
 8008b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5e:	4620      	mov	r0, r4
 8008b60:	4629      	mov	r1, r5
 8008b62:	f7f7 fb01 	bl	8000168 <__aeabi_dsub>
 8008b66:	a31c      	add	r3, pc, #112	; (adr r3, 8008bd8 <__ieee754_atan2+0x178>)
 8008b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6c:	e016      	b.n	8008b9c <__ieee754_atan2+0x13c>
 8008b6e:	a51c      	add	r5, pc, #112	; (adr r5, 8008be0 <__ieee754_atan2+0x180>)
 8008b70:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008b74:	e7ea      	b.n	8008b4c <__ieee754_atan2+0xec>
 8008b76:	2400      	movs	r4, #0
 8008b78:	2500      	movs	r5, #0
 8008b7a:	e7e7      	b.n	8008b4c <__ieee754_atan2+0xec>
 8008b7c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008b80:	461d      	mov	r5, r3
 8008b82:	e7ab      	b.n	8008adc <__ieee754_atan2+0x7c>
 8008b84:	a312      	add	r3, pc, #72	; (adr r3, 8008bd0 <__ieee754_atan2+0x170>)
 8008b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	f7f7 faeb 	bl	8000168 <__aeabi_dsub>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	a110      	add	r1, pc, #64	; (adr r1, 8008bd8 <__ieee754_atan2+0x178>)
 8008b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b9c:	f7f7 fae4 	bl	8000168 <__aeabi_dsub>
 8008ba0:	e77f      	b.n	8008aa2 <__ieee754_atan2+0x42>
 8008ba2:	a50d      	add	r5, pc, #52	; (adr r5, 8008bd8 <__ieee754_atan2+0x178>)
 8008ba4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008ba8:	e798      	b.n	8008adc <__ieee754_atan2+0x7c>
 8008baa:	a50f      	add	r5, pc, #60	; (adr r5, 8008be8 <__ieee754_atan2+0x188>)
 8008bac:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008bb0:	e794      	b.n	8008adc <__ieee754_atan2+0x7c>
 8008bb2:	2400      	movs	r4, #0
 8008bb4:	2500      	movs	r5, #0
 8008bb6:	e791      	b.n	8008adc <__ieee754_atan2+0x7c>
 8008bb8:	a509      	add	r5, pc, #36	; (adr r5, 8008be0 <__ieee754_atan2+0x180>)
 8008bba:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008bbe:	e78d      	b.n	8008adc <__ieee754_atan2+0x7c>
 8008bc0:	54442d18 	.word	0x54442d18
 8008bc4:	c00921fb 	.word	0xc00921fb
 8008bc8:	54442d18 	.word	0x54442d18
 8008bcc:	bff921fb 	.word	0xbff921fb
 8008bd0:	33145c07 	.word	0x33145c07
 8008bd4:	3ca1a626 	.word	0x3ca1a626
 8008bd8:	54442d18 	.word	0x54442d18
 8008bdc:	400921fb 	.word	0x400921fb
 8008be0:	54442d18 	.word	0x54442d18
 8008be4:	3ff921fb 	.word	0x3ff921fb
 8008be8:	54442d18 	.word	0x54442d18
 8008bec:	3fe921fb 	.word	0x3fe921fb
 8008bf0:	7ff00000 	.word	0x7ff00000
 8008bf4:	080093b8 	.word	0x080093b8
 8008bf8:	080093d0 	.word	0x080093d0
 8008bfc:	00000000 	.word	0x00000000

08008c00 <atan>:
 8008c00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	4bb6      	ldr	r3, [pc, #728]	; (8008ee0 <atan+0x2e0>)
 8008c06:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008c0a:	429e      	cmp	r6, r3
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	460d      	mov	r5, r1
 8008c10:	468b      	mov	fp, r1
 8008c12:	dd17      	ble.n	8008c44 <atan+0x44>
 8008c14:	4bb3      	ldr	r3, [pc, #716]	; (8008ee4 <atan+0x2e4>)
 8008c16:	429e      	cmp	r6, r3
 8008c18:	dc01      	bgt.n	8008c1e <atan+0x1e>
 8008c1a:	d109      	bne.n	8008c30 <atan+0x30>
 8008c1c:	b140      	cbz	r0, 8008c30 <atan+0x30>
 8008c1e:	4622      	mov	r2, r4
 8008c20:	462b      	mov	r3, r5
 8008c22:	4620      	mov	r0, r4
 8008c24:	4629      	mov	r1, r5
 8008c26:	f7f7 faa1 	bl	800016c <__adddf3>
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	460d      	mov	r5, r1
 8008c2e:	e005      	b.n	8008c3c <atan+0x3c>
 8008c30:	f1bb 0f00 	cmp.w	fp, #0
 8008c34:	4cac      	ldr	r4, [pc, #688]	; (8008ee8 <atan+0x2e8>)
 8008c36:	f300 8121 	bgt.w	8008e7c <atan+0x27c>
 8008c3a:	4dac      	ldr	r5, [pc, #688]	; (8008eec <atan+0x2ec>)
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	4629      	mov	r1, r5
 8008c40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c44:	4baa      	ldr	r3, [pc, #680]	; (8008ef0 <atan+0x2f0>)
 8008c46:	429e      	cmp	r6, r3
 8008c48:	dc11      	bgt.n	8008c6e <atan+0x6e>
 8008c4a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008c4e:	429e      	cmp	r6, r3
 8008c50:	dc0a      	bgt.n	8008c68 <atan+0x68>
 8008c52:	a38b      	add	r3, pc, #556	; (adr r3, 8008e80 <atan+0x280>)
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	f7f7 fa88 	bl	800016c <__adddf3>
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	4ba5      	ldr	r3, [pc, #660]	; (8008ef4 <atan+0x2f4>)
 8008c60:	f7f7 feca 	bl	80009f8 <__aeabi_dcmpgt>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d1e9      	bne.n	8008c3c <atan+0x3c>
 8008c68:	f04f 3aff 	mov.w	sl, #4294967295
 8008c6c:	e027      	b.n	8008cbe <atan+0xbe>
 8008c6e:	f7ff fc19 	bl	80084a4 <fabs>
 8008c72:	4ba1      	ldr	r3, [pc, #644]	; (8008ef8 <atan+0x2f8>)
 8008c74:	4604      	mov	r4, r0
 8008c76:	429e      	cmp	r6, r3
 8008c78:	460d      	mov	r5, r1
 8008c7a:	f300 80b8 	bgt.w	8008dee <atan+0x1ee>
 8008c7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008c82:	429e      	cmp	r6, r3
 8008c84:	f300 809c 	bgt.w	8008dc0 <atan+0x1c0>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	f7f7 fa6e 	bl	800016c <__adddf3>
 8008c90:	2200      	movs	r2, #0
 8008c92:	4b98      	ldr	r3, [pc, #608]	; (8008ef4 <atan+0x2f4>)
 8008c94:	f7f7 fa68 	bl	8000168 <__aeabi_dsub>
 8008c98:	2200      	movs	r2, #0
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	460f      	mov	r7, r1
 8008c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	f7f7 fa61 	bl	800016c <__adddf3>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4630      	mov	r0, r6
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	f7f7 fd3b 	bl	800072c <__aeabi_ddiv>
 8008cb6:	f04f 0a00 	mov.w	sl, #0
 8008cba:	4604      	mov	r4, r0
 8008cbc:	460d      	mov	r5, r1
 8008cbe:	4622      	mov	r2, r4
 8008cc0:	462b      	mov	r3, r5
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	f7f7 fc07 	bl	80004d8 <__aeabi_dmul>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	4680      	mov	r8, r0
 8008cd0:	4689      	mov	r9, r1
 8008cd2:	f7f7 fc01 	bl	80004d8 <__aeabi_dmul>
 8008cd6:	a36c      	add	r3, pc, #432	; (adr r3, 8008e88 <atan+0x288>)
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	4606      	mov	r6, r0
 8008cde:	460f      	mov	r7, r1
 8008ce0:	f7f7 fbfa 	bl	80004d8 <__aeabi_dmul>
 8008ce4:	a36a      	add	r3, pc, #424	; (adr r3, 8008e90 <atan+0x290>)
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	f7f7 fa3f 	bl	800016c <__adddf3>
 8008cee:	4632      	mov	r2, r6
 8008cf0:	463b      	mov	r3, r7
 8008cf2:	f7f7 fbf1 	bl	80004d8 <__aeabi_dmul>
 8008cf6:	a368      	add	r3, pc, #416	; (adr r3, 8008e98 <atan+0x298>)
 8008cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfc:	f7f7 fa36 	bl	800016c <__adddf3>
 8008d00:	4632      	mov	r2, r6
 8008d02:	463b      	mov	r3, r7
 8008d04:	f7f7 fbe8 	bl	80004d8 <__aeabi_dmul>
 8008d08:	a365      	add	r3, pc, #404	; (adr r3, 8008ea0 <atan+0x2a0>)
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f7f7 fa2d 	bl	800016c <__adddf3>
 8008d12:	4632      	mov	r2, r6
 8008d14:	463b      	mov	r3, r7
 8008d16:	f7f7 fbdf 	bl	80004d8 <__aeabi_dmul>
 8008d1a:	a363      	add	r3, pc, #396	; (adr r3, 8008ea8 <atan+0x2a8>)
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	f7f7 fa24 	bl	800016c <__adddf3>
 8008d24:	4632      	mov	r2, r6
 8008d26:	463b      	mov	r3, r7
 8008d28:	f7f7 fbd6 	bl	80004d8 <__aeabi_dmul>
 8008d2c:	a360      	add	r3, pc, #384	; (adr r3, 8008eb0 <atan+0x2b0>)
 8008d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d32:	f7f7 fa1b 	bl	800016c <__adddf3>
 8008d36:	4642      	mov	r2, r8
 8008d38:	464b      	mov	r3, r9
 8008d3a:	f7f7 fbcd 	bl	80004d8 <__aeabi_dmul>
 8008d3e:	a35e      	add	r3, pc, #376	; (adr r3, 8008eb8 <atan+0x2b8>)
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	4680      	mov	r8, r0
 8008d46:	4689      	mov	r9, r1
 8008d48:	4630      	mov	r0, r6
 8008d4a:	4639      	mov	r1, r7
 8008d4c:	f7f7 fbc4 	bl	80004d8 <__aeabi_dmul>
 8008d50:	a35b      	add	r3, pc, #364	; (adr r3, 8008ec0 <atan+0x2c0>)
 8008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d56:	f7f7 fa07 	bl	8000168 <__aeabi_dsub>
 8008d5a:	4632      	mov	r2, r6
 8008d5c:	463b      	mov	r3, r7
 8008d5e:	f7f7 fbbb 	bl	80004d8 <__aeabi_dmul>
 8008d62:	a359      	add	r3, pc, #356	; (adr r3, 8008ec8 <atan+0x2c8>)
 8008d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d68:	f7f7 f9fe 	bl	8000168 <__aeabi_dsub>
 8008d6c:	4632      	mov	r2, r6
 8008d6e:	463b      	mov	r3, r7
 8008d70:	f7f7 fbb2 	bl	80004d8 <__aeabi_dmul>
 8008d74:	a356      	add	r3, pc, #344	; (adr r3, 8008ed0 <atan+0x2d0>)
 8008d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7a:	f7f7 f9f5 	bl	8000168 <__aeabi_dsub>
 8008d7e:	4632      	mov	r2, r6
 8008d80:	463b      	mov	r3, r7
 8008d82:	f7f7 fba9 	bl	80004d8 <__aeabi_dmul>
 8008d86:	a354      	add	r3, pc, #336	; (adr r3, 8008ed8 <atan+0x2d8>)
 8008d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8c:	f7f7 f9ec 	bl	8000168 <__aeabi_dsub>
 8008d90:	4632      	mov	r2, r6
 8008d92:	463b      	mov	r3, r7
 8008d94:	f7f7 fba0 	bl	80004d8 <__aeabi_dmul>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4640      	mov	r0, r8
 8008d9e:	4649      	mov	r1, r9
 8008da0:	f7f7 f9e4 	bl	800016c <__adddf3>
 8008da4:	4622      	mov	r2, r4
 8008da6:	462b      	mov	r3, r5
 8008da8:	f7f7 fb96 	bl	80004d8 <__aeabi_dmul>
 8008dac:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	d144      	bne.n	8008e40 <atan+0x240>
 8008db6:	4620      	mov	r0, r4
 8008db8:	4629      	mov	r1, r5
 8008dba:	f7f7 f9d5 	bl	8000168 <__aeabi_dsub>
 8008dbe:	e734      	b.n	8008c2a <atan+0x2a>
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4b4c      	ldr	r3, [pc, #304]	; (8008ef4 <atan+0x2f4>)
 8008dc4:	f7f7 f9d0 	bl	8000168 <__aeabi_dsub>
 8008dc8:	2200      	movs	r2, #0
 8008dca:	4606      	mov	r6, r0
 8008dcc:	460f      	mov	r7, r1
 8008dce:	4620      	mov	r0, r4
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	4b48      	ldr	r3, [pc, #288]	; (8008ef4 <atan+0x2f4>)
 8008dd4:	f7f7 f9ca 	bl	800016c <__adddf3>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4630      	mov	r0, r6
 8008dde:	4639      	mov	r1, r7
 8008de0:	f7f7 fca4 	bl	800072c <__aeabi_ddiv>
 8008de4:	f04f 0a01 	mov.w	sl, #1
 8008de8:	4604      	mov	r4, r0
 8008dea:	460d      	mov	r5, r1
 8008dec:	e767      	b.n	8008cbe <atan+0xbe>
 8008dee:	4b43      	ldr	r3, [pc, #268]	; (8008efc <atan+0x2fc>)
 8008df0:	429e      	cmp	r6, r3
 8008df2:	da1a      	bge.n	8008e2a <atan+0x22a>
 8008df4:	2200      	movs	r2, #0
 8008df6:	4b42      	ldr	r3, [pc, #264]	; (8008f00 <atan+0x300>)
 8008df8:	f7f7 f9b6 	bl	8000168 <__aeabi_dsub>
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	4606      	mov	r6, r0
 8008e00:	460f      	mov	r7, r1
 8008e02:	4620      	mov	r0, r4
 8008e04:	4629      	mov	r1, r5
 8008e06:	4b3e      	ldr	r3, [pc, #248]	; (8008f00 <atan+0x300>)
 8008e08:	f7f7 fb66 	bl	80004d8 <__aeabi_dmul>
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	4b39      	ldr	r3, [pc, #228]	; (8008ef4 <atan+0x2f4>)
 8008e10:	f7f7 f9ac 	bl	800016c <__adddf3>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	4630      	mov	r0, r6
 8008e1a:	4639      	mov	r1, r7
 8008e1c:	f7f7 fc86 	bl	800072c <__aeabi_ddiv>
 8008e20:	f04f 0a02 	mov.w	sl, #2
 8008e24:	4604      	mov	r4, r0
 8008e26:	460d      	mov	r5, r1
 8008e28:	e749      	b.n	8008cbe <atan+0xbe>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	2000      	movs	r0, #0
 8008e30:	4934      	ldr	r1, [pc, #208]	; (8008f04 <atan+0x304>)
 8008e32:	f7f7 fc7b 	bl	800072c <__aeabi_ddiv>
 8008e36:	f04f 0a03 	mov.w	sl, #3
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	460d      	mov	r5, r1
 8008e3e:	e73e      	b.n	8008cbe <atan+0xbe>
 8008e40:	4b31      	ldr	r3, [pc, #196]	; (8008f08 <atan+0x308>)
 8008e42:	4e32      	ldr	r6, [pc, #200]	; (8008f0c <atan+0x30c>)
 8008e44:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4c:	f7f7 f98c 	bl	8000168 <__aeabi_dsub>
 8008e50:	4622      	mov	r2, r4
 8008e52:	462b      	mov	r3, r5
 8008e54:	f7f7 f988 	bl	8000168 <__aeabi_dsub>
 8008e58:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008e64:	f7f7 f980 	bl	8000168 <__aeabi_dsub>
 8008e68:	f1bb 0f00 	cmp.w	fp, #0
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	460d      	mov	r5, r1
 8008e70:	f6bf aee4 	bge.w	8008c3c <atan+0x3c>
 8008e74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e78:	461d      	mov	r5, r3
 8008e7a:	e6df      	b.n	8008c3c <atan+0x3c>
 8008e7c:	4d24      	ldr	r5, [pc, #144]	; (8008f10 <atan+0x310>)
 8008e7e:	e6dd      	b.n	8008c3c <atan+0x3c>
 8008e80:	8800759c 	.word	0x8800759c
 8008e84:	7e37e43c 	.word	0x7e37e43c
 8008e88:	e322da11 	.word	0xe322da11
 8008e8c:	3f90ad3a 	.word	0x3f90ad3a
 8008e90:	24760deb 	.word	0x24760deb
 8008e94:	3fa97b4b 	.word	0x3fa97b4b
 8008e98:	a0d03d51 	.word	0xa0d03d51
 8008e9c:	3fb10d66 	.word	0x3fb10d66
 8008ea0:	c54c206e 	.word	0xc54c206e
 8008ea4:	3fb745cd 	.word	0x3fb745cd
 8008ea8:	920083ff 	.word	0x920083ff
 8008eac:	3fc24924 	.word	0x3fc24924
 8008eb0:	5555550d 	.word	0x5555550d
 8008eb4:	3fd55555 	.word	0x3fd55555
 8008eb8:	2c6a6c2f 	.word	0x2c6a6c2f
 8008ebc:	bfa2b444 	.word	0xbfa2b444
 8008ec0:	52defd9a 	.word	0x52defd9a
 8008ec4:	3fadde2d 	.word	0x3fadde2d
 8008ec8:	af749a6d 	.word	0xaf749a6d
 8008ecc:	3fb3b0f2 	.word	0x3fb3b0f2
 8008ed0:	fe231671 	.word	0xfe231671
 8008ed4:	3fbc71c6 	.word	0x3fbc71c6
 8008ed8:	9998ebc4 	.word	0x9998ebc4
 8008edc:	3fc99999 	.word	0x3fc99999
 8008ee0:	440fffff 	.word	0x440fffff
 8008ee4:	7ff00000 	.word	0x7ff00000
 8008ee8:	54442d18 	.word	0x54442d18
 8008eec:	bff921fb 	.word	0xbff921fb
 8008ef0:	3fdbffff 	.word	0x3fdbffff
 8008ef4:	3ff00000 	.word	0x3ff00000
 8008ef8:	3ff2ffff 	.word	0x3ff2ffff
 8008efc:	40038000 	.word	0x40038000
 8008f00:	3ff80000 	.word	0x3ff80000
 8008f04:	bff00000 	.word	0xbff00000
 8008f08:	08009408 	.word	0x08009408
 8008f0c:	080093e8 	.word	0x080093e8
 8008f10:	3ff921fb 	.word	0x3ff921fb

08008f14 <_init>:
 8008f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f16:	bf00      	nop
 8008f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1a:	bc08      	pop	{r3}
 8008f1c:	469e      	mov	lr, r3
 8008f1e:	4770      	bx	lr

08008f20 <_fini>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	bf00      	nop
 8008f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f26:	bc08      	pop	{r3}
 8008f28:	469e      	mov	lr, r3
 8008f2a:	4770      	bx	lr
